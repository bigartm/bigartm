// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artm/core/internals.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "artm/core/internals.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace artm {
namespace core {

namespace {

const ::google::protobuf::Descriptor* Mask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bool_reflection_ = NULL;
const ::google::protobuf::Descriptor* Int_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Int_reflection_ = NULL;
const ::google::protobuf::Descriptor* String_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  String_reflection_ = NULL;
const ::google::protobuf::Descriptor* Void_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Void_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataLoaderCacheEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataLoaderCacheEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessorInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessorInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelIncrement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelIncrement_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModelIncrement_OperationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BatchIds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchIds_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateOrReconfigureModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateOrReconfigureModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisposeModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisposeModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateOrReconfigureRegularizerArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateOrReconfigureRegularizerArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisposeRegularizerArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisposeRegularizerArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateOrReconfigureDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateOrReconfigureDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisposeDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisposeDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestScoreArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestScoreArgs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto() {
  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "artm/core/internals.proto");
  GOOGLE_CHECK(file != NULL);
  Mask_descriptor_ = file->message_type(0);
  static const int Mask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mask, value_),
  };
  Mask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mask_descriptor_,
      Mask::default_instance_,
      Mask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mask));
  Bool_descriptor_ = file->message_type(1);
  static const int Bool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bool, value_),
  };
  Bool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bool_descriptor_,
      Bool::default_instance_,
      Bool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bool));
  Int_descriptor_ = file->message_type(2);
  static const int Int_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int, value_),
  };
  Int_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Int_descriptor_,
      Int::default_instance_,
      Int_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Int));
  String_descriptor_ = file->message_type(3);
  static const int String_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(String, value_),
  };
  String_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      String_descriptor_,
      String::default_instance_,
      String_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(String, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(String, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(String));
  Void_descriptor_ = file->message_type(4);
  static const int Void_offsets_[1] = {
  };
  Void_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Void_descriptor_,
      Void::default_instance_,
      Void_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Void, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Void, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Void));
  DataLoaderCacheEntry_descriptor_ = file->message_type(5);
  static const int DataLoaderCacheEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, batch_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, theta_),
  };
  DataLoaderCacheEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataLoaderCacheEntry_descriptor_,
      DataLoaderCacheEntry::default_instance_,
      DataLoaderCacheEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataLoaderCacheEntry));
  ProcessorInput_descriptor_ = file->message_type(6);
  static const int ProcessorInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorInput, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorInput, batch_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorInput, stream_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorInput, stream_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorInput, cached_theta_),
  };
  ProcessorInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessorInput_descriptor_,
      ProcessorInput::default_instance_,
      ProcessorInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessorInput));
  ModelIncrement_descriptor_ = file->message_type(7);
  static const int ModelIncrement_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, topics_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, operation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, token_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, score_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, batch_uuid_),
  };
  ModelIncrement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelIncrement_descriptor_,
      ModelIncrement::default_instance_,
      ModelIncrement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelIncrement));
  ModelIncrement_OperationType_descriptor_ = ModelIncrement_descriptor_->enum_type(0);
  BatchIds_descriptor_ = file->message_type(8);
  static const int BatchIds_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchIds, batch_id_),
  };
  BatchIds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchIds_descriptor_,
      BatchIds::default_instance_,
      BatchIds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchIds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchIds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchIds));
  CreateOrReconfigureModelArgs_descriptor_ = file->message_type(9);
  static const int CreateOrReconfigureModelArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrReconfigureModelArgs, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrReconfigureModelArgs, config_),
  };
  CreateOrReconfigureModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateOrReconfigureModelArgs_descriptor_,
      CreateOrReconfigureModelArgs::default_instance_,
      CreateOrReconfigureModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrReconfigureModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrReconfigureModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateOrReconfigureModelArgs));
  DisposeModelArgs_descriptor_ = file->message_type(10);
  static const int DisposeModelArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisposeModelArgs, model_name_),
  };
  DisposeModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisposeModelArgs_descriptor_,
      DisposeModelArgs::default_instance_,
      DisposeModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisposeModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisposeModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisposeModelArgs));
  CreateOrReconfigureRegularizerArgs_descriptor_ = file->message_type(11);
  static const int CreateOrReconfigureRegularizerArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrReconfigureRegularizerArgs, regularizer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrReconfigureRegularizerArgs, config_),
  };
  CreateOrReconfigureRegularizerArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateOrReconfigureRegularizerArgs_descriptor_,
      CreateOrReconfigureRegularizerArgs::default_instance_,
      CreateOrReconfigureRegularizerArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrReconfigureRegularizerArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrReconfigureRegularizerArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateOrReconfigureRegularizerArgs));
  DisposeRegularizerArgs_descriptor_ = file->message_type(12);
  static const int DisposeRegularizerArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisposeRegularizerArgs, regularizer_name_),
  };
  DisposeRegularizerArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisposeRegularizerArgs_descriptor_,
      DisposeRegularizerArgs::default_instance_,
      DisposeRegularizerArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisposeRegularizerArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisposeRegularizerArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisposeRegularizerArgs));
  CreateOrReconfigureDictionaryArgs_descriptor_ = file->message_type(13);
  static const int CreateOrReconfigureDictionaryArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrReconfigureDictionaryArgs, dictionary_),
  };
  CreateOrReconfigureDictionaryArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateOrReconfigureDictionaryArgs_descriptor_,
      CreateOrReconfigureDictionaryArgs::default_instance_,
      CreateOrReconfigureDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrReconfigureDictionaryArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateOrReconfigureDictionaryArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateOrReconfigureDictionaryArgs));
  DisposeDictionaryArgs_descriptor_ = file->message_type(14);
  static const int DisposeDictionaryArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisposeDictionaryArgs, dictionary_name_),
  };
  DisposeDictionaryArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisposeDictionaryArgs_descriptor_,
      DisposeDictionaryArgs::default_instance_,
      DisposeDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisposeDictionaryArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisposeDictionaryArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisposeDictionaryArgs));
  RequestScoreArgs_descriptor_ = file->message_type(15);
  static const int RequestScoreArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScoreArgs, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScoreArgs, score_name_),
  };
  RequestScoreArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestScoreArgs_descriptor_,
      RequestScoreArgs::default_instance_,
      RequestScoreArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScoreArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestScoreArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestScoreArgs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_artm_2fcore_2finternals_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mask_descriptor_, &Mask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bool_descriptor_, &Bool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Int_descriptor_, &Int::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    String_descriptor_, &String::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Void_descriptor_, &Void::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataLoaderCacheEntry_descriptor_, &DataLoaderCacheEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessorInput_descriptor_, &ProcessorInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelIncrement_descriptor_, &ModelIncrement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchIds_descriptor_, &BatchIds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateOrReconfigureModelArgs_descriptor_, &CreateOrReconfigureModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisposeModelArgs_descriptor_, &DisposeModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateOrReconfigureRegularizerArgs_descriptor_, &CreateOrReconfigureRegularizerArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisposeRegularizerArgs_descriptor_, &DisposeRegularizerArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateOrReconfigureDictionaryArgs_descriptor_, &CreateOrReconfigureDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisposeDictionaryArgs_descriptor_, &DisposeDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestScoreArgs_descriptor_, &RequestScoreArgs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto() {
  delete Mask::default_instance_;
  delete Mask_reflection_;
  delete Bool::default_instance_;
  delete Bool_reflection_;
  delete Int::default_instance_;
  delete Int_reflection_;
  delete String::default_instance_;
  delete String_reflection_;
  delete Void::default_instance_;
  delete Void_reflection_;
  delete DataLoaderCacheEntry::default_instance_;
  delete DataLoaderCacheEntry_reflection_;
  delete ProcessorInput::default_instance_;
  delete ProcessorInput_reflection_;
  delete ModelIncrement::default_instance_;
  delete ModelIncrement_reflection_;
  delete BatchIds::default_instance_;
  delete BatchIds_reflection_;
  delete CreateOrReconfigureModelArgs::default_instance_;
  delete CreateOrReconfigureModelArgs_reflection_;
  delete DisposeModelArgs::default_instance_;
  delete DisposeModelArgs_reflection_;
  delete CreateOrReconfigureRegularizerArgs::default_instance_;
  delete CreateOrReconfigureRegularizerArgs_reflection_;
  delete DisposeRegularizerArgs::default_instance_;
  delete DisposeRegularizerArgs_reflection_;
  delete CreateOrReconfigureDictionaryArgs::default_instance_;
  delete CreateOrReconfigureDictionaryArgs_reflection_;
  delete DisposeDictionaryArgs::default_instance_;
  delete DisposeDictionaryArgs_reflection_;
  delete RequestScoreArgs::default_instance_;
  delete RequestScoreArgs_reflection_;
}

void protobuf_AddDesc_artm_2fcore_2finternals_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::artm::protobuf_AddDesc_artm_2fmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031artm/core/internals.proto\022\tartm.core\032\023"
    "artm/messages.proto\"\031\n\004Mask\022\021\n\005value\030\001 \003"
    "(\010B\002\020\001\"\025\n\004Bool\022\r\n\005value\030\001 \001(\010\"\024\n\003Int\022\r\n\005"
    "value\030\001 \001(\005\"\027\n\006String\022\r\n\005value\030\001 \001(\t\"\006\n\004"
    "Void\"p\n\024DataLoaderCacheEntry\022\022\n\nmodel_na"
    "me\030\001 \001(\t\022\022\n\nbatch_uuid\030\002 \001(\t\022\017\n\007item_id\030"
    "\003 \003(\005\022\037\n\005theta\030\004 \003(\0132\020.artm.FloatArray\"\262"
    "\001\n\016ProcessorInput\022\032\n\005batch\030\001 \002(\0132\013.artm."
    "Batch\022\022\n\nbatch_uuid\030\002 \002(\t\022$\n\013stream_mask"
    "\030\004 \003(\0132\017.artm.core.Mask\022\023\n\013stream_name\030\005"
    " \003(\t\0225\n\014cached_theta\030\006 \003(\0132\037.artm.core.D"
    "ataLoaderCacheEntry\"\245\003\n\016ModelIncrement\022\022"
    "\n\nmodel_name\030\001 \002(\t\022\024\n\014topics_count\030\002 \002(\005"
    "\022\023\n\013topics_name\030\003 \003(\t\022\r\n\005token\030\004 \003(\t\022\020\n\010"
    "class_id\030\005 \003(\t\022\?\n\016operation_type\030\006 \003(\0162\'"
    ".artm.core.ModelIncrement.OperationType\022"
    ")\n\017token_increment\030\007 \003(\0132\020.artm.FloatArr"
    "ay\022\022\n\nscore_name\030\010 \003(\t\022\r\n\005score\030\t \003(\014\022\017\n"
    "\007item_id\030\n \003(\005\022\037\n\005theta\030\013 \003(\0132\020.artm.Flo"
    "atArray\022\022\n\nbatch_uuid\030\014 \003(\t\"^\n\rOperation"
    "Type\022\024\n\020CreateIfNotExist\020\000\022\022\n\016IncrementV"
    "alue\020\001\022\022\n\016OverwriteValue\020\002\022\017\n\013DeleteToke"
    "n\020\003\"\034\n\010BatchIds\022\020\n\010batch_id\030\001 \003(\t\"U\n\034Cre"
    "ateOrReconfigureModelArgs\022\022\n\nmodel_name\030"
    "\002 \001(\t\022!\n\006config\030\003 \001(\0132\021.artm.ModelConfig"
    "\"&\n\020DisposeModelArgs\022\022\n\nmodel_name\030\002 \001(\t"
    "\"g\n\"CreateOrReconfigureRegularizerArgs\022\030"
    "\n\020regularizer_name\030\002 \001(\t\022\'\n\006config\030\003 \001(\013"
    "2\027.artm.RegularizerConfig\"2\n\026DisposeRegu"
    "larizerArgs\022\030\n\020regularizer_name\030\002 \001(\t\"O\n"
    "!CreateOrReconfigureDictionaryArgs\022*\n\ndi"
    "ctionary\030\002 \001(\0132\026.artm.DictionaryConfig\"0"
    "\n\025DisposeDictionaryArgs\022\027\n\017dictionary_na"
    "me\030\002 \001(\t\":\n\020RequestScoreArgs\022\022\n\nmodel_na"
    "me\030\001 \001(\t\022\022\n\nscore_name\030\002 \001(\t2\375\001\n\026MasterC"
    "omponentService\0229\n\013UpdateModel\022\031.artm.co"
    "re.ModelIncrement\032\017.artm.core.Void\022:\n\rRe"
    "trieveModel\022\027.artm.GetTopicModelArgs\032\020.a"
    "rtm.TopicModel\0225\n\016RequestBatches\022\016.artm."
    "core.Int\032\023.artm.core.BatchIds\0225\n\rReportB"
    "atches\022\023.artm.core.BatchIds\032\017.artm.core."
    "Void2\341\013\n\025NodeControllerService\022K\n\033Create"
    "OrReconfigureInstance\022\033.artm.MasterCompo"
    "nentConfig\032\017.artm.core.Void\0223\n\017DisposeIn"
    "stance\022\017.artm.core.Void\032\017.artm.core.Void"
    "\022R\n\"CreateOrReconfigureMasterComponent\022\033"
    ".artm.MasterComponentConfig\032\017.artm.core."
    "Void\022:\n\026DisposeMasterComponent\022\017.artm.co"
    "re.Void\032\017.artm.core.Void\022T\n\030CreateOrReco"
    "nfigureModel\022\'.artm.core.CreateOrReconfi"
    "gureModelArgs\032\017.artm.core.Void\022<\n\014Dispos"
    "eModel\022\033.artm.core.DisposeModelArgs\032\017.ar"
    "tm.core.Void\022`\n\036CreateOrReconfigureRegul"
    "arizer\022-.artm.core.CreateOrReconfigureRe"
    "gularizerArgs\032\017.artm.core.Void\022H\n\022Dispos"
    "eRegularizer\022!.artm.core.DisposeRegulari"
    "zerArgs\032\017.artm.core.Void\022^\n\035CreateOrReco"
    "nfigureDictionary\022,.artm.core.CreateOrRe"
    "configureDictionaryArgs\032\017.artm.core.Void"
    "\022F\n\021DisposeDictionary\022 .artm.core.Dispos"
    "eDictionaryArgs\032\017.artm.core.Void\0227\n\023Forc"
    "ePullTopicModel\022\017.artm.core.Void\032\017.artm."
    "core.Void\022@\n\034ForcePushTopicModelIncremen"
    "t\022\017.artm.core.Void\032\017.artm.core.Void\0228\n\023O"
    "verwriteTopicModel\022\020.artm.TopicModel\032\017.a"
    "rtm.core.Void\022>\n\021RequestTopicModel\022\027.art"
    "m.GetTopicModelArgs\032\020.artm.TopicModel\022L\n"
    "\027RequestRegularizerState\022\021.artm.core.Str"
    "ing\032\036.artm.RegularizerInternalState\022A\n\022R"
    "equestThetaMatrix\022\030.artm.GetThetaMatrixA"
    "rgs\032\021.artm.ThetaMatrix\022<\n\014RequestScore\022\033"
    ".artm.core.RequestScoreArgs\032\017.artm.Score"
    "Data\022(\n\010AddBatch\022\013.artm.Batch\032\017.artm.cor"
    "e.Void\0223\n\017InvokeIteration\022\017.artm.core.Vo"
    "id\032\017.artm.core.Void\022+\n\010WaitIdle\022\017.artm.c"
    "ore.Void\032\016.artm.core.Int\022\?\n\020SynchronizeM"
    "odel\022\032.artm.SynchronizeModelArgs\032\017.artm."
    "core.Void\022=\n\017InitializeModel\022\031.artm.Init"
    "ializeModelArgs\032\017.artm.core.Void", 3152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "artm/core/internals.proto", &protobuf_RegisterTypes);
  Mask::default_instance_ = new Mask();
  Bool::default_instance_ = new Bool();
  Int::default_instance_ = new Int();
  String::default_instance_ = new String();
  Void::default_instance_ = new Void();
  DataLoaderCacheEntry::default_instance_ = new DataLoaderCacheEntry();
  ProcessorInput::default_instance_ = new ProcessorInput();
  ModelIncrement::default_instance_ = new ModelIncrement();
  BatchIds::default_instance_ = new BatchIds();
  CreateOrReconfigureModelArgs::default_instance_ = new CreateOrReconfigureModelArgs();
  DisposeModelArgs::default_instance_ = new DisposeModelArgs();
  CreateOrReconfigureRegularizerArgs::default_instance_ = new CreateOrReconfigureRegularizerArgs();
  DisposeRegularizerArgs::default_instance_ = new DisposeRegularizerArgs();
  CreateOrReconfigureDictionaryArgs::default_instance_ = new CreateOrReconfigureDictionaryArgs();
  DisposeDictionaryArgs::default_instance_ = new DisposeDictionaryArgs();
  RequestScoreArgs::default_instance_ = new RequestScoreArgs();
  Mask::default_instance_->InitAsDefaultInstance();
  Bool::default_instance_->InitAsDefaultInstance();
  Int::default_instance_->InitAsDefaultInstance();
  String::default_instance_->InitAsDefaultInstance();
  Void::default_instance_->InitAsDefaultInstance();
  DataLoaderCacheEntry::default_instance_->InitAsDefaultInstance();
  ProcessorInput::default_instance_->InitAsDefaultInstance();
  ModelIncrement::default_instance_->InitAsDefaultInstance();
  BatchIds::default_instance_->InitAsDefaultInstance();
  CreateOrReconfigureModelArgs::default_instance_->InitAsDefaultInstance();
  DisposeModelArgs::default_instance_->InitAsDefaultInstance();
  CreateOrReconfigureRegularizerArgs::default_instance_->InitAsDefaultInstance();
  DisposeRegularizerArgs::default_instance_->InitAsDefaultInstance();
  CreateOrReconfigureDictionaryArgs::default_instance_->InitAsDefaultInstance();
  DisposeDictionaryArgs::default_instance_->InitAsDefaultInstance();
  RequestScoreArgs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_artm_2fcore_2finternals_2eproto {
  StaticDescriptorInitializer_artm_2fcore_2finternals_2eproto() {
    protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  }
} static_descriptor_initializer_artm_2fcore_2finternals_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Mask::kValueFieldNumber;
#endif  // !_MSC_VER

Mask::Mask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mask::InitAsDefaultInstance() {
}

Mask::Mask(const Mask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mask::~Mask() {
  SharedDtor();
}

void Mask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mask_descriptor_;
}

const Mask& Mask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

Mask* Mask::default_instance_ = NULL;

Mask* Mask::New() const {
  return new Mask;
}

void Mask::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool value = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mask::ByteSize() const {
  int total_size = 0;

  // repeated bool value = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mask::MergeFrom(const Mask& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mask::CopyFrom(const Mask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mask::IsInitialized() const {

  return true;
}

void Mask::Swap(Mask* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mask_descriptor_;
  metadata.reflection = Mask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bool::kValueFieldNumber;
#endif  // !_MSC_VER

Bool::Bool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bool::InitAsDefaultInstance() {
}

Bool::Bool(const Bool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bool::SharedCtor() {
  _cached_size_ = 0;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bool::~Bool() {
  SharedDtor();
}

void Bool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bool_descriptor_;
}

const Bool& Bool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

Bool* Bool::default_instance_ = NULL;

Bool* Bool::New() const {
  return new Bool;
}

void Bool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool value = 1;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bool::MergeFrom(const Bool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bool::CopyFrom(const Bool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bool::IsInitialized() const {

  return true;
}

void Bool::Swap(Bool* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bool_descriptor_;
  metadata.reflection = Bool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Int::kValueFieldNumber;
#endif  // !_MSC_VER

Int::Int()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Int::InitAsDefaultInstance() {
}

Int::Int(const Int& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Int::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Int::~Int() {
  SharedDtor();
}

void Int::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Int::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Int_descriptor_;
}

const Int& Int::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

Int* Int::default_instance_ = NULL;

Int* Int::New() const {
  return new Int;
}

void Int::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Int::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Int::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Int::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Int::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Int* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Int*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Int::MergeFrom(const Int& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Int::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int::CopyFrom(const Int& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int::IsInitialized() const {

  return true;
}

void Int::Swap(Int* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Int::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Int_descriptor_;
  metadata.reflection = Int_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int String::kValueFieldNumber;
#endif  // !_MSC_VER

String::String()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void String::InitAsDefaultInstance() {
}

String::String(const String& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void String::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

String::~String() {
  SharedDtor();
}

void String::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void String::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* String::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return String_descriptor_;
}

const String& String::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

String* String::default_instance_ = NULL;

String* String::New() const {
  return new String;
}

void String::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyString()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool String::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void String::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* String::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int String::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void String::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const String* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const String*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void String::MergeFrom(const String& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void String::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void String::CopyFrom(const String& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool String::IsInitialized() const {

  return true;
}

void String::Swap(String* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata String::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = String_descriptor_;
  metadata.reflection = String_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Void::Void()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Void::InitAsDefaultInstance() {
}

Void::Void(const Void& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Void::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Void::~Void() {
  SharedDtor();
}

void Void::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Void::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Void::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Void_descriptor_;
}

const Void& Void::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

Void* Void::default_instance_ = NULL;

Void* Void::New() const {
  return new Void;
}

void Void::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Void::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Void::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Void::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Void::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Void::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Void* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Void*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Void::MergeFrom(const Void& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Void::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Void::CopyFrom(const Void& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Void::IsInitialized() const {

  return true;
}

void Void::Swap(Void* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Void::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Void_descriptor_;
  metadata.reflection = Void_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataLoaderCacheEntry::kModelNameFieldNumber;
const int DataLoaderCacheEntry::kBatchUuidFieldNumber;
const int DataLoaderCacheEntry::kItemIdFieldNumber;
const int DataLoaderCacheEntry::kThetaFieldNumber;
#endif  // !_MSC_VER

DataLoaderCacheEntry::DataLoaderCacheEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataLoaderCacheEntry::InitAsDefaultInstance() {
}

DataLoaderCacheEntry::DataLoaderCacheEntry(const DataLoaderCacheEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataLoaderCacheEntry::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataLoaderCacheEntry::~DataLoaderCacheEntry() {
  SharedDtor();
}

void DataLoaderCacheEntry::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete batch_uuid_;
  }
  if (this != default_instance_) {
  }
}

void DataLoaderCacheEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataLoaderCacheEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataLoaderCacheEntry_descriptor_;
}

const DataLoaderCacheEntry& DataLoaderCacheEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

DataLoaderCacheEntry* DataLoaderCacheEntry::default_instance_ = NULL;

DataLoaderCacheEntry* DataLoaderCacheEntry::New() const {
  return new DataLoaderCacheEntry;
}

void DataLoaderCacheEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
    if (has_batch_uuid()) {
      if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
        batch_uuid_->clear();
      }
    }
  }
  item_id_.Clear();
  theta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataLoaderCacheEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_batch_uuid;
        break;
      }

      // optional string batch_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_uuid().data(), this->batch_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // repeated int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        if (input->ExpectTag(34)) goto parse_theta;
        break;
      }

      // repeated .artm.FloatArray theta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_theta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_theta;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataLoaderCacheEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_name(), output);
  }

  // optional string batch_uuid = 2;
  if (has_batch_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_uuid().data(), this->batch_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->batch_uuid(), output);
  }

  // repeated int32 item_id = 3;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->item_id(i), output);
  }

  // repeated .artm.FloatArray theta = 4;
  for (int i = 0; i < this->theta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->theta(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataLoaderCacheEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string batch_uuid = 2;
  if (has_batch_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_uuid().data(), this->batch_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->batch_uuid(), target);
  }

  // repeated int32 item_id = 3;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->item_id(i), target);
  }

  // repeated .artm.FloatArray theta = 4;
  for (int i = 0; i < this->theta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->theta(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataLoaderCacheEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string batch_uuid = 2;
    if (has_batch_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->batch_uuid());
    }

  }
  // repeated int32 item_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated .artm.FloatArray theta = 4;
  total_size += 1 * this->theta_size();
  for (int i = 0; i < this->theta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->theta(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataLoaderCacheEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataLoaderCacheEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataLoaderCacheEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataLoaderCacheEntry::MergeFrom(const DataLoaderCacheEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  theta_.MergeFrom(from.theta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_batch_uuid()) {
      set_batch_uuid(from.batch_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataLoaderCacheEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataLoaderCacheEntry::CopyFrom(const DataLoaderCacheEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataLoaderCacheEntry::IsInitialized() const {

  return true;
}

void DataLoaderCacheEntry::Swap(DataLoaderCacheEntry* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(batch_uuid_, other->batch_uuid_);
    item_id_.Swap(&other->item_id_);
    theta_.Swap(&other->theta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataLoaderCacheEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataLoaderCacheEntry_descriptor_;
  metadata.reflection = DataLoaderCacheEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessorInput::kBatchFieldNumber;
const int ProcessorInput::kBatchUuidFieldNumber;
const int ProcessorInput::kStreamMaskFieldNumber;
const int ProcessorInput::kStreamNameFieldNumber;
const int ProcessorInput::kCachedThetaFieldNumber;
#endif  // !_MSC_VER

ProcessorInput::ProcessorInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessorInput::InitAsDefaultInstance() {
  batch_ = const_cast< ::artm::Batch*>(&::artm::Batch::default_instance());
}

ProcessorInput::ProcessorInput(const ProcessorInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessorInput::SharedCtor() {
  _cached_size_ = 0;
  batch_ = NULL;
  batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessorInput::~ProcessorInput() {
  SharedDtor();
}

void ProcessorInput::SharedDtor() {
  if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete batch_uuid_;
  }
  if (this != default_instance_) {
    delete batch_;
  }
}

void ProcessorInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessorInput_descriptor_;
}

const ProcessorInput& ProcessorInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

ProcessorInput* ProcessorInput::default_instance_ = NULL;

ProcessorInput* ProcessorInput::New() const {
  return new ProcessorInput;
}

void ProcessorInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_batch()) {
      if (batch_ != NULL) batch_->::artm::Batch::Clear();
    }
    if (has_batch_uuid()) {
      if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
        batch_uuid_->clear();
      }
    }
  }
  stream_mask_.Clear();
  stream_name_.Clear();
  cached_theta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessorInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .artm.Batch batch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_batch_uuid;
        break;
      }

      // required string batch_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_uuid().data(), this->batch_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stream_mask;
        break;
      }

      // repeated .artm.core.Mask stream_mask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stream_mask;
        if (input->ExpectTag(42)) goto parse_stream_name;
        break;
      }

      // repeated string stream_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stream_name(this->stream_name_size() - 1).data(),
            this->stream_name(this->stream_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stream_name;
        if (input->ExpectTag(50)) goto parse_cached_theta;
        break;
      }

      // repeated .artm.core.DataLoaderCacheEntry cached_theta = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cached_theta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cached_theta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cached_theta;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessorInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .artm.Batch batch = 1;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->batch(), output);
  }

  // required string batch_uuid = 2;
  if (has_batch_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_uuid().data(), this->batch_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->batch_uuid(), output);
  }

  // repeated .artm.core.Mask stream_mask = 4;
  for (int i = 0; i < this->stream_mask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stream_mask(i), output);
  }

  // repeated string stream_name = 5;
  for (int i = 0; i < this->stream_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stream_name(i).data(), this->stream_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stream_name(i), output);
  }

  // repeated .artm.core.DataLoaderCacheEntry cached_theta = 6;
  for (int i = 0; i < this->cached_theta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cached_theta(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessorInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .artm.Batch batch = 1;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->batch(), target);
  }

  // required string batch_uuid = 2;
  if (has_batch_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_uuid().data(), this->batch_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->batch_uuid(), target);
  }

  // repeated .artm.core.Mask stream_mask = 4;
  for (int i = 0; i < this->stream_mask_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stream_mask(i), target);
  }

  // repeated string stream_name = 5;
  for (int i = 0; i < this->stream_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_name(i).data(), this->stream_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->stream_name(i), target);
  }

  // repeated .artm.core.DataLoaderCacheEntry cached_theta = 6;
  for (int i = 0; i < this->cached_theta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cached_theta(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessorInput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .artm.Batch batch = 1;
    if (has_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batch());
    }

    // required string batch_uuid = 2;
    if (has_batch_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->batch_uuid());
    }

  }
  // repeated .artm.core.Mask stream_mask = 4;
  total_size += 1 * this->stream_mask_size();
  for (int i = 0; i < this->stream_mask_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream_mask(i));
  }

  // repeated string stream_name = 5;
  total_size += 1 * this->stream_name_size();
  for (int i = 0; i < this->stream_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stream_name(i));
  }

  // repeated .artm.core.DataLoaderCacheEntry cached_theta = 6;
  total_size += 1 * this->cached_theta_size();
  for (int i = 0; i < this->cached_theta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cached_theta(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessorInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessorInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessorInput::MergeFrom(const ProcessorInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_mask_.MergeFrom(from.stream_mask_);
  stream_name_.MergeFrom(from.stream_name_);
  cached_theta_.MergeFrom(from.cached_theta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_batch()) {
      mutable_batch()->::artm::Batch::MergeFrom(from.batch());
    }
    if (from.has_batch_uuid()) {
      set_batch_uuid(from.batch_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessorInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorInput::CopyFrom(const ProcessorInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ProcessorInput::Swap(ProcessorInput* other) {
  if (other != this) {
    std::swap(batch_, other->batch_);
    std::swap(batch_uuid_, other->batch_uuid_);
    stream_mask_.Swap(&other->stream_mask_);
    stream_name_.Swap(&other->stream_name_);
    cached_theta_.Swap(&other->cached_theta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessorInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessorInput_descriptor_;
  metadata.reflection = ProcessorInput_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ModelIncrement_OperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelIncrement_OperationType_descriptor_;
}
bool ModelIncrement_OperationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ModelIncrement_OperationType ModelIncrement::CreateIfNotExist;
const ModelIncrement_OperationType ModelIncrement::IncrementValue;
const ModelIncrement_OperationType ModelIncrement::OverwriteValue;
const ModelIncrement_OperationType ModelIncrement::DeleteToken;
const ModelIncrement_OperationType ModelIncrement::OperationType_MIN;
const ModelIncrement_OperationType ModelIncrement::OperationType_MAX;
const int ModelIncrement::OperationType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ModelIncrement::kModelNameFieldNumber;
const int ModelIncrement::kTopicsCountFieldNumber;
const int ModelIncrement::kTopicsNameFieldNumber;
const int ModelIncrement::kTokenFieldNumber;
const int ModelIncrement::kClassIdFieldNumber;
const int ModelIncrement::kOperationTypeFieldNumber;
const int ModelIncrement::kTokenIncrementFieldNumber;
const int ModelIncrement::kScoreNameFieldNumber;
const int ModelIncrement::kScoreFieldNumber;
const int ModelIncrement::kItemIdFieldNumber;
const int ModelIncrement::kThetaFieldNumber;
const int ModelIncrement::kBatchUuidFieldNumber;
#endif  // !_MSC_VER

ModelIncrement::ModelIncrement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelIncrement::InitAsDefaultInstance() {
}

ModelIncrement::ModelIncrement(const ModelIncrement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelIncrement::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  topics_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelIncrement::~ModelIncrement() {
  SharedDtor();
}

void ModelIncrement::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (this != default_instance_) {
  }
}

void ModelIncrement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelIncrement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelIncrement_descriptor_;
}

const ModelIncrement& ModelIncrement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

ModelIncrement* ModelIncrement::default_instance_ = NULL;

ModelIncrement* ModelIncrement::New() const {
  return new ModelIncrement;
}

void ModelIncrement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
    topics_count_ = 0;
  }
  topics_name_.Clear();
  token_.Clear();
  class_id_.Clear();
  operation_type_.Clear();
  token_increment_.Clear();
  score_name_.Clear();
  score_.Clear();
  item_id_.Clear();
  theta_.Clear();
  batch_uuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelIncrement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topics_count;
        break;
      }

      // required int32 topics_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topics_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topics_count_)));
          set_has_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topics_name;
        break;
      }

      // repeated string topics_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topics_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topics_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topics_name(this->topics_name_size() - 1).data(),
            this->topics_name(this->topics_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topics_name;
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // repeated string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        if (input->ExpectTag(42)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_class_id;
        if (input->ExpectTag(48)) goto parse_operation_type;
        break;
      }

      // repeated .artm.core.ModelIncrement.OperationType operation_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::core::ModelIncrement_OperationType_IsValid(value)) {
            add_operation_type(static_cast< ::artm::core::ModelIncrement_OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::artm::core::ModelIncrement_OperationType_IsValid,
                 this->mutable_operation_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operation_type;
        if (input->ExpectTag(58)) goto parse_token_increment;
        break;
      }

      // repeated .artm.FloatArray token_increment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token_increment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_token_increment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_token_increment;
        if (input->ExpectTag(66)) goto parse_score_name;
        break;
      }

      // repeated string score_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_score_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->score_name(this->score_name_size() - 1).data(),
            this->score_name(this->score_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_score_name;
        if (input->ExpectTag(74)) goto parse_score;
        break;
      }

      // repeated bytes score = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_score;
        if (input->ExpectTag(80)) goto parse_item_id;
        break;
      }

      // repeated int32 item_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_item_id;
        if (input->ExpectTag(90)) goto parse_theta;
        break;
      }

      // repeated .artm.FloatArray theta = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_theta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_theta;
        if (input->ExpectTag(98)) goto parse_batch_uuid;
        break;
      }

      // repeated string batch_uuid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_uuid(this->batch_uuid_size() - 1).data(),
            this->batch_uuid(this->batch_uuid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_batch_uuid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelIncrement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_name(), output);
  }

  // required int32 topics_count = 2;
  if (has_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topics_count(), output);
  }

  // repeated string topics_name = 3;
  for (int i = 0; i < this->topics_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topics_name(i).data(), this->topics_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topics_name(i), output);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->token(i).data(), this->token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(i), output);
  }

  // repeated string class_id = 5;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->class_id(i), output);
  }

  // repeated .artm.core.ModelIncrement.OperationType operation_type = 6;
  for (int i = 0; i < this->operation_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->operation_type(i), output);
  }

  // repeated .artm.FloatArray token_increment = 7;
  for (int i = 0; i < this->token_increment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->token_increment(i), output);
  }

  // repeated string score_name = 8;
  for (int i = 0; i < this->score_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->score_name(i).data(), this->score_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->score_name(i), output);
  }

  // repeated bytes score = 9;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->score(i), output);
  }

  // repeated int32 item_id = 10;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->item_id(i), output);
  }

  // repeated .artm.FloatArray theta = 11;
  for (int i = 0; i < this->theta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->theta(i), output);
  }

  // repeated string batch_uuid = 12;
  for (int i = 0; i < this->batch_uuid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->batch_uuid(i).data(), this->batch_uuid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->batch_uuid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelIncrement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required int32 topics_count = 2;
  if (has_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topics_count(), target);
  }

  // repeated string topics_name = 3;
  for (int i = 0; i < this->topics_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topics_name(i).data(), this->topics_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topics_name(i), target);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->token(i), target);
  }

  // repeated string class_id = 5;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->class_id(i), target);
  }

  // repeated .artm.core.ModelIncrement.OperationType operation_type = 6;
  for (int i = 0; i < this->operation_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->operation_type(i), target);
  }

  // repeated .artm.FloatArray token_increment = 7;
  for (int i = 0; i < this->token_increment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->token_increment(i), target);
  }

  // repeated string score_name = 8;
  for (int i = 0; i < this->score_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score_name(i).data(), this->score_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->score_name(i), target);
  }

  // repeated bytes score = 9;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(9, this->score(i), target);
  }

  // repeated int32 item_id = 10;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->item_id(i), target);
  }

  // repeated .artm.FloatArray theta = 11;
  for (int i = 0; i < this->theta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->theta(i), target);
  }

  // repeated string batch_uuid = 12;
  for (int i = 0; i < this->batch_uuid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_uuid(i).data(), this->batch_uuid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->batch_uuid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelIncrement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // required int32 topics_count = 2;
    if (has_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topics_count());
    }

  }
  // repeated string topics_name = 3;
  total_size += 1 * this->topics_name_size();
  for (int i = 0; i < this->topics_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topics_name(i));
  }

  // repeated string token = 4;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated string class_id = 5;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated .artm.core.ModelIncrement.OperationType operation_type = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->operation_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->operation_type(i));
    }
    total_size += 1 * this->operation_type_size() + data_size;
  }

  // repeated .artm.FloatArray token_increment = 7;
  total_size += 1 * this->token_increment_size();
  for (int i = 0; i < this->token_increment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->token_increment(i));
  }

  // repeated string score_name = 8;
  total_size += 1 * this->score_name_size();
  for (int i = 0; i < this->score_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->score_name(i));
  }

  // repeated bytes score = 9;
  total_size += 1 * this->score_size();
  for (int i = 0; i < this->score_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->score(i));
  }

  // repeated int32 item_id = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated .artm.FloatArray theta = 11;
  total_size += 1 * this->theta_size();
  for (int i = 0; i < this->theta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->theta(i));
  }

  // repeated string batch_uuid = 12;
  total_size += 1 * this->batch_uuid_size();
  for (int i = 0; i < this->batch_uuid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_uuid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelIncrement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelIncrement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelIncrement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelIncrement::MergeFrom(const ModelIncrement& from) {
  GOOGLE_CHECK_NE(&from, this);
  topics_name_.MergeFrom(from.topics_name_);
  token_.MergeFrom(from.token_);
  class_id_.MergeFrom(from.class_id_);
  operation_type_.MergeFrom(from.operation_type_);
  token_increment_.MergeFrom(from.token_increment_);
  score_name_.MergeFrom(from.score_name_);
  score_.MergeFrom(from.score_);
  item_id_.MergeFrom(from.item_id_);
  theta_.MergeFrom(from.theta_);
  batch_uuid_.MergeFrom(from.batch_uuid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_topics_count()) {
      set_topics_count(from.topics_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelIncrement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelIncrement::CopyFrom(const ModelIncrement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelIncrement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModelIncrement::Swap(ModelIncrement* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(topics_count_, other->topics_count_);
    topics_name_.Swap(&other->topics_name_);
    token_.Swap(&other->token_);
    class_id_.Swap(&other->class_id_);
    operation_type_.Swap(&other->operation_type_);
    token_increment_.Swap(&other->token_increment_);
    score_name_.Swap(&other->score_name_);
    score_.Swap(&other->score_);
    item_id_.Swap(&other->item_id_);
    theta_.Swap(&other->theta_);
    batch_uuid_.Swap(&other->batch_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelIncrement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelIncrement_descriptor_;
  metadata.reflection = ModelIncrement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchIds::kBatchIdFieldNumber;
#endif  // !_MSC_VER

BatchIds::BatchIds()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchIds::InitAsDefaultInstance() {
}

BatchIds::BatchIds(const BatchIds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchIds::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchIds::~BatchIds() {
  SharedDtor();
}

void BatchIds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchIds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchIds_descriptor_;
}

const BatchIds& BatchIds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

BatchIds* BatchIds::default_instance_ = NULL;

BatchIds* BatchIds::New() const {
  return new BatchIds;
}

void BatchIds::Clear() {
  batch_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string batch_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_id(this->batch_id_size() - 1).data(),
            this->batch_id(this->batch_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_batch_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string batch_id = 1;
  for (int i = 0; i < this->batch_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->batch_id(i).data(), this->batch_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->batch_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchIds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string batch_id = 1;
  for (int i = 0; i < this->batch_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_id(i).data(), this->batch_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->batch_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchIds::ByteSize() const {
  int total_size = 0;

  // repeated string batch_id = 1;
  total_size += 1 * this->batch_id_size();
  for (int i = 0; i < this->batch_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchIds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchIds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchIds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchIds::MergeFrom(const BatchIds& from) {
  GOOGLE_CHECK_NE(&from, this);
  batch_id_.MergeFrom(from.batch_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchIds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchIds::CopyFrom(const BatchIds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchIds::IsInitialized() const {

  return true;
}

void BatchIds::Swap(BatchIds* other) {
  if (other != this) {
    batch_id_.Swap(&other->batch_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchIds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchIds_descriptor_;
  metadata.reflection = BatchIds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateOrReconfigureModelArgs::kModelNameFieldNumber;
const int CreateOrReconfigureModelArgs::kConfigFieldNumber;
#endif  // !_MSC_VER

CreateOrReconfigureModelArgs::CreateOrReconfigureModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateOrReconfigureModelArgs::InitAsDefaultInstance() {
  config_ = const_cast< ::artm::ModelConfig*>(&::artm::ModelConfig::default_instance());
}

CreateOrReconfigureModelArgs::CreateOrReconfigureModelArgs(const CreateOrReconfigureModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateOrReconfigureModelArgs::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateOrReconfigureModelArgs::~CreateOrReconfigureModelArgs() {
  SharedDtor();
}

void CreateOrReconfigureModelArgs::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (this != default_instance_) {
    delete config_;
  }
}

void CreateOrReconfigureModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateOrReconfigureModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateOrReconfigureModelArgs_descriptor_;
}

const CreateOrReconfigureModelArgs& CreateOrReconfigureModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

CreateOrReconfigureModelArgs* CreateOrReconfigureModelArgs::default_instance_ = NULL;

CreateOrReconfigureModelArgs* CreateOrReconfigureModelArgs::New() const {
  return new CreateOrReconfigureModelArgs;
}

void CreateOrReconfigureModelArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
    if (has_config()) {
      if (config_ != NULL) config_->::artm::ModelConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateOrReconfigureModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // optional .artm.ModelConfig config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateOrReconfigureModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->model_name(), output);
  }

  // optional .artm.ModelConfig config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateOrReconfigureModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_name(), target);
  }

  // optional .artm.ModelConfig config = 3;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateOrReconfigureModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 2;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional .artm.ModelConfig config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateOrReconfigureModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateOrReconfigureModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateOrReconfigureModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateOrReconfigureModelArgs::MergeFrom(const CreateOrReconfigureModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_config()) {
      mutable_config()->::artm::ModelConfig::MergeFrom(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateOrReconfigureModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateOrReconfigureModelArgs::CopyFrom(const CreateOrReconfigureModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOrReconfigureModelArgs::IsInitialized() const {

  return true;
}

void CreateOrReconfigureModelArgs::Swap(CreateOrReconfigureModelArgs* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateOrReconfigureModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateOrReconfigureModelArgs_descriptor_;
  metadata.reflection = CreateOrReconfigureModelArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisposeModelArgs::kModelNameFieldNumber;
#endif  // !_MSC_VER

DisposeModelArgs::DisposeModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisposeModelArgs::InitAsDefaultInstance() {
}

DisposeModelArgs::DisposeModelArgs(const DisposeModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisposeModelArgs::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisposeModelArgs::~DisposeModelArgs() {
  SharedDtor();
}

void DisposeModelArgs::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (this != default_instance_) {
  }
}

void DisposeModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisposeModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisposeModelArgs_descriptor_;
}

const DisposeModelArgs& DisposeModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

DisposeModelArgs* DisposeModelArgs::default_instance_ = NULL;

DisposeModelArgs* DisposeModelArgs::New() const {
  return new DisposeModelArgs;
}

void DisposeModelArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisposeModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisposeModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->model_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisposeModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisposeModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 2;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisposeModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisposeModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisposeModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisposeModelArgs::MergeFrom(const DisposeModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisposeModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisposeModelArgs::CopyFrom(const DisposeModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisposeModelArgs::IsInitialized() const {

  return true;
}

void DisposeModelArgs::Swap(DisposeModelArgs* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisposeModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisposeModelArgs_descriptor_;
  metadata.reflection = DisposeModelArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateOrReconfigureRegularizerArgs::kRegularizerNameFieldNumber;
const int CreateOrReconfigureRegularizerArgs::kConfigFieldNumber;
#endif  // !_MSC_VER

CreateOrReconfigureRegularizerArgs::CreateOrReconfigureRegularizerArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateOrReconfigureRegularizerArgs::InitAsDefaultInstance() {
  config_ = const_cast< ::artm::RegularizerConfig*>(&::artm::RegularizerConfig::default_instance());
}

CreateOrReconfigureRegularizerArgs::CreateOrReconfigureRegularizerArgs(const CreateOrReconfigureRegularizerArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateOrReconfigureRegularizerArgs::SharedCtor() {
  _cached_size_ = 0;
  regularizer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateOrReconfigureRegularizerArgs::~CreateOrReconfigureRegularizerArgs() {
  SharedDtor();
}

void CreateOrReconfigureRegularizerArgs::SharedDtor() {
  if (regularizer_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete regularizer_name_;
  }
  if (this != default_instance_) {
    delete config_;
  }
}

void CreateOrReconfigureRegularizerArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateOrReconfigureRegularizerArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateOrReconfigureRegularizerArgs_descriptor_;
}

const CreateOrReconfigureRegularizerArgs& CreateOrReconfigureRegularizerArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

CreateOrReconfigureRegularizerArgs* CreateOrReconfigureRegularizerArgs::default_instance_ = NULL;

CreateOrReconfigureRegularizerArgs* CreateOrReconfigureRegularizerArgs::New() const {
  return new CreateOrReconfigureRegularizerArgs;
}

void CreateOrReconfigureRegularizerArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_regularizer_name()) {
      if (regularizer_name_ != &::google::protobuf::internal::GetEmptyString()) {
        regularizer_name_->clear();
      }
    }
    if (has_config()) {
      if (config_ != NULL) config_->::artm::RegularizerConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateOrReconfigureRegularizerArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string regularizer_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regularizer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regularizer_name().data(), this->regularizer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // optional .artm.RegularizerConfig config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateOrReconfigureRegularizerArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string regularizer_name = 2;
  if (has_regularizer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regularizer_name().data(), this->regularizer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->regularizer_name(), output);
  }

  // optional .artm.RegularizerConfig config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateOrReconfigureRegularizerArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string regularizer_name = 2;
  if (has_regularizer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regularizer_name().data(), this->regularizer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->regularizer_name(), target);
  }

  // optional .artm.RegularizerConfig config = 3;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateOrReconfigureRegularizerArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string regularizer_name = 2;
    if (has_regularizer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regularizer_name());
    }

    // optional .artm.RegularizerConfig config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateOrReconfigureRegularizerArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateOrReconfigureRegularizerArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateOrReconfigureRegularizerArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateOrReconfigureRegularizerArgs::MergeFrom(const CreateOrReconfigureRegularizerArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regularizer_name()) {
      set_regularizer_name(from.regularizer_name());
    }
    if (from.has_config()) {
      mutable_config()->::artm::RegularizerConfig::MergeFrom(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateOrReconfigureRegularizerArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateOrReconfigureRegularizerArgs::CopyFrom(const CreateOrReconfigureRegularizerArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOrReconfigureRegularizerArgs::IsInitialized() const {

  return true;
}

void CreateOrReconfigureRegularizerArgs::Swap(CreateOrReconfigureRegularizerArgs* other) {
  if (other != this) {
    std::swap(regularizer_name_, other->regularizer_name_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateOrReconfigureRegularizerArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateOrReconfigureRegularizerArgs_descriptor_;
  metadata.reflection = CreateOrReconfigureRegularizerArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisposeRegularizerArgs::kRegularizerNameFieldNumber;
#endif  // !_MSC_VER

DisposeRegularizerArgs::DisposeRegularizerArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisposeRegularizerArgs::InitAsDefaultInstance() {
}

DisposeRegularizerArgs::DisposeRegularizerArgs(const DisposeRegularizerArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisposeRegularizerArgs::SharedCtor() {
  _cached_size_ = 0;
  regularizer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisposeRegularizerArgs::~DisposeRegularizerArgs() {
  SharedDtor();
}

void DisposeRegularizerArgs::SharedDtor() {
  if (regularizer_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete regularizer_name_;
  }
  if (this != default_instance_) {
  }
}

void DisposeRegularizerArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisposeRegularizerArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisposeRegularizerArgs_descriptor_;
}

const DisposeRegularizerArgs& DisposeRegularizerArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

DisposeRegularizerArgs* DisposeRegularizerArgs::default_instance_ = NULL;

DisposeRegularizerArgs* DisposeRegularizerArgs::New() const {
  return new DisposeRegularizerArgs;
}

void DisposeRegularizerArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_regularizer_name()) {
      if (regularizer_name_ != &::google::protobuf::internal::GetEmptyString()) {
        regularizer_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisposeRegularizerArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string regularizer_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regularizer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regularizer_name().data(), this->regularizer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisposeRegularizerArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string regularizer_name = 2;
  if (has_regularizer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regularizer_name().data(), this->regularizer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->regularizer_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisposeRegularizerArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string regularizer_name = 2;
  if (has_regularizer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regularizer_name().data(), this->regularizer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->regularizer_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisposeRegularizerArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string regularizer_name = 2;
    if (has_regularizer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regularizer_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisposeRegularizerArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisposeRegularizerArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisposeRegularizerArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisposeRegularizerArgs::MergeFrom(const DisposeRegularizerArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regularizer_name()) {
      set_regularizer_name(from.regularizer_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisposeRegularizerArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisposeRegularizerArgs::CopyFrom(const DisposeRegularizerArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisposeRegularizerArgs::IsInitialized() const {

  return true;
}

void DisposeRegularizerArgs::Swap(DisposeRegularizerArgs* other) {
  if (other != this) {
    std::swap(regularizer_name_, other->regularizer_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisposeRegularizerArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisposeRegularizerArgs_descriptor_;
  metadata.reflection = DisposeRegularizerArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateOrReconfigureDictionaryArgs::kDictionaryFieldNumber;
#endif  // !_MSC_VER

CreateOrReconfigureDictionaryArgs::CreateOrReconfigureDictionaryArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateOrReconfigureDictionaryArgs::InitAsDefaultInstance() {
  dictionary_ = const_cast< ::artm::DictionaryConfig*>(&::artm::DictionaryConfig::default_instance());
}

CreateOrReconfigureDictionaryArgs::CreateOrReconfigureDictionaryArgs(const CreateOrReconfigureDictionaryArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateOrReconfigureDictionaryArgs::SharedCtor() {
  _cached_size_ = 0;
  dictionary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateOrReconfigureDictionaryArgs::~CreateOrReconfigureDictionaryArgs() {
  SharedDtor();
}

void CreateOrReconfigureDictionaryArgs::SharedDtor() {
  if (this != default_instance_) {
    delete dictionary_;
  }
}

void CreateOrReconfigureDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateOrReconfigureDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateOrReconfigureDictionaryArgs_descriptor_;
}

const CreateOrReconfigureDictionaryArgs& CreateOrReconfigureDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

CreateOrReconfigureDictionaryArgs* CreateOrReconfigureDictionaryArgs::default_instance_ = NULL;

CreateOrReconfigureDictionaryArgs* CreateOrReconfigureDictionaryArgs::New() const {
  return new CreateOrReconfigureDictionaryArgs;
}

void CreateOrReconfigureDictionaryArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dictionary()) {
      if (dictionary_ != NULL) dictionary_->::artm::DictionaryConfig::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateOrReconfigureDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.DictionaryConfig dictionary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dictionary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateOrReconfigureDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .artm.DictionaryConfig dictionary = 2;
  if (has_dictionary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dictionary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateOrReconfigureDictionaryArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .artm.DictionaryConfig dictionary = 2;
  if (has_dictionary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dictionary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateOrReconfigureDictionaryArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .artm.DictionaryConfig dictionary = 2;
    if (has_dictionary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dictionary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateOrReconfigureDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateOrReconfigureDictionaryArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateOrReconfigureDictionaryArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateOrReconfigureDictionaryArgs::MergeFrom(const CreateOrReconfigureDictionaryArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dictionary()) {
      mutable_dictionary()->::artm::DictionaryConfig::MergeFrom(from.dictionary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateOrReconfigureDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateOrReconfigureDictionaryArgs::CopyFrom(const CreateOrReconfigureDictionaryArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOrReconfigureDictionaryArgs::IsInitialized() const {

  return true;
}

void CreateOrReconfigureDictionaryArgs::Swap(CreateOrReconfigureDictionaryArgs* other) {
  if (other != this) {
    std::swap(dictionary_, other->dictionary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateOrReconfigureDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateOrReconfigureDictionaryArgs_descriptor_;
  metadata.reflection = CreateOrReconfigureDictionaryArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisposeDictionaryArgs::kDictionaryNameFieldNumber;
#endif  // !_MSC_VER

DisposeDictionaryArgs::DisposeDictionaryArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisposeDictionaryArgs::InitAsDefaultInstance() {
}

DisposeDictionaryArgs::DisposeDictionaryArgs(const DisposeDictionaryArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisposeDictionaryArgs::SharedCtor() {
  _cached_size_ = 0;
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisposeDictionaryArgs::~DisposeDictionaryArgs() {
  SharedDtor();
}

void DisposeDictionaryArgs::SharedDtor() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (this != default_instance_) {
  }
}

void DisposeDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisposeDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisposeDictionaryArgs_descriptor_;
}

const DisposeDictionaryArgs& DisposeDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

DisposeDictionaryArgs* DisposeDictionaryArgs::default_instance_ = NULL;

DisposeDictionaryArgs* DisposeDictionaryArgs::New() const {
  return new DisposeDictionaryArgs;
}

void DisposeDictionaryArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisposeDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dictionary_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisposeDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dictionary_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisposeDictionaryArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dictionary_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisposeDictionaryArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dictionary_name = 2;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisposeDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisposeDictionaryArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisposeDictionaryArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisposeDictionaryArgs::MergeFrom(const DisposeDictionaryArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisposeDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisposeDictionaryArgs::CopyFrom(const DisposeDictionaryArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisposeDictionaryArgs::IsInitialized() const {

  return true;
}

void DisposeDictionaryArgs::Swap(DisposeDictionaryArgs* other) {
  if (other != this) {
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisposeDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisposeDictionaryArgs_descriptor_;
  metadata.reflection = DisposeDictionaryArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestScoreArgs::kModelNameFieldNumber;
const int RequestScoreArgs::kScoreNameFieldNumber;
#endif  // !_MSC_VER

RequestScoreArgs::RequestScoreArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestScoreArgs::InitAsDefaultInstance() {
}

RequestScoreArgs::RequestScoreArgs(const RequestScoreArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestScoreArgs::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  score_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestScoreArgs::~RequestScoreArgs() {
  SharedDtor();
}

void RequestScoreArgs::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete score_name_;
  }
  if (this != default_instance_) {
  }
}

void RequestScoreArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestScoreArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestScoreArgs_descriptor_;
}

const RequestScoreArgs& RequestScoreArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

RequestScoreArgs* RequestScoreArgs::default_instance_ = NULL;

RequestScoreArgs* RequestScoreArgs::New() const {
  return new RequestScoreArgs;
}

void RequestScoreArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
    if (has_score_name()) {
      if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
        score_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestScoreArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_score_name;
        break;
      }

      // optional string score_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_score_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->score_name().data(), this->score_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestScoreArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_name(), output);
  }

  // optional string score_name = 2;
  if (has_score_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score_name().data(), this->score_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->score_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestScoreArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string score_name = 2;
  if (has_score_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score_name().data(), this->score_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->score_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestScoreArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string score_name = 2;
    if (has_score_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->score_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestScoreArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestScoreArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestScoreArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestScoreArgs::MergeFrom(const RequestScoreArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_score_name()) {
      set_score_name(from.score_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestScoreArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestScoreArgs::CopyFrom(const RequestScoreArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestScoreArgs::IsInitialized() const {

  return true;
}

void RequestScoreArgs::Swap(RequestScoreArgs* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(score_name_, other->score_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestScoreArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestScoreArgs_descriptor_;
  metadata.reflection = RequestScoreArgs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace artm

// @@protoc_insertion_point(global_scope)
