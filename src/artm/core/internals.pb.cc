// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artm/core/internals.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "artm/core/internals.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace artm {
namespace core {

namespace {

const ::google::protobuf::Descriptor* Mask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mask_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataLoaderCacheEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataLoaderCacheEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamMasks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamMasks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelIncrement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelIncrement_reflection_ = NULL;
const ::google::protobuf::Descriptor* DictionaryEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DictionaryEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto() {
  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "artm/core/internals.proto");
  GOOGLE_CHECK(file != NULL);
  Mask_descriptor_ = file->message_type(0);
  static const int Mask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mask, value_),
  };
  Mask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mask_descriptor_,
      Mask::default_instance_,
      Mask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mask));
  DataLoaderCacheEntry_descriptor_ = file->message_type(1);
  static const int DataLoaderCacheEntry_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, batch_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, item_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, topic_index_),
  };
  DataLoaderCacheEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataLoaderCacheEntry_descriptor_,
      DataLoaderCacheEntry::default_instance_,
      DataLoaderCacheEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLoaderCacheEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataLoaderCacheEntry));
  StreamMasks_descriptor_ = file->message_type(2);
  static const int StreamMasks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMasks, stream_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMasks, stream_name_),
  };
  StreamMasks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamMasks_descriptor_,
      StreamMasks::default_instance_,
      StreamMasks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMasks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMasks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamMasks));
  ModelIncrement_descriptor_ = file->message_type(3);
  static const int ModelIncrement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, topic_model_),
  };
  ModelIncrement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelIncrement_descriptor_,
      ModelIncrement::default_instance_,
      ModelIncrement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelIncrement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelIncrement));
  DictionaryEntry_descriptor_ = file->message_type(4);
  static const int DictionaryEntry_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, key_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, value_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, token_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, items_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, token_weight_),
  };
  DictionaryEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DictionaryEntry_descriptor_,
      DictionaryEntry::default_instance_,
      DictionaryEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DictionaryEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_artm_2fcore_2finternals_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mask_descriptor_, &Mask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataLoaderCacheEntry_descriptor_, &DataLoaderCacheEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamMasks_descriptor_, &StreamMasks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelIncrement_descriptor_, &ModelIncrement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DictionaryEntry_descriptor_, &DictionaryEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto() {
  delete Mask::default_instance_;
  delete Mask_reflection_;
  delete DataLoaderCacheEntry::default_instance_;
  delete DataLoaderCacheEntry_reflection_;
  delete StreamMasks::default_instance_;
  delete StreamMasks_reflection_;
  delete ModelIncrement::default_instance_;
  delete ModelIncrement_reflection_;
  delete DictionaryEntry::default_instance_;
  delete DictionaryEntry_reflection_;
}

void protobuf_AddDesc_artm_2fcore_2finternals_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::artm::protobuf_AddDesc_artm_2fmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031artm/core/internals.proto\022\tartm.core\032\023"
    "artm/messages.proto\"\031\n\004Mask\022\021\n\005value\030\001 \003"
    "(\010B\002\020\001\"\317\001\n\024DataLoaderCacheEntry\022\022\n\nmodel"
    "_name\030\001 \001(\t\022\022\n\nbatch_uuid\030\002 \001(\t\022\017\n\007item_"
    "id\030\003 \003(\005\022\037\n\005theta\030\004 \003(\0132\020.artm.FloatArra"
    "y\022\022\n\ntopic_name\030\005 \003(\t\022\020\n\010filename\030\006 \001(\t\022"
    "\022\n\nitem_title\030\007 \003(\t\022#\n\013topic_index\030\010 \003(\013"
    "2\016.artm.IntArray\"H\n\013StreamMasks\022$\n\013strea"
    "m_mask\030\004 \003(\0132\017.artm.core.Mask\022\023\n\013stream_"
    "name\030\005 \003(\t\"7\n\016ModelIncrement\022%\n\013topic_mo"
    "del\030\001 \001(\0132\020.artm.TopicModel\"\275\001\n\017Dictiona"
    "ryEntry\022\021\n\tkey_token\030\001 \001(\t\022\020\n\010class_id\030\002"
    " \001(\t\022\r\n\005value\030\003 \001(\002\022\024\n\014value_tokens\030\004 \003("
    "\t\022 \n\006values\030\005 \001(\0132\020.artm.FloatArray\022\023\n\013t"
    "oken_count\030\006 \001(\005\022\023\n\013items_count\030\007 \001(\005\022\024\n"
    "\014token_weight\030\010 \001(\002", 619);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "artm/core/internals.proto", &protobuf_RegisterTypes);
  Mask::default_instance_ = new Mask();
  DataLoaderCacheEntry::default_instance_ = new DataLoaderCacheEntry();
  StreamMasks::default_instance_ = new StreamMasks();
  ModelIncrement::default_instance_ = new ModelIncrement();
  DictionaryEntry::default_instance_ = new DictionaryEntry();
  Mask::default_instance_->InitAsDefaultInstance();
  DataLoaderCacheEntry::default_instance_->InitAsDefaultInstance();
  StreamMasks::default_instance_->InitAsDefaultInstance();
  ModelIncrement::default_instance_->InitAsDefaultInstance();
  DictionaryEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_artm_2fcore_2finternals_2eproto {
  StaticDescriptorInitializer_artm_2fcore_2finternals_2eproto() {
    protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  }
} static_descriptor_initializer_artm_2fcore_2finternals_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Mask::kValueFieldNumber;
#endif  // !_MSC_VER

Mask::Mask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mask::InitAsDefaultInstance() {
}

Mask::Mask(const Mask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mask::~Mask() {
  SharedDtor();
}

void Mask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mask_descriptor_;
}

const Mask& Mask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

Mask* Mask::default_instance_ = NULL;

Mask* Mask::New() const {
  return new Mask;
}

void Mask::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool value = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mask::ByteSize() const {
  int total_size = 0;

  // repeated bool value = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mask::MergeFrom(const Mask& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mask::CopyFrom(const Mask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mask::IsInitialized() const {

  return true;
}

void Mask::Swap(Mask* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mask_descriptor_;
  metadata.reflection = Mask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataLoaderCacheEntry::kModelNameFieldNumber;
const int DataLoaderCacheEntry::kBatchUuidFieldNumber;
const int DataLoaderCacheEntry::kItemIdFieldNumber;
const int DataLoaderCacheEntry::kThetaFieldNumber;
const int DataLoaderCacheEntry::kTopicNameFieldNumber;
const int DataLoaderCacheEntry::kFilenameFieldNumber;
const int DataLoaderCacheEntry::kItemTitleFieldNumber;
const int DataLoaderCacheEntry::kTopicIndexFieldNumber;
#endif  // !_MSC_VER

DataLoaderCacheEntry::DataLoaderCacheEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataLoaderCacheEntry::InitAsDefaultInstance() {
}

DataLoaderCacheEntry::DataLoaderCacheEntry(const DataLoaderCacheEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataLoaderCacheEntry::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataLoaderCacheEntry::~DataLoaderCacheEntry() {
  SharedDtor();
}

void DataLoaderCacheEntry::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete batch_uuid_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyString()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void DataLoaderCacheEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataLoaderCacheEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataLoaderCacheEntry_descriptor_;
}

const DataLoaderCacheEntry& DataLoaderCacheEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

DataLoaderCacheEntry* DataLoaderCacheEntry::default_instance_ = NULL;

DataLoaderCacheEntry* DataLoaderCacheEntry::New() const {
  return new DataLoaderCacheEntry;
}

void DataLoaderCacheEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
    if (has_batch_uuid()) {
      if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
        batch_uuid_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyString()) {
        filename_->clear();
      }
    }
  }
  item_id_.Clear();
  theta_.Clear();
  topic_name_.Clear();
  item_title_.Clear();
  topic_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataLoaderCacheEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_batch_uuid;
        break;
      }

      // optional string batch_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_uuid().data(), this->batch_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // repeated int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        if (input->ExpectTag(34)) goto parse_theta;
        break;
      }

      // repeated .artm.FloatArray theta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_theta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_theta;
        if (input->ExpectTag(42)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_topic_name;
        if (input->ExpectTag(50)) goto parse_filename;
        break;
      }

      // optional string filename = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item_title;
        break;
      }

      // repeated string item_title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_item_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_title(this->item_title_size() - 1).data(),
            this->item_title(this->item_title_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item_title;
        if (input->ExpectTag(66)) goto parse_topic_index;
        break;
      }

      // repeated .artm.IntArray topic_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topic_index()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_topic_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataLoaderCacheEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_name(), output);
  }

  // optional string batch_uuid = 2;
  if (has_batch_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_uuid().data(), this->batch_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->batch_uuid(), output);
  }

  // repeated int32 item_id = 3;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->item_id(i), output);
  }

  // repeated .artm.FloatArray theta = 4;
  for (int i = 0; i < this->theta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->theta(i), output);
  }

  // repeated string topic_name = 5;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->topic_name(i), output);
  }

  // optional string filename = 6;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filename(), output);
  }

  // repeated string item_title = 7;
  for (int i = 0; i < this->item_title_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->item_title(i).data(), this->item_title(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->item_title(i), output);
  }

  // repeated .artm.IntArray topic_index = 8;
  for (int i = 0; i < this->topic_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->topic_index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataLoaderCacheEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string batch_uuid = 2;
  if (has_batch_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_uuid().data(), this->batch_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->batch_uuid(), target);
  }

  // repeated int32 item_id = 3;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->item_id(i), target);
  }

  // repeated .artm.FloatArray theta = 4;
  for (int i = 0; i < this->theta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->theta(i), target);
  }

  // repeated string topic_name = 5;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->topic_name(i), target);
  }

  // optional string filename = 6;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filename(), target);
  }

  // repeated string item_title = 7;
  for (int i = 0; i < this->item_title_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_title(i).data(), this->item_title(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->item_title(i), target);
  }

  // repeated .artm.IntArray topic_index = 8;
  for (int i = 0; i < this->topic_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->topic_index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataLoaderCacheEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string batch_uuid = 2;
    if (has_batch_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->batch_uuid());
    }

    // optional string filename = 6;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  // repeated int32 item_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated .artm.FloatArray theta = 4;
  total_size += 1 * this->theta_size();
  for (int i = 0; i < this->theta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->theta(i));
  }

  // repeated string topic_name = 5;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string item_title = 7;
  total_size += 1 * this->item_title_size();
  for (int i = 0; i < this->item_title_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->item_title(i));
  }

  // repeated .artm.IntArray topic_index = 8;
  total_size += 1 * this->topic_index_size();
  for (int i = 0; i < this->topic_index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->topic_index(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataLoaderCacheEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataLoaderCacheEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataLoaderCacheEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataLoaderCacheEntry::MergeFrom(const DataLoaderCacheEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  theta_.MergeFrom(from.theta_);
  topic_name_.MergeFrom(from.topic_name_);
  item_title_.MergeFrom(from.item_title_);
  topic_index_.MergeFrom(from.topic_index_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_batch_uuid()) {
      set_batch_uuid(from.batch_uuid());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataLoaderCacheEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataLoaderCacheEntry::CopyFrom(const DataLoaderCacheEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataLoaderCacheEntry::IsInitialized() const {

  return true;
}

void DataLoaderCacheEntry::Swap(DataLoaderCacheEntry* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(batch_uuid_, other->batch_uuid_);
    item_id_.Swap(&other->item_id_);
    theta_.Swap(&other->theta_);
    topic_name_.Swap(&other->topic_name_);
    std::swap(filename_, other->filename_);
    item_title_.Swap(&other->item_title_);
    topic_index_.Swap(&other->topic_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataLoaderCacheEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataLoaderCacheEntry_descriptor_;
  metadata.reflection = DataLoaderCacheEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamMasks::kStreamMaskFieldNumber;
const int StreamMasks::kStreamNameFieldNumber;
#endif  // !_MSC_VER

StreamMasks::StreamMasks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamMasks::InitAsDefaultInstance() {
}

StreamMasks::StreamMasks(const StreamMasks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamMasks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamMasks::~StreamMasks() {
  SharedDtor();
}

void StreamMasks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamMasks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMasks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMasks_descriptor_;
}

const StreamMasks& StreamMasks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

StreamMasks* StreamMasks::default_instance_ = NULL;

StreamMasks* StreamMasks::New() const {
  return new StreamMasks;
}

void StreamMasks::Clear() {
  stream_mask_.Clear();
  stream_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamMasks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.core.Mask stream_mask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stream_mask;
        if (input->ExpectTag(42)) goto parse_stream_name;
        break;
      }

      // repeated string stream_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stream_name(this->stream_name_size() - 1).data(),
            this->stream_name(this->stream_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stream_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamMasks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .artm.core.Mask stream_mask = 4;
  for (int i = 0; i < this->stream_mask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stream_mask(i), output);
  }

  // repeated string stream_name = 5;
  for (int i = 0; i < this->stream_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stream_name(i).data(), this->stream_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stream_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamMasks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .artm.core.Mask stream_mask = 4;
  for (int i = 0; i < this->stream_mask_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stream_mask(i), target);
  }

  // repeated string stream_name = 5;
  for (int i = 0; i < this->stream_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stream_name(i).data(), this->stream_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->stream_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamMasks::ByteSize() const {
  int total_size = 0;

  // repeated .artm.core.Mask stream_mask = 4;
  total_size += 1 * this->stream_mask_size();
  for (int i = 0; i < this->stream_mask_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream_mask(i));
  }

  // repeated string stream_name = 5;
  total_size += 1 * this->stream_name_size();
  for (int i = 0; i < this->stream_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stream_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamMasks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamMasks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamMasks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamMasks::MergeFrom(const StreamMasks& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_mask_.MergeFrom(from.stream_mask_);
  stream_name_.MergeFrom(from.stream_name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamMasks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMasks::CopyFrom(const StreamMasks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMasks::IsInitialized() const {

  return true;
}

void StreamMasks::Swap(StreamMasks* other) {
  if (other != this) {
    stream_mask_.Swap(&other->stream_mask_);
    stream_name_.Swap(&other->stream_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamMasks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamMasks_descriptor_;
  metadata.reflection = StreamMasks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelIncrement::kTopicModelFieldNumber;
#endif  // !_MSC_VER

ModelIncrement::ModelIncrement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelIncrement::InitAsDefaultInstance() {
  topic_model_ = const_cast< ::artm::TopicModel*>(&::artm::TopicModel::default_instance());
}

ModelIncrement::ModelIncrement(const ModelIncrement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelIncrement::SharedCtor() {
  _cached_size_ = 0;
  topic_model_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelIncrement::~ModelIncrement() {
  SharedDtor();
}

void ModelIncrement::SharedDtor() {
  if (this != default_instance_) {
    delete topic_model_;
  }
}

void ModelIncrement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelIncrement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelIncrement_descriptor_;
}

const ModelIncrement& ModelIncrement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

ModelIncrement* ModelIncrement::default_instance_ = NULL;

ModelIncrement* ModelIncrement::New() const {
  return new ModelIncrement;
}

void ModelIncrement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_topic_model()) {
      if (topic_model_ != NULL) topic_model_->::artm::TopicModel::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelIncrement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.TopicModel topic_model = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelIncrement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .artm.TopicModel topic_model = 1;
  if (has_topic_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->topic_model(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelIncrement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .artm.TopicModel topic_model = 1;
  if (has_topic_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->topic_model(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelIncrement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .artm.TopicModel topic_model = 1;
    if (has_topic_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topic_model());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelIncrement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelIncrement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelIncrement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelIncrement::MergeFrom(const ModelIncrement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic_model()) {
      mutable_topic_model()->::artm::TopicModel::MergeFrom(from.topic_model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelIncrement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelIncrement::CopyFrom(const ModelIncrement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelIncrement::IsInitialized() const {

  return true;
}

void ModelIncrement::Swap(ModelIncrement* other) {
  if (other != this) {
    std::swap(topic_model_, other->topic_model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelIncrement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelIncrement_descriptor_;
  metadata.reflection = ModelIncrement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DictionaryEntry::kKeyTokenFieldNumber;
const int DictionaryEntry::kClassIdFieldNumber;
const int DictionaryEntry::kValueFieldNumber;
const int DictionaryEntry::kValueTokensFieldNumber;
const int DictionaryEntry::kValuesFieldNumber;
const int DictionaryEntry::kTokenCountFieldNumber;
const int DictionaryEntry::kItemsCountFieldNumber;
const int DictionaryEntry::kTokenWeightFieldNumber;
#endif  // !_MSC_VER

DictionaryEntry::DictionaryEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DictionaryEntry::InitAsDefaultInstance() {
  values_ = const_cast< ::artm::FloatArray*>(&::artm::FloatArray::default_instance());
}

DictionaryEntry::DictionaryEntry(const DictionaryEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DictionaryEntry::SharedCtor() {
  _cached_size_ = 0;
  key_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = 0;
  values_ = NULL;
  token_count_ = 0;
  items_count_ = 0;
  token_weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DictionaryEntry::~DictionaryEntry() {
  SharedDtor();
}

void DictionaryEntry::SharedDtor() {
  if (key_token_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_token_;
  }
  if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete class_id_;
  }
  if (this != default_instance_) {
    delete values_;
  }
}

void DictionaryEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DictionaryEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DictionaryEntry_descriptor_;
}

const DictionaryEntry& DictionaryEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  return *default_instance_;
}

DictionaryEntry* DictionaryEntry::default_instance_ = NULL;

DictionaryEntry* DictionaryEntry::New() const {
  return new DictionaryEntry;
}

void DictionaryEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key_token()) {
      if (key_token_ != &::google::protobuf::internal::GetEmptyString()) {
        key_token_->clear();
      }
    }
    if (has_class_id()) {
      if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
        class_id_->clear();
      }
    }
    value_ = 0;
    if (has_values()) {
      if (values_ != NULL) values_->::artm::FloatArray::Clear();
    }
    token_count_ = 0;
    items_count_ = 0;
    token_weight_ = 0;
  }
  value_tokens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DictionaryEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_token().data(), this->key_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // optional string class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_value;
        break;
      }

      // optional float value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value_tokens;
        break;
      }

      // repeated string value_tokens = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value_tokens()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value_tokens(this->value_tokens_size() - 1).data(),
            this->value_tokens(this->value_tokens_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value_tokens;
        if (input->ExpectTag(42)) goto parse_values;
        break;
      }

      // optional .artm.FloatArray values = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_token_count;
        break;
      }

      // optional int32 token_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_count_)));
          set_has_token_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_items_count;
        break;
      }

      // optional int32 items_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_items_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &items_count_)));
          set_has_items_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_token_weight;
        break;
      }

      // optional float token_weight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_token_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &token_weight_)));
          set_has_token_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DictionaryEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key_token = 1;
  if (has_key_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_token().data(), this->key_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key_token(), output);
  }

  // optional string class_id = 2;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(), output);
  }

  // optional float value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }

  // repeated string value_tokens = 4;
  for (int i = 0; i < this->value_tokens_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->value_tokens(i).data(), this->value_tokens(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value_tokens(i), output);
  }

  // optional .artm.FloatArray values = 5;
  if (has_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->values(), output);
  }

  // optional int32 token_count = 6;
  if (has_token_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->token_count(), output);
  }

  // optional int32 items_count = 7;
  if (has_items_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->items_count(), output);
  }

  // optional float token_weight = 8;
  if (has_token_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->token_weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DictionaryEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key_token = 1;
  if (has_key_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_token().data(), this->key_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_token(), target);
  }

  // optional string class_id = 2;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_id(), target);
  }

  // optional float value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }

  // repeated string value_tokens = 4;
  for (int i = 0; i < this->value_tokens_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value_tokens(i).data(), this->value_tokens(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->value_tokens(i), target);
  }

  // optional .artm.FloatArray values = 5;
  if (has_values()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->values(), target);
  }

  // optional int32 token_count = 6;
  if (has_token_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->token_count(), target);
  }

  // optional int32 items_count = 7;
  if (has_items_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->items_count(), target);
  }

  // optional float token_weight = 8;
  if (has_token_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->token_weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DictionaryEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key_token = 1;
    if (has_key_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_token());
    }

    // optional string class_id = 2;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

    // optional float value = 3;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional .artm.FloatArray values = 5;
    if (has_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values());
    }

    // optional int32 token_count = 6;
    if (has_token_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token_count());
    }

    // optional int32 items_count = 7;
    if (has_items_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->items_count());
    }

    // optional float token_weight = 8;
    if (has_token_weight()) {
      total_size += 1 + 4;
    }

  }
  // repeated string value_tokens = 4;
  total_size += 1 * this->value_tokens_size();
  for (int i = 0; i < this->value_tokens_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value_tokens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionaryEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DictionaryEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DictionaryEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DictionaryEntry::MergeFrom(const DictionaryEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_tokens_.MergeFrom(from.value_tokens_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_token()) {
      set_key_token(from.key_token());
    }
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_values()) {
      mutable_values()->::artm::FloatArray::MergeFrom(from.values());
    }
    if (from.has_token_count()) {
      set_token_count(from.token_count());
    }
    if (from.has_items_count()) {
      set_items_count(from.items_count());
    }
    if (from.has_token_weight()) {
      set_token_weight(from.token_weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DictionaryEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictionaryEntry::CopyFrom(const DictionaryEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryEntry::IsInitialized() const {

  return true;
}

void DictionaryEntry::Swap(DictionaryEntry* other) {
  if (other != this) {
    std::swap(key_token_, other->key_token_);
    std::swap(class_id_, other->class_id_);
    std::swap(value_, other->value_);
    value_tokens_.Swap(&other->value_tokens_);
    std::swap(values_, other->values_);
    std::swap(token_count_, other->token_count_);
    std::swap(items_count_, other->items_count_);
    std::swap(token_weight_, other->token_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DictionaryEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DictionaryEntry_descriptor_;
  metadata.reflection = DictionaryEntry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace artm

// @@protoc_insertion_point(global_scope)
