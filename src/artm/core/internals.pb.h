// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artm/core/internals.proto

#ifndef PROTOBUF_artm_2fcore_2finternals_2eproto__INCLUDED
#define PROTOBUF_artm_2fcore_2finternals_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "artm/messages.pb.h"
// @@protoc_insertion_point(includes)

namespace artm {
namespace core {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

class Mask;
class DataLoaderCacheEntry;
class StreamMasks;
class ModelIncrement;
class DictionaryEntry;

// ===================================================================

class Mask : public ::google::protobuf::Message {
 public:
  Mask();
  virtual ~Mask();

  Mask(const Mask& from);

  inline Mask& operator=(const Mask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mask& default_instance();

  void Swap(Mask* other);

  // implements Message ----------------------------------------------

  Mask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mask& from);
  void MergeFrom(const Mask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool value = 1 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline bool value(int index) const;
  inline void set_value(int index, bool value);
  inline void add_value(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      value() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.core.Mask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static Mask* default_instance_;
};
// -------------------------------------------------------------------

class DataLoaderCacheEntry : public ::google::protobuf::Message {
 public:
  DataLoaderCacheEntry();
  virtual ~DataLoaderCacheEntry();

  DataLoaderCacheEntry(const DataLoaderCacheEntry& from);

  inline DataLoaderCacheEntry& operator=(const DataLoaderCacheEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataLoaderCacheEntry& default_instance();

  void Swap(DataLoaderCacheEntry* other);

  // implements Message ----------------------------------------------

  DataLoaderCacheEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataLoaderCacheEntry& from);
  void MergeFrom(const DataLoaderCacheEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional string batch_uuid = 2;
  inline bool has_batch_uuid() const;
  inline void clear_batch_uuid();
  static const int kBatchUuidFieldNumber = 2;
  inline const ::std::string& batch_uuid() const;
  inline void set_batch_uuid(const ::std::string& value);
  inline void set_batch_uuid(const char* value);
  inline void set_batch_uuid(const char* value, size_t size);
  inline ::std::string* mutable_batch_uuid();
  inline ::std::string* release_batch_uuid();
  inline void set_allocated_batch_uuid(::std::string* batch_uuid);

  // repeated int32 item_id = 3;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated .artm.FloatArray theta = 4;
  inline int theta_size() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 4;
  inline const ::artm::FloatArray& theta(int index) const;
  inline ::artm::FloatArray* mutable_theta(int index);
  inline ::artm::FloatArray* add_theta();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      theta() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_theta();

  // repeated string topic_name = 5;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 5;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional string filename = 6;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 6;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // repeated string item_title = 7;
  inline int item_title_size() const;
  inline void clear_item_title();
  static const int kItemTitleFieldNumber = 7;
  inline const ::std::string& item_title(int index) const;
  inline ::std::string* mutable_item_title(int index);
  inline void set_item_title(int index, const ::std::string& value);
  inline void set_item_title(int index, const char* value);
  inline void set_item_title(int index, const char* value, size_t size);
  inline ::std::string* add_item_title();
  inline void add_item_title(const ::std::string& value);
  inline void add_item_title(const char* value);
  inline void add_item_title(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& item_title() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_item_title();

  // repeated .artm.IntArray topic_index = 8;
  inline int topic_index_size() const;
  inline void clear_topic_index();
  static const int kTopicIndexFieldNumber = 8;
  inline const ::artm::IntArray& topic_index(int index) const;
  inline ::artm::IntArray* mutable_topic_index(int index);
  inline ::artm::IntArray* add_topic_index();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
      topic_index() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
      mutable_topic_index();

  // @@protoc_insertion_point(class_scope:artm.core.DataLoaderCacheEntry)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_batch_uuid();
  inline void clear_has_batch_uuid();
  inline void set_has_filename();
  inline void clear_has_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;
  ::std::string* batch_uuid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > theta_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::std::string* filename_;
  ::google::protobuf::RepeatedPtrField< ::std::string> item_title_;
  ::google::protobuf::RepeatedPtrField< ::artm::IntArray > topic_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static DataLoaderCacheEntry* default_instance_;
};
// -------------------------------------------------------------------

class StreamMasks : public ::google::protobuf::Message {
 public:
  StreamMasks();
  virtual ~StreamMasks();

  StreamMasks(const StreamMasks& from);

  inline StreamMasks& operator=(const StreamMasks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamMasks& default_instance();

  void Swap(StreamMasks* other);

  // implements Message ----------------------------------------------

  StreamMasks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamMasks& from);
  void MergeFrom(const StreamMasks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .artm.core.Mask stream_mask = 4;
  inline int stream_mask_size() const;
  inline void clear_stream_mask();
  static const int kStreamMaskFieldNumber = 4;
  inline const ::artm::core::Mask& stream_mask(int index) const;
  inline ::artm::core::Mask* mutable_stream_mask(int index);
  inline ::artm::core::Mask* add_stream_mask();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >&
      stream_mask() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >*
      mutable_stream_mask();

  // repeated string stream_name = 5;
  inline int stream_name_size() const;
  inline void clear_stream_name();
  static const int kStreamNameFieldNumber = 5;
  inline const ::std::string& stream_name(int index) const;
  inline ::std::string* mutable_stream_name(int index);
  inline void set_stream_name(int index, const ::std::string& value);
  inline void set_stream_name(int index, const char* value);
  inline void set_stream_name(int index, const char* value, size_t size);
  inline ::std::string* add_stream_name();
  inline void add_stream_name(const ::std::string& value);
  inline void add_stream_name(const char* value);
  inline void add_stream_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stream_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stream_name();

  // @@protoc_insertion_point(class_scope:artm.core.StreamMasks)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::artm::core::Mask > stream_mask_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stream_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static StreamMasks* default_instance_;
};
// -------------------------------------------------------------------

class ModelIncrement : public ::google::protobuf::Message {
 public:
  ModelIncrement();
  virtual ~ModelIncrement();

  ModelIncrement(const ModelIncrement& from);

  inline ModelIncrement& operator=(const ModelIncrement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelIncrement& default_instance();

  void Swap(ModelIncrement* other);

  // implements Message ----------------------------------------------

  ModelIncrement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelIncrement& from);
  void MergeFrom(const ModelIncrement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .artm.TopicModel topic_model = 1;
  inline bool has_topic_model() const;
  inline void clear_topic_model();
  static const int kTopicModelFieldNumber = 1;
  inline const ::artm::TopicModel& topic_model() const;
  inline ::artm::TopicModel* mutable_topic_model();
  inline ::artm::TopicModel* release_topic_model();
  inline void set_allocated_topic_model(::artm::TopicModel* topic_model);

  // @@protoc_insertion_point(class_scope:artm.core.ModelIncrement)
 private:
  inline void set_has_topic_model();
  inline void clear_has_topic_model();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::artm::TopicModel* topic_model_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static ModelIncrement* default_instance_;
};
// -------------------------------------------------------------------

class DictionaryEntry : public ::google::protobuf::Message {
 public:
  DictionaryEntry();
  virtual ~DictionaryEntry();

  DictionaryEntry(const DictionaryEntry& from);

  inline DictionaryEntry& operator=(const DictionaryEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictionaryEntry& default_instance();

  void Swap(DictionaryEntry* other);

  // implements Message ----------------------------------------------

  DictionaryEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictionaryEntry& from);
  void MergeFrom(const DictionaryEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key_token = 1;
  inline bool has_key_token() const;
  inline void clear_key_token();
  static const int kKeyTokenFieldNumber = 1;
  inline const ::std::string& key_token() const;
  inline void set_key_token(const ::std::string& value);
  inline void set_key_token(const char* value);
  inline void set_key_token(const char* value, size_t size);
  inline ::std::string* mutable_key_token();
  inline ::std::string* release_key_token();
  inline void set_allocated_key_token(::std::string* key_token);

  // optional string class_id = 2;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id() const;
  inline void set_class_id(const ::std::string& value);
  inline void set_class_id(const char* value);
  inline void set_class_id(const char* value, size_t size);
  inline ::std::string* mutable_class_id();
  inline ::std::string* release_class_id();
  inline void set_allocated_class_id(::std::string* class_id);

  // optional float value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline float value() const;
  inline void set_value(float value);

  // repeated string value_tokens = 4;
  inline int value_tokens_size() const;
  inline void clear_value_tokens();
  static const int kValueTokensFieldNumber = 4;
  inline const ::std::string& value_tokens(int index) const;
  inline ::std::string* mutable_value_tokens(int index);
  inline void set_value_tokens(int index, const ::std::string& value);
  inline void set_value_tokens(int index, const char* value);
  inline void set_value_tokens(int index, const char* value, size_t size);
  inline ::std::string* add_value_tokens();
  inline void add_value_tokens(const ::std::string& value);
  inline void add_value_tokens(const char* value);
  inline void add_value_tokens(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value_tokens() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value_tokens();

  // optional .artm.FloatArray values = 5;
  inline bool has_values() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 5;
  inline const ::artm::FloatArray& values() const;
  inline ::artm::FloatArray* mutable_values();
  inline ::artm::FloatArray* release_values();
  inline void set_allocated_values(::artm::FloatArray* values);

  // optional int32 token_count = 6;
  inline bool has_token_count() const;
  inline void clear_token_count();
  static const int kTokenCountFieldNumber = 6;
  inline ::google::protobuf::int32 token_count() const;
  inline void set_token_count(::google::protobuf::int32 value);

  // optional int32 items_count = 7;
  inline bool has_items_count() const;
  inline void clear_items_count();
  static const int kItemsCountFieldNumber = 7;
  inline ::google::protobuf::int32 items_count() const;
  inline void set_items_count(::google::protobuf::int32 value);

  // optional float token_weight = 8;
  inline bool has_token_weight() const;
  inline void clear_token_weight();
  static const int kTokenWeightFieldNumber = 8;
  inline float token_weight() const;
  inline void set_token_weight(float value);

  // @@protoc_insertion_point(class_scope:artm.core.DictionaryEntry)
 private:
  inline void set_has_key_token();
  inline void clear_has_key_token();
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_values();
  inline void clear_has_values();
  inline void set_has_token_count();
  inline void clear_has_token_count();
  inline void set_has_items_count();
  inline void clear_has_items_count();
  inline void set_has_token_weight();
  inline void clear_has_token_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_token_;
  ::std::string* class_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> value_tokens_;
  float value_;
  ::google::protobuf::int32 token_count_;
  ::artm::FloatArray* values_;
  ::google::protobuf::int32 items_count_;
  float token_weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static DictionaryEntry* default_instance_;
};
// ===================================================================


// ===================================================================

// Mask

// repeated bool value = 1 [packed = true];
inline int Mask::value_size() const {
  return value_.size();
}
inline void Mask::clear_value() {
  value_.Clear();
}
inline bool Mask::value(int index) const {
  return value_.Get(index);
}
inline void Mask::set_value(int index, bool value) {
  value_.Set(index, value);
}
inline void Mask::add_value(bool value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
Mask::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< bool >*
Mask::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// DataLoaderCacheEntry

// optional string model_name = 1;
inline bool DataLoaderCacheEntry::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataLoaderCacheEntry::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataLoaderCacheEntry::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataLoaderCacheEntry::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& DataLoaderCacheEntry::model_name() const {
  return *model_name_;
}
inline void DataLoaderCacheEntry::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void DataLoaderCacheEntry::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void DataLoaderCacheEntry::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderCacheEntry::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* DataLoaderCacheEntry::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataLoaderCacheEntry::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string batch_uuid = 2;
inline bool DataLoaderCacheEntry::has_batch_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataLoaderCacheEntry::set_has_batch_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataLoaderCacheEntry::clear_has_batch_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataLoaderCacheEntry::clear_batch_uuid() {
  if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_->clear();
  }
  clear_has_batch_uuid();
}
inline const ::std::string& DataLoaderCacheEntry::batch_uuid() const {
  return *batch_uuid_;
}
inline void DataLoaderCacheEntry::set_batch_uuid(const ::std::string& value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void DataLoaderCacheEntry::set_batch_uuid(const char* value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void DataLoaderCacheEntry::set_batch_uuid(const char* value, size_t size) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderCacheEntry::mutable_batch_uuid() {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  return batch_uuid_;
}
inline ::std::string* DataLoaderCacheEntry::release_batch_uuid() {
  clear_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = batch_uuid_;
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataLoaderCacheEntry::set_allocated_batch_uuid(::std::string* batch_uuid) {
  if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete batch_uuid_;
  }
  if (batch_uuid) {
    set_has_batch_uuid();
    batch_uuid_ = batch_uuid;
  } else {
    clear_has_batch_uuid();
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated int32 item_id = 3;
inline int DataLoaderCacheEntry::item_id_size() const {
  return item_id_.size();
}
inline void DataLoaderCacheEntry::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 DataLoaderCacheEntry::item_id(int index) const {
  return item_id_.Get(index);
}
inline void DataLoaderCacheEntry::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void DataLoaderCacheEntry::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DataLoaderCacheEntry::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DataLoaderCacheEntry::mutable_item_id() {
  return &item_id_;
}

// repeated .artm.FloatArray theta = 4;
inline int DataLoaderCacheEntry::theta_size() const {
  return theta_.size();
}
inline void DataLoaderCacheEntry::clear_theta() {
  theta_.Clear();
}
inline const ::artm::FloatArray& DataLoaderCacheEntry::theta(int index) const {
  return theta_.Get(index);
}
inline ::artm::FloatArray* DataLoaderCacheEntry::mutable_theta(int index) {
  return theta_.Mutable(index);
}
inline ::artm::FloatArray* DataLoaderCacheEntry::add_theta() {
  return theta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
DataLoaderCacheEntry::theta() const {
  return theta_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
DataLoaderCacheEntry::mutable_theta() {
  return &theta_;
}

// repeated string topic_name = 5;
inline int DataLoaderCacheEntry::topic_name_size() const {
  return topic_name_.size();
}
inline void DataLoaderCacheEntry::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& DataLoaderCacheEntry::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* DataLoaderCacheEntry::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void DataLoaderCacheEntry::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void DataLoaderCacheEntry::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void DataLoaderCacheEntry::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderCacheEntry::add_topic_name() {
  return topic_name_.Add();
}
inline void DataLoaderCacheEntry::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void DataLoaderCacheEntry::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void DataLoaderCacheEntry::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataLoaderCacheEntry::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataLoaderCacheEntry::mutable_topic_name() {
  return &topic_name_;
}

// optional string filename = 6;
inline bool DataLoaderCacheEntry::has_filename() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataLoaderCacheEntry::set_has_filename() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataLoaderCacheEntry::clear_has_filename() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataLoaderCacheEntry::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyString()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& DataLoaderCacheEntry::filename() const {
  return *filename_;
}
inline void DataLoaderCacheEntry::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyString()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void DataLoaderCacheEntry::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyString()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void DataLoaderCacheEntry::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyString()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderCacheEntry::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyString()) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* DataLoaderCacheEntry::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataLoaderCacheEntry::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyString()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated string item_title = 7;
inline int DataLoaderCacheEntry::item_title_size() const {
  return item_title_.size();
}
inline void DataLoaderCacheEntry::clear_item_title() {
  item_title_.Clear();
}
inline const ::std::string& DataLoaderCacheEntry::item_title(int index) const {
  return item_title_.Get(index);
}
inline ::std::string* DataLoaderCacheEntry::mutable_item_title(int index) {
  return item_title_.Mutable(index);
}
inline void DataLoaderCacheEntry::set_item_title(int index, const ::std::string& value) {
  item_title_.Mutable(index)->assign(value);
}
inline void DataLoaderCacheEntry::set_item_title(int index, const char* value) {
  item_title_.Mutable(index)->assign(value);
}
inline void DataLoaderCacheEntry::set_item_title(int index, const char* value, size_t size) {
  item_title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderCacheEntry::add_item_title() {
  return item_title_.Add();
}
inline void DataLoaderCacheEntry::add_item_title(const ::std::string& value) {
  item_title_.Add()->assign(value);
}
inline void DataLoaderCacheEntry::add_item_title(const char* value) {
  item_title_.Add()->assign(value);
}
inline void DataLoaderCacheEntry::add_item_title(const char* value, size_t size) {
  item_title_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataLoaderCacheEntry::item_title() const {
  return item_title_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataLoaderCacheEntry::mutable_item_title() {
  return &item_title_;
}

// repeated .artm.IntArray topic_index = 8;
inline int DataLoaderCacheEntry::topic_index_size() const {
  return topic_index_.size();
}
inline void DataLoaderCacheEntry::clear_topic_index() {
  topic_index_.Clear();
}
inline const ::artm::IntArray& DataLoaderCacheEntry::topic_index(int index) const {
  return topic_index_.Get(index);
}
inline ::artm::IntArray* DataLoaderCacheEntry::mutable_topic_index(int index) {
  return topic_index_.Mutable(index);
}
inline ::artm::IntArray* DataLoaderCacheEntry::add_topic_index() {
  return topic_index_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
DataLoaderCacheEntry::topic_index() const {
  return topic_index_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
DataLoaderCacheEntry::mutable_topic_index() {
  return &topic_index_;
}

// -------------------------------------------------------------------

// StreamMasks

// repeated .artm.core.Mask stream_mask = 4;
inline int StreamMasks::stream_mask_size() const {
  return stream_mask_.size();
}
inline void StreamMasks::clear_stream_mask() {
  stream_mask_.Clear();
}
inline const ::artm::core::Mask& StreamMasks::stream_mask(int index) const {
  return stream_mask_.Get(index);
}
inline ::artm::core::Mask* StreamMasks::mutable_stream_mask(int index) {
  return stream_mask_.Mutable(index);
}
inline ::artm::core::Mask* StreamMasks::add_stream_mask() {
  return stream_mask_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >&
StreamMasks::stream_mask() const {
  return stream_mask_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >*
StreamMasks::mutable_stream_mask() {
  return &stream_mask_;
}

// repeated string stream_name = 5;
inline int StreamMasks::stream_name_size() const {
  return stream_name_.size();
}
inline void StreamMasks::clear_stream_name() {
  stream_name_.Clear();
}
inline const ::std::string& StreamMasks::stream_name(int index) const {
  return stream_name_.Get(index);
}
inline ::std::string* StreamMasks::mutable_stream_name(int index) {
  return stream_name_.Mutable(index);
}
inline void StreamMasks::set_stream_name(int index, const ::std::string& value) {
  stream_name_.Mutable(index)->assign(value);
}
inline void StreamMasks::set_stream_name(int index, const char* value) {
  stream_name_.Mutable(index)->assign(value);
}
inline void StreamMasks::set_stream_name(int index, const char* value, size_t size) {
  stream_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StreamMasks::add_stream_name() {
  return stream_name_.Add();
}
inline void StreamMasks::add_stream_name(const ::std::string& value) {
  stream_name_.Add()->assign(value);
}
inline void StreamMasks::add_stream_name(const char* value) {
  stream_name_.Add()->assign(value);
}
inline void StreamMasks::add_stream_name(const char* value, size_t size) {
  stream_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StreamMasks::stream_name() const {
  return stream_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StreamMasks::mutable_stream_name() {
  return &stream_name_;
}

// -------------------------------------------------------------------

// ModelIncrement

// optional .artm.TopicModel topic_model = 1;
inline bool ModelIncrement::has_topic_model() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelIncrement::set_has_topic_model() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelIncrement::clear_has_topic_model() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelIncrement::clear_topic_model() {
  if (topic_model_ != NULL) topic_model_->::artm::TopicModel::Clear();
  clear_has_topic_model();
}
inline const ::artm::TopicModel& ModelIncrement::topic_model() const {
  return topic_model_ != NULL ? *topic_model_ : *default_instance_->topic_model_;
}
inline ::artm::TopicModel* ModelIncrement::mutable_topic_model() {
  set_has_topic_model();
  if (topic_model_ == NULL) topic_model_ = new ::artm::TopicModel;
  return topic_model_;
}
inline ::artm::TopicModel* ModelIncrement::release_topic_model() {
  clear_has_topic_model();
  ::artm::TopicModel* temp = topic_model_;
  topic_model_ = NULL;
  return temp;
}
inline void ModelIncrement::set_allocated_topic_model(::artm::TopicModel* topic_model) {
  delete topic_model_;
  topic_model_ = topic_model;
  if (topic_model) {
    set_has_topic_model();
  } else {
    clear_has_topic_model();
  }
}

// -------------------------------------------------------------------

// DictionaryEntry

// optional string key_token = 1;
inline bool DictionaryEntry::has_key_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DictionaryEntry::set_has_key_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DictionaryEntry::clear_has_key_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DictionaryEntry::clear_key_token() {
  if (key_token_ != &::google::protobuf::internal::GetEmptyString()) {
    key_token_->clear();
  }
  clear_has_key_token();
}
inline const ::std::string& DictionaryEntry::key_token() const {
  return *key_token_;
}
inline void DictionaryEntry::set_key_token(const ::std::string& value) {
  set_has_key_token();
  if (key_token_ == &::google::protobuf::internal::GetEmptyString()) {
    key_token_ = new ::std::string;
  }
  key_token_->assign(value);
}
inline void DictionaryEntry::set_key_token(const char* value) {
  set_has_key_token();
  if (key_token_ == &::google::protobuf::internal::GetEmptyString()) {
    key_token_ = new ::std::string;
  }
  key_token_->assign(value);
}
inline void DictionaryEntry::set_key_token(const char* value, size_t size) {
  set_has_key_token();
  if (key_token_ == &::google::protobuf::internal::GetEmptyString()) {
    key_token_ = new ::std::string;
  }
  key_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DictionaryEntry::mutable_key_token() {
  set_has_key_token();
  if (key_token_ == &::google::protobuf::internal::GetEmptyString()) {
    key_token_ = new ::std::string;
  }
  return key_token_;
}
inline ::std::string* DictionaryEntry::release_key_token() {
  clear_has_key_token();
  if (key_token_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = key_token_;
    key_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DictionaryEntry::set_allocated_key_token(::std::string* key_token) {
  if (key_token_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_token_;
  }
  if (key_token) {
    set_has_key_token();
    key_token_ = key_token;
  } else {
    clear_has_key_token();
    key_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string class_id = 2;
inline bool DictionaryEntry::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DictionaryEntry::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DictionaryEntry::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DictionaryEntry::clear_class_id() {
  if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    class_id_->clear();
  }
  clear_has_class_id();
}
inline const ::std::string& DictionaryEntry::class_id() const {
  return *class_id_;
}
inline void DictionaryEntry::set_class_id(const ::std::string& value) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void DictionaryEntry::set_class_id(const char* value) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void DictionaryEntry::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DictionaryEntry::mutable_class_id() {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  return class_id_;
}
inline ::std::string* DictionaryEntry::release_class_id() {
  clear_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = class_id_;
    class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DictionaryEntry::set_allocated_class_id(::std::string* class_id) {
  if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete class_id_;
  }
  if (class_id) {
    set_has_class_id();
    class_id_ = class_id;
  } else {
    clear_has_class_id();
    class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional float value = 3;
inline bool DictionaryEntry::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DictionaryEntry::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DictionaryEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DictionaryEntry::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float DictionaryEntry::value() const {
  return value_;
}
inline void DictionaryEntry::set_value(float value) {
  set_has_value();
  value_ = value;
}

// repeated string value_tokens = 4;
inline int DictionaryEntry::value_tokens_size() const {
  return value_tokens_.size();
}
inline void DictionaryEntry::clear_value_tokens() {
  value_tokens_.Clear();
}
inline const ::std::string& DictionaryEntry::value_tokens(int index) const {
  return value_tokens_.Get(index);
}
inline ::std::string* DictionaryEntry::mutable_value_tokens(int index) {
  return value_tokens_.Mutable(index);
}
inline void DictionaryEntry::set_value_tokens(int index, const ::std::string& value) {
  value_tokens_.Mutable(index)->assign(value);
}
inline void DictionaryEntry::set_value_tokens(int index, const char* value) {
  value_tokens_.Mutable(index)->assign(value);
}
inline void DictionaryEntry::set_value_tokens(int index, const char* value, size_t size) {
  value_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DictionaryEntry::add_value_tokens() {
  return value_tokens_.Add();
}
inline void DictionaryEntry::add_value_tokens(const ::std::string& value) {
  value_tokens_.Add()->assign(value);
}
inline void DictionaryEntry::add_value_tokens(const char* value) {
  value_tokens_.Add()->assign(value);
}
inline void DictionaryEntry::add_value_tokens(const char* value, size_t size) {
  value_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DictionaryEntry::value_tokens() const {
  return value_tokens_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DictionaryEntry::mutable_value_tokens() {
  return &value_tokens_;
}

// optional .artm.FloatArray values = 5;
inline bool DictionaryEntry::has_values() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DictionaryEntry::set_has_values() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DictionaryEntry::clear_has_values() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DictionaryEntry::clear_values() {
  if (values_ != NULL) values_->::artm::FloatArray::Clear();
  clear_has_values();
}
inline const ::artm::FloatArray& DictionaryEntry::values() const {
  return values_ != NULL ? *values_ : *default_instance_->values_;
}
inline ::artm::FloatArray* DictionaryEntry::mutable_values() {
  set_has_values();
  if (values_ == NULL) values_ = new ::artm::FloatArray;
  return values_;
}
inline ::artm::FloatArray* DictionaryEntry::release_values() {
  clear_has_values();
  ::artm::FloatArray* temp = values_;
  values_ = NULL;
  return temp;
}
inline void DictionaryEntry::set_allocated_values(::artm::FloatArray* values) {
  delete values_;
  values_ = values;
  if (values) {
    set_has_values();
  } else {
    clear_has_values();
  }
}

// optional int32 token_count = 6;
inline bool DictionaryEntry::has_token_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DictionaryEntry::set_has_token_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DictionaryEntry::clear_has_token_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DictionaryEntry::clear_token_count() {
  token_count_ = 0;
  clear_has_token_count();
}
inline ::google::protobuf::int32 DictionaryEntry::token_count() const {
  return token_count_;
}
inline void DictionaryEntry::set_token_count(::google::protobuf::int32 value) {
  set_has_token_count();
  token_count_ = value;
}

// optional int32 items_count = 7;
inline bool DictionaryEntry::has_items_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DictionaryEntry::set_has_items_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DictionaryEntry::clear_has_items_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DictionaryEntry::clear_items_count() {
  items_count_ = 0;
  clear_has_items_count();
}
inline ::google::protobuf::int32 DictionaryEntry::items_count() const {
  return items_count_;
}
inline void DictionaryEntry::set_items_count(::google::protobuf::int32 value) {
  set_has_items_count();
  items_count_ = value;
}

// optional float token_weight = 8;
inline bool DictionaryEntry::has_token_weight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DictionaryEntry::set_has_token_weight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DictionaryEntry::clear_has_token_weight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DictionaryEntry::clear_token_weight() {
  token_weight_ = 0;
  clear_has_token_weight();
}
inline float DictionaryEntry::token_weight() const {
  return token_weight_;
}
inline void DictionaryEntry::set_token_weight(float value) {
  set_has_token_weight();
  token_weight_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace artm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_artm_2fcore_2finternals_2eproto__INCLUDED
