// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artm/core/internals.proto

#ifndef PROTOBUF_artm_2fcore_2finternals_2eproto__INCLUDED
#define PROTOBUF_artm_2fcore_2finternals_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "artm/messages.pb.h"
// @@protoc_insertion_point(includes)

namespace artm {
namespace core {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

class Mask;
class Bool;
class Int;
class String;
class Void;
class DataLoaderCacheEntry;
class ProcessorInput;
class ModelIncrement;
class BatchIds;
class CreateOrReconfigureModelArgs;
class DisposeModelArgs;
class CreateOrReconfigureRegularizerArgs;
class DisposeRegularizerArgs;
class CreateOrReconfigureDictionaryArgs;
class DisposeDictionaryArgs;
class RequestScoreArgs;

enum ModelIncrement_OperationType {
  ModelIncrement_OperationType_CreateIfNotExist = 0,
  ModelIncrement_OperationType_IncrementValue = 1,
  ModelIncrement_OperationType_OverwriteValue = 2,
  ModelIncrement_OperationType_DeleteToken = 3
};
bool ModelIncrement_OperationType_IsValid(int value);
const ModelIncrement_OperationType ModelIncrement_OperationType_OperationType_MIN = ModelIncrement_OperationType_CreateIfNotExist;
const ModelIncrement_OperationType ModelIncrement_OperationType_OperationType_MAX = ModelIncrement_OperationType_DeleteToken;
const int ModelIncrement_OperationType_OperationType_ARRAYSIZE = ModelIncrement_OperationType_OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModelIncrement_OperationType_descriptor();
inline const ::std::string& ModelIncrement_OperationType_Name(ModelIncrement_OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModelIncrement_OperationType_descriptor(), value);
}
inline bool ModelIncrement_OperationType_Parse(
    const ::std::string& name, ModelIncrement_OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModelIncrement_OperationType>(
    ModelIncrement_OperationType_descriptor(), name, value);
}
// ===================================================================

class Mask : public ::google::protobuf::Message {
 public:
  Mask();
  virtual ~Mask();

  Mask(const Mask& from);

  inline Mask& operator=(const Mask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mask& default_instance();

  void Swap(Mask* other);

  // implements Message ----------------------------------------------

  Mask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mask& from);
  void MergeFrom(const Mask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool value = 1 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline bool value(int index) const;
  inline void set_value(int index, bool value);
  inline void add_value(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      value() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.core.Mask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static Mask* default_instance_;
};
// -------------------------------------------------------------------

class Bool : public ::google::protobuf::Message {
 public:
  Bool();
  virtual ~Bool();

  Bool(const Bool& from);

  inline Bool& operator=(const Bool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bool& default_instance();

  void Swap(Bool* other);

  // implements Message ----------------------------------------------

  Bool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bool& from);
  void MergeFrom(const Bool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline bool value() const;
  inline void set_value(bool value);

  // @@protoc_insertion_point(class_scope:artm.core.Bool)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static Bool* default_instance_;
};
// -------------------------------------------------------------------

class Int : public ::google::protobuf::Message {
 public:
  Int();
  virtual ~Int();

  Int(const Int& from);

  inline Int& operator=(const Int& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Int& default_instance();

  void Swap(Int* other);

  // implements Message ----------------------------------------------

  Int* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Int& from);
  void MergeFrom(const Int& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.core.Int)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static Int* default_instance_;
};
// -------------------------------------------------------------------

class String : public ::google::protobuf::Message {
 public:
  String();
  virtual ~String();

  String(const String& from);

  inline String& operator=(const String& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const String& default_instance();

  void Swap(String* other);

  // implements Message ----------------------------------------------

  String* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const String& from);
  void MergeFrom(const String& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:artm.core.String)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static String* default_instance_;
};
// -------------------------------------------------------------------

class Void : public ::google::protobuf::Message {
 public:
  Void();
  virtual ~Void();

  Void(const Void& from);

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Void& default_instance();

  void Swap(Void* other);

  // implements Message ----------------------------------------------

  Void* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Void& from);
  void MergeFrom(const Void& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.core.Void)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static Void* default_instance_;
};
// -------------------------------------------------------------------

class DataLoaderCacheEntry : public ::google::protobuf::Message {
 public:
  DataLoaderCacheEntry();
  virtual ~DataLoaderCacheEntry();

  DataLoaderCacheEntry(const DataLoaderCacheEntry& from);

  inline DataLoaderCacheEntry& operator=(const DataLoaderCacheEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataLoaderCacheEntry& default_instance();

  void Swap(DataLoaderCacheEntry* other);

  // implements Message ----------------------------------------------

  DataLoaderCacheEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataLoaderCacheEntry& from);
  void MergeFrom(const DataLoaderCacheEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional string batch_uuid = 2;
  inline bool has_batch_uuid() const;
  inline void clear_batch_uuid();
  static const int kBatchUuidFieldNumber = 2;
  inline const ::std::string& batch_uuid() const;
  inline void set_batch_uuid(const ::std::string& value);
  inline void set_batch_uuid(const char* value);
  inline void set_batch_uuid(const char* value, size_t size);
  inline ::std::string* mutable_batch_uuid();
  inline ::std::string* release_batch_uuid();
  inline void set_allocated_batch_uuid(::std::string* batch_uuid);

  // repeated int32 item_id = 3;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated .artm.FloatArray theta = 4;
  inline int theta_size() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 4;
  inline const ::artm::FloatArray& theta(int index) const;
  inline ::artm::FloatArray* mutable_theta(int index);
  inline ::artm::FloatArray* add_theta();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      theta() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_theta();

  // @@protoc_insertion_point(class_scope:artm.core.DataLoaderCacheEntry)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_batch_uuid();
  inline void clear_has_batch_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;
  ::std::string* batch_uuid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > theta_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static DataLoaderCacheEntry* default_instance_;
};
// -------------------------------------------------------------------

class ProcessorInput : public ::google::protobuf::Message {
 public:
  ProcessorInput();
  virtual ~ProcessorInput();

  ProcessorInput(const ProcessorInput& from);

  inline ProcessorInput& operator=(const ProcessorInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessorInput& default_instance();

  void Swap(ProcessorInput* other);

  // implements Message ----------------------------------------------

  ProcessorInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessorInput& from);
  void MergeFrom(const ProcessorInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .artm.Batch batch = 1;
  inline bool has_batch() const;
  inline void clear_batch();
  static const int kBatchFieldNumber = 1;
  inline const ::artm::Batch& batch() const;
  inline ::artm::Batch* mutable_batch();
  inline ::artm::Batch* release_batch();
  inline void set_allocated_batch(::artm::Batch* batch);

  // required string batch_uuid = 2;
  inline bool has_batch_uuid() const;
  inline void clear_batch_uuid();
  static const int kBatchUuidFieldNumber = 2;
  inline const ::std::string& batch_uuid() const;
  inline void set_batch_uuid(const ::std::string& value);
  inline void set_batch_uuid(const char* value);
  inline void set_batch_uuid(const char* value, size_t size);
  inline ::std::string* mutable_batch_uuid();
  inline ::std::string* release_batch_uuid();
  inline void set_allocated_batch_uuid(::std::string* batch_uuid);

  // repeated .artm.core.Mask stream_mask = 4;
  inline int stream_mask_size() const;
  inline void clear_stream_mask();
  static const int kStreamMaskFieldNumber = 4;
  inline const ::artm::core::Mask& stream_mask(int index) const;
  inline ::artm::core::Mask* mutable_stream_mask(int index);
  inline ::artm::core::Mask* add_stream_mask();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >&
      stream_mask() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >*
      mutable_stream_mask();

  // repeated string stream_name = 5;
  inline int stream_name_size() const;
  inline void clear_stream_name();
  static const int kStreamNameFieldNumber = 5;
  inline const ::std::string& stream_name(int index) const;
  inline ::std::string* mutable_stream_name(int index);
  inline void set_stream_name(int index, const ::std::string& value);
  inline void set_stream_name(int index, const char* value);
  inline void set_stream_name(int index, const char* value, size_t size);
  inline ::std::string* add_stream_name();
  inline void add_stream_name(const ::std::string& value);
  inline void add_stream_name(const char* value);
  inline void add_stream_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stream_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stream_name();

  // repeated .artm.core.DataLoaderCacheEntry cached_theta = 6;
  inline int cached_theta_size() const;
  inline void clear_cached_theta();
  static const int kCachedThetaFieldNumber = 6;
  inline const ::artm::core::DataLoaderCacheEntry& cached_theta(int index) const;
  inline ::artm::core::DataLoaderCacheEntry* mutable_cached_theta(int index);
  inline ::artm::core::DataLoaderCacheEntry* add_cached_theta();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::core::DataLoaderCacheEntry >&
      cached_theta() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::core::DataLoaderCacheEntry >*
      mutable_cached_theta();

  // @@protoc_insertion_point(class_scope:artm.core.ProcessorInput)
 private:
  inline void set_has_batch();
  inline void clear_has_batch();
  inline void set_has_batch_uuid();
  inline void clear_has_batch_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::artm::Batch* batch_;
  ::std::string* batch_uuid_;
  ::google::protobuf::RepeatedPtrField< ::artm::core::Mask > stream_mask_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stream_name_;
  ::google::protobuf::RepeatedPtrField< ::artm::core::DataLoaderCacheEntry > cached_theta_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static ProcessorInput* default_instance_;
};
// -------------------------------------------------------------------

class ModelIncrement : public ::google::protobuf::Message {
 public:
  ModelIncrement();
  virtual ~ModelIncrement();

  ModelIncrement(const ModelIncrement& from);

  inline ModelIncrement& operator=(const ModelIncrement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelIncrement& default_instance();

  void Swap(ModelIncrement* other);

  // implements Message ----------------------------------------------

  ModelIncrement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelIncrement& from);
  void MergeFrom(const ModelIncrement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModelIncrement_OperationType OperationType;
  static const OperationType CreateIfNotExist = ModelIncrement_OperationType_CreateIfNotExist;
  static const OperationType IncrementValue = ModelIncrement_OperationType_IncrementValue;
  static const OperationType OverwriteValue = ModelIncrement_OperationType_OverwriteValue;
  static const OperationType DeleteToken = ModelIncrement_OperationType_DeleteToken;
  static inline bool OperationType_IsValid(int value) {
    return ModelIncrement_OperationType_IsValid(value);
  }
  static const OperationType OperationType_MIN =
    ModelIncrement_OperationType_OperationType_MIN;
  static const OperationType OperationType_MAX =
    ModelIncrement_OperationType_OperationType_MAX;
  static const int OperationType_ARRAYSIZE =
    ModelIncrement_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationType_descriptor() {
    return ModelIncrement_OperationType_descriptor();
  }
  static inline const ::std::string& OperationType_Name(OperationType value) {
    return ModelIncrement_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(const ::std::string& name,
      OperationType* value) {
    return ModelIncrement_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string model_name = 1;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // required int32 topics_count = 2;
  inline bool has_topics_count() const;
  inline void clear_topics_count();
  static const int kTopicsCountFieldNumber = 2;
  inline ::google::protobuf::int32 topics_count() const;
  inline void set_topics_count(::google::protobuf::int32 value);

  // repeated string topics_name = 3;
  inline int topics_name_size() const;
  inline void clear_topics_name();
  static const int kTopicsNameFieldNumber = 3;
  inline const ::std::string& topics_name(int index) const;
  inline ::std::string* mutable_topics_name(int index);
  inline void set_topics_name(int index, const ::std::string& value);
  inline void set_topics_name(int index, const char* value);
  inline void set_topics_name(int index, const char* value, size_t size);
  inline ::std::string* add_topics_name();
  inline void add_topics_name(const ::std::string& value);
  inline void add_topics_name(const char* value);
  inline void add_topics_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topics_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topics_name();

  // repeated string token = 4;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token(int index) const;
  inline ::std::string* mutable_token(int index);
  inline void set_token(int index, const ::std::string& value);
  inline void set_token(int index, const char* value);
  inline void set_token(int index, const char* value, size_t size);
  inline ::std::string* add_token();
  inline void add_token(const ::std::string& value);
  inline void add_token(const char* value);
  inline void add_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated string class_id = 5;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 5;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated .artm.core.ModelIncrement.OperationType operation_type = 6;
  inline int operation_type_size() const;
  inline void clear_operation_type();
  static const int kOperationTypeFieldNumber = 6;
  inline ::artm::core::ModelIncrement_OperationType operation_type(int index) const;
  inline void set_operation_type(int index, ::artm::core::ModelIncrement_OperationType value);
  inline void add_operation_type(::artm::core::ModelIncrement_OperationType value);
  inline const ::google::protobuf::RepeatedField<int>& operation_type() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_operation_type();

  // repeated .artm.FloatArray token_increment = 7;
  inline int token_increment_size() const;
  inline void clear_token_increment();
  static const int kTokenIncrementFieldNumber = 7;
  inline const ::artm::FloatArray& token_increment(int index) const;
  inline ::artm::FloatArray* mutable_token_increment(int index);
  inline ::artm::FloatArray* add_token_increment();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      token_increment() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_token_increment();

  // repeated string score_name = 8;
  inline int score_name_size() const;
  inline void clear_score_name();
  static const int kScoreNameFieldNumber = 8;
  inline const ::std::string& score_name(int index) const;
  inline ::std::string* mutable_score_name(int index);
  inline void set_score_name(int index, const ::std::string& value);
  inline void set_score_name(int index, const char* value);
  inline void set_score_name(int index, const char* value, size_t size);
  inline ::std::string* add_score_name();
  inline void add_score_name(const ::std::string& value);
  inline void add_score_name(const char* value);
  inline void add_score_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& score_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_score_name();

  // repeated bytes score = 9;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 9;
  inline const ::std::string& score(int index) const;
  inline ::std::string* mutable_score(int index);
  inline void set_score(int index, const ::std::string& value);
  inline void set_score(int index, const char* value);
  inline void set_score(int index, const void* value, size_t size);
  inline ::std::string* add_score();
  inline void add_score(const ::std::string& value);
  inline void add_score(const char* value);
  inline void add_score(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& score() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_score();

  // repeated int32 item_id = 10;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 10;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated .artm.FloatArray theta = 11;
  inline int theta_size() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 11;
  inline const ::artm::FloatArray& theta(int index) const;
  inline ::artm::FloatArray* mutable_theta(int index);
  inline ::artm::FloatArray* add_theta();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      theta() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_theta();

  // repeated string batch_uuid = 12;
  inline int batch_uuid_size() const;
  inline void clear_batch_uuid();
  static const int kBatchUuidFieldNumber = 12;
  inline const ::std::string& batch_uuid(int index) const;
  inline ::std::string* mutable_batch_uuid(int index);
  inline void set_batch_uuid(int index, const ::std::string& value);
  inline void set_batch_uuid(int index, const char* value);
  inline void set_batch_uuid(int index, const char* value, size_t size);
  inline ::std::string* add_batch_uuid();
  inline void add_batch_uuid(const ::std::string& value);
  inline void add_batch_uuid(const char* value);
  inline void add_batch_uuid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_uuid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_uuid();

  // @@protoc_insertion_point(class_scope:artm.core.ModelIncrement)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_topics_count();
  inline void clear_has_topics_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topics_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::RepeatedField<int> operation_type_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > token_increment_;
  ::google::protobuf::RepeatedPtrField< ::std::string> score_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > theta_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_uuid_;
  ::google::protobuf::int32 topics_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static ModelIncrement* default_instance_;
};
// -------------------------------------------------------------------

class BatchIds : public ::google::protobuf::Message {
 public:
  BatchIds();
  virtual ~BatchIds();

  BatchIds(const BatchIds& from);

  inline BatchIds& operator=(const BatchIds& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchIds& default_instance();

  void Swap(BatchIds* other);

  // implements Message ----------------------------------------------

  BatchIds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchIds& from);
  void MergeFrom(const BatchIds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string batch_id = 1;
  inline int batch_id_size() const;
  inline void clear_batch_id();
  static const int kBatchIdFieldNumber = 1;
  inline const ::std::string& batch_id(int index) const;
  inline ::std::string* mutable_batch_id(int index);
  inline void set_batch_id(int index, const ::std::string& value);
  inline void set_batch_id(int index, const char* value);
  inline void set_batch_id(int index, const char* value, size_t size);
  inline ::std::string* add_batch_id();
  inline void add_batch_id(const ::std::string& value);
  inline void add_batch_id(const char* value);
  inline void add_batch_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_id();

  // @@protoc_insertion_point(class_scope:artm.core.BatchIds)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> batch_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static BatchIds* default_instance_;
};
// -------------------------------------------------------------------

class CreateOrReconfigureModelArgs : public ::google::protobuf::Message {
 public:
  CreateOrReconfigureModelArgs();
  virtual ~CreateOrReconfigureModelArgs();

  CreateOrReconfigureModelArgs(const CreateOrReconfigureModelArgs& from);

  inline CreateOrReconfigureModelArgs& operator=(const CreateOrReconfigureModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOrReconfigureModelArgs& default_instance();

  void Swap(CreateOrReconfigureModelArgs* other);

  // implements Message ----------------------------------------------

  CreateOrReconfigureModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateOrReconfigureModelArgs& from);
  void MergeFrom(const CreateOrReconfigureModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 2;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 2;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional .artm.ModelConfig config = 3;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 3;
  inline const ::artm::ModelConfig& config() const;
  inline ::artm::ModelConfig* mutable_config();
  inline ::artm::ModelConfig* release_config();
  inline void set_allocated_config(::artm::ModelConfig* config);

  // @@protoc_insertion_point(class_scope:artm.core.CreateOrReconfigureModelArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;
  ::artm::ModelConfig* config_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static CreateOrReconfigureModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DisposeModelArgs : public ::google::protobuf::Message {
 public:
  DisposeModelArgs();
  virtual ~DisposeModelArgs();

  DisposeModelArgs(const DisposeModelArgs& from);

  inline DisposeModelArgs& operator=(const DisposeModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisposeModelArgs& default_instance();

  void Swap(DisposeModelArgs* other);

  // implements Message ----------------------------------------------

  DisposeModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisposeModelArgs& from);
  void MergeFrom(const DisposeModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 2;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 2;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // @@protoc_insertion_point(class_scope:artm.core.DisposeModelArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static DisposeModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class CreateOrReconfigureRegularizerArgs : public ::google::protobuf::Message {
 public:
  CreateOrReconfigureRegularizerArgs();
  virtual ~CreateOrReconfigureRegularizerArgs();

  CreateOrReconfigureRegularizerArgs(const CreateOrReconfigureRegularizerArgs& from);

  inline CreateOrReconfigureRegularizerArgs& operator=(const CreateOrReconfigureRegularizerArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOrReconfigureRegularizerArgs& default_instance();

  void Swap(CreateOrReconfigureRegularizerArgs* other);

  // implements Message ----------------------------------------------

  CreateOrReconfigureRegularizerArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateOrReconfigureRegularizerArgs& from);
  void MergeFrom(const CreateOrReconfigureRegularizerArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string regularizer_name = 2;
  inline bool has_regularizer_name() const;
  inline void clear_regularizer_name();
  static const int kRegularizerNameFieldNumber = 2;
  inline const ::std::string& regularizer_name() const;
  inline void set_regularizer_name(const ::std::string& value);
  inline void set_regularizer_name(const char* value);
  inline void set_regularizer_name(const char* value, size_t size);
  inline ::std::string* mutable_regularizer_name();
  inline ::std::string* release_regularizer_name();
  inline void set_allocated_regularizer_name(::std::string* regularizer_name);

  // optional .artm.RegularizerConfig config = 3;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 3;
  inline const ::artm::RegularizerConfig& config() const;
  inline ::artm::RegularizerConfig* mutable_config();
  inline ::artm::RegularizerConfig* release_config();
  inline void set_allocated_config(::artm::RegularizerConfig* config);

  // @@protoc_insertion_point(class_scope:artm.core.CreateOrReconfigureRegularizerArgs)
 private:
  inline void set_has_regularizer_name();
  inline void clear_has_regularizer_name();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* regularizer_name_;
  ::artm::RegularizerConfig* config_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static CreateOrReconfigureRegularizerArgs* default_instance_;
};
// -------------------------------------------------------------------

class DisposeRegularizerArgs : public ::google::protobuf::Message {
 public:
  DisposeRegularizerArgs();
  virtual ~DisposeRegularizerArgs();

  DisposeRegularizerArgs(const DisposeRegularizerArgs& from);

  inline DisposeRegularizerArgs& operator=(const DisposeRegularizerArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisposeRegularizerArgs& default_instance();

  void Swap(DisposeRegularizerArgs* other);

  // implements Message ----------------------------------------------

  DisposeRegularizerArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisposeRegularizerArgs& from);
  void MergeFrom(const DisposeRegularizerArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string regularizer_name = 2;
  inline bool has_regularizer_name() const;
  inline void clear_regularizer_name();
  static const int kRegularizerNameFieldNumber = 2;
  inline const ::std::string& regularizer_name() const;
  inline void set_regularizer_name(const ::std::string& value);
  inline void set_regularizer_name(const char* value);
  inline void set_regularizer_name(const char* value, size_t size);
  inline ::std::string* mutable_regularizer_name();
  inline ::std::string* release_regularizer_name();
  inline void set_allocated_regularizer_name(::std::string* regularizer_name);

  // @@protoc_insertion_point(class_scope:artm.core.DisposeRegularizerArgs)
 private:
  inline void set_has_regularizer_name();
  inline void clear_has_regularizer_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* regularizer_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static DisposeRegularizerArgs* default_instance_;
};
// -------------------------------------------------------------------

class CreateOrReconfigureDictionaryArgs : public ::google::protobuf::Message {
 public:
  CreateOrReconfigureDictionaryArgs();
  virtual ~CreateOrReconfigureDictionaryArgs();

  CreateOrReconfigureDictionaryArgs(const CreateOrReconfigureDictionaryArgs& from);

  inline CreateOrReconfigureDictionaryArgs& operator=(const CreateOrReconfigureDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOrReconfigureDictionaryArgs& default_instance();

  void Swap(CreateOrReconfigureDictionaryArgs* other);

  // implements Message ----------------------------------------------

  CreateOrReconfigureDictionaryArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateOrReconfigureDictionaryArgs& from);
  void MergeFrom(const CreateOrReconfigureDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .artm.DictionaryConfig dictionary = 2;
  inline bool has_dictionary() const;
  inline void clear_dictionary();
  static const int kDictionaryFieldNumber = 2;
  inline const ::artm::DictionaryConfig& dictionary() const;
  inline ::artm::DictionaryConfig* mutable_dictionary();
  inline ::artm::DictionaryConfig* release_dictionary();
  inline void set_allocated_dictionary(::artm::DictionaryConfig* dictionary);

  // @@protoc_insertion_point(class_scope:artm.core.CreateOrReconfigureDictionaryArgs)
 private:
  inline void set_has_dictionary();
  inline void clear_has_dictionary();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::artm::DictionaryConfig* dictionary_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static CreateOrReconfigureDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class DisposeDictionaryArgs : public ::google::protobuf::Message {
 public:
  DisposeDictionaryArgs();
  virtual ~DisposeDictionaryArgs();

  DisposeDictionaryArgs(const DisposeDictionaryArgs& from);

  inline DisposeDictionaryArgs& operator=(const DisposeDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisposeDictionaryArgs& default_instance();

  void Swap(DisposeDictionaryArgs* other);

  // implements Message ----------------------------------------------

  DisposeDictionaryArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisposeDictionaryArgs& from);
  void MergeFrom(const DisposeDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dictionary_name = 2;
  inline bool has_dictionary_name() const;
  inline void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 2;
  inline const ::std::string& dictionary_name() const;
  inline void set_dictionary_name(const ::std::string& value);
  inline void set_dictionary_name(const char* value);
  inline void set_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_name();
  inline ::std::string* release_dictionary_name();
  inline void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.core.DisposeDictionaryArgs)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dictionary_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static DisposeDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class RequestScoreArgs : public ::google::protobuf::Message {
 public:
  RequestScoreArgs();
  virtual ~RequestScoreArgs();

  RequestScoreArgs(const RequestScoreArgs& from);

  inline RequestScoreArgs& operator=(const RequestScoreArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestScoreArgs& default_instance();

  void Swap(RequestScoreArgs* other);

  // implements Message ----------------------------------------------

  RequestScoreArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestScoreArgs& from);
  void MergeFrom(const RequestScoreArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional string score_name = 2;
  inline bool has_score_name() const;
  inline void clear_score_name();
  static const int kScoreNameFieldNumber = 2;
  inline const ::std::string& score_name() const;
  inline void set_score_name(const ::std::string& value);
  inline void set_score_name(const char* value);
  inline void set_score_name(const char* value, size_t size);
  inline ::std::string* mutable_score_name();
  inline ::std::string* release_score_name();
  inline void set_allocated_score_name(::std::string* score_name);

  // @@protoc_insertion_point(class_scope:artm.core.RequestScoreArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_score_name();
  inline void clear_has_score_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;
  ::std::string* score_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_AssignDesc_artm_2fcore_2finternals_2eproto();
  friend void protobuf_ShutdownFile_artm_2fcore_2finternals_2eproto();

  void InitAsDefaultInstance();
  static RequestScoreArgs* default_instance_;
};
// ===================================================================


// ===================================================================

// Mask

// repeated bool value = 1 [packed = true];
inline int Mask::value_size() const {
  return value_.size();
}
inline void Mask::clear_value() {
  value_.Clear();
}
inline bool Mask::value(int index) const {
  return value_.Get(index);
}
inline void Mask::set_value(int index, bool value) {
  value_.Set(index, value);
}
inline void Mask::add_value(bool value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
Mask::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< bool >*
Mask::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// Bool

// optional bool value = 1;
inline bool Bool::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bool::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bool::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bool::clear_value() {
  value_ = false;
  clear_has_value();
}
inline bool Bool::value() const {
  return value_;
}
inline void Bool::set_value(bool value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// Int

// optional int32 value = 1;
inline bool Int::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Int::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Int::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Int::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 Int::value() const {
  return value_;
}
inline void Int::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// String

// optional string value = 1;
inline bool String::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void String::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void String::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void String::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& String::value() const {
  return *value_;
}
inline void String::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void String::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void String::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* String::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* String::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void String::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyString()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// Void

// -------------------------------------------------------------------

// DataLoaderCacheEntry

// optional string model_name = 1;
inline bool DataLoaderCacheEntry::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataLoaderCacheEntry::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataLoaderCacheEntry::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataLoaderCacheEntry::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& DataLoaderCacheEntry::model_name() const {
  return *model_name_;
}
inline void DataLoaderCacheEntry::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void DataLoaderCacheEntry::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void DataLoaderCacheEntry::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderCacheEntry::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* DataLoaderCacheEntry::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataLoaderCacheEntry::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string batch_uuid = 2;
inline bool DataLoaderCacheEntry::has_batch_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataLoaderCacheEntry::set_has_batch_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataLoaderCacheEntry::clear_has_batch_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataLoaderCacheEntry::clear_batch_uuid() {
  if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_->clear();
  }
  clear_has_batch_uuid();
}
inline const ::std::string& DataLoaderCacheEntry::batch_uuid() const {
  return *batch_uuid_;
}
inline void DataLoaderCacheEntry::set_batch_uuid(const ::std::string& value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void DataLoaderCacheEntry::set_batch_uuid(const char* value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void DataLoaderCacheEntry::set_batch_uuid(const char* value, size_t size) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLoaderCacheEntry::mutable_batch_uuid() {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  return batch_uuid_;
}
inline ::std::string* DataLoaderCacheEntry::release_batch_uuid() {
  clear_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = batch_uuid_;
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DataLoaderCacheEntry::set_allocated_batch_uuid(::std::string* batch_uuid) {
  if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete batch_uuid_;
  }
  if (batch_uuid) {
    set_has_batch_uuid();
    batch_uuid_ = batch_uuid;
  } else {
    clear_has_batch_uuid();
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated int32 item_id = 3;
inline int DataLoaderCacheEntry::item_id_size() const {
  return item_id_.size();
}
inline void DataLoaderCacheEntry::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 DataLoaderCacheEntry::item_id(int index) const {
  return item_id_.Get(index);
}
inline void DataLoaderCacheEntry::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void DataLoaderCacheEntry::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DataLoaderCacheEntry::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DataLoaderCacheEntry::mutable_item_id() {
  return &item_id_;
}

// repeated .artm.FloatArray theta = 4;
inline int DataLoaderCacheEntry::theta_size() const {
  return theta_.size();
}
inline void DataLoaderCacheEntry::clear_theta() {
  theta_.Clear();
}
inline const ::artm::FloatArray& DataLoaderCacheEntry::theta(int index) const {
  return theta_.Get(index);
}
inline ::artm::FloatArray* DataLoaderCacheEntry::mutable_theta(int index) {
  return theta_.Mutable(index);
}
inline ::artm::FloatArray* DataLoaderCacheEntry::add_theta() {
  return theta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
DataLoaderCacheEntry::theta() const {
  return theta_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
DataLoaderCacheEntry::mutable_theta() {
  return &theta_;
}

// -------------------------------------------------------------------

// ProcessorInput

// required .artm.Batch batch = 1;
inline bool ProcessorInput::has_batch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessorInput::set_has_batch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessorInput::clear_has_batch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessorInput::clear_batch() {
  if (batch_ != NULL) batch_->::artm::Batch::Clear();
  clear_has_batch();
}
inline const ::artm::Batch& ProcessorInput::batch() const {
  return batch_ != NULL ? *batch_ : *default_instance_->batch_;
}
inline ::artm::Batch* ProcessorInput::mutable_batch() {
  set_has_batch();
  if (batch_ == NULL) batch_ = new ::artm::Batch;
  return batch_;
}
inline ::artm::Batch* ProcessorInput::release_batch() {
  clear_has_batch();
  ::artm::Batch* temp = batch_;
  batch_ = NULL;
  return temp;
}
inline void ProcessorInput::set_allocated_batch(::artm::Batch* batch) {
  delete batch_;
  batch_ = batch;
  if (batch) {
    set_has_batch();
  } else {
    clear_has_batch();
  }
}

// required string batch_uuid = 2;
inline bool ProcessorInput::has_batch_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessorInput::set_has_batch_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessorInput::clear_has_batch_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessorInput::clear_batch_uuid() {
  if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_->clear();
  }
  clear_has_batch_uuid();
}
inline const ::std::string& ProcessorInput::batch_uuid() const {
  return *batch_uuid_;
}
inline void ProcessorInput::set_batch_uuid(const ::std::string& value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void ProcessorInput::set_batch_uuid(const char* value) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(value);
}
inline void ProcessorInput::set_batch_uuid(const char* value, size_t size) {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  batch_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessorInput::mutable_batch_uuid() {
  set_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_uuid_ = new ::std::string;
  }
  return batch_uuid_;
}
inline ::std::string* ProcessorInput::release_batch_uuid() {
  clear_has_batch_uuid();
  if (batch_uuid_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = batch_uuid_;
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ProcessorInput::set_allocated_batch_uuid(::std::string* batch_uuid) {
  if (batch_uuid_ != &::google::protobuf::internal::GetEmptyString()) {
    delete batch_uuid_;
  }
  if (batch_uuid) {
    set_has_batch_uuid();
    batch_uuid_ = batch_uuid;
  } else {
    clear_has_batch_uuid();
    batch_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .artm.core.Mask stream_mask = 4;
inline int ProcessorInput::stream_mask_size() const {
  return stream_mask_.size();
}
inline void ProcessorInput::clear_stream_mask() {
  stream_mask_.Clear();
}
inline const ::artm::core::Mask& ProcessorInput::stream_mask(int index) const {
  return stream_mask_.Get(index);
}
inline ::artm::core::Mask* ProcessorInput::mutable_stream_mask(int index) {
  return stream_mask_.Mutable(index);
}
inline ::artm::core::Mask* ProcessorInput::add_stream_mask() {
  return stream_mask_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >&
ProcessorInput::stream_mask() const {
  return stream_mask_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::core::Mask >*
ProcessorInput::mutable_stream_mask() {
  return &stream_mask_;
}

// repeated string stream_name = 5;
inline int ProcessorInput::stream_name_size() const {
  return stream_name_.size();
}
inline void ProcessorInput::clear_stream_name() {
  stream_name_.Clear();
}
inline const ::std::string& ProcessorInput::stream_name(int index) const {
  return stream_name_.Get(index);
}
inline ::std::string* ProcessorInput::mutable_stream_name(int index) {
  return stream_name_.Mutable(index);
}
inline void ProcessorInput::set_stream_name(int index, const ::std::string& value) {
  stream_name_.Mutable(index)->assign(value);
}
inline void ProcessorInput::set_stream_name(int index, const char* value) {
  stream_name_.Mutable(index)->assign(value);
}
inline void ProcessorInput::set_stream_name(int index, const char* value, size_t size) {
  stream_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessorInput::add_stream_name() {
  return stream_name_.Add();
}
inline void ProcessorInput::add_stream_name(const ::std::string& value) {
  stream_name_.Add()->assign(value);
}
inline void ProcessorInput::add_stream_name(const char* value) {
  stream_name_.Add()->assign(value);
}
inline void ProcessorInput::add_stream_name(const char* value, size_t size) {
  stream_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessorInput::stream_name() const {
  return stream_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessorInput::mutable_stream_name() {
  return &stream_name_;
}

// repeated .artm.core.DataLoaderCacheEntry cached_theta = 6;
inline int ProcessorInput::cached_theta_size() const {
  return cached_theta_.size();
}
inline void ProcessorInput::clear_cached_theta() {
  cached_theta_.Clear();
}
inline const ::artm::core::DataLoaderCacheEntry& ProcessorInput::cached_theta(int index) const {
  return cached_theta_.Get(index);
}
inline ::artm::core::DataLoaderCacheEntry* ProcessorInput::mutable_cached_theta(int index) {
  return cached_theta_.Mutable(index);
}
inline ::artm::core::DataLoaderCacheEntry* ProcessorInput::add_cached_theta() {
  return cached_theta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::core::DataLoaderCacheEntry >&
ProcessorInput::cached_theta() const {
  return cached_theta_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::core::DataLoaderCacheEntry >*
ProcessorInput::mutable_cached_theta() {
  return &cached_theta_;
}

// -------------------------------------------------------------------

// ModelIncrement

// required string model_name = 1;
inline bool ModelIncrement::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelIncrement::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelIncrement::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelIncrement::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& ModelIncrement::model_name() const {
  return *model_name_;
}
inline void ModelIncrement::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void ModelIncrement::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void ModelIncrement::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* ModelIncrement::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ModelIncrement::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required int32 topics_count = 2;
inline bool ModelIncrement::has_topics_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelIncrement::set_has_topics_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelIncrement::clear_has_topics_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelIncrement::clear_topics_count() {
  topics_count_ = 0;
  clear_has_topics_count();
}
inline ::google::protobuf::int32 ModelIncrement::topics_count() const {
  return topics_count_;
}
inline void ModelIncrement::set_topics_count(::google::protobuf::int32 value) {
  set_has_topics_count();
  topics_count_ = value;
}

// repeated string topics_name = 3;
inline int ModelIncrement::topics_name_size() const {
  return topics_name_.size();
}
inline void ModelIncrement::clear_topics_name() {
  topics_name_.Clear();
}
inline const ::std::string& ModelIncrement::topics_name(int index) const {
  return topics_name_.Get(index);
}
inline ::std::string* ModelIncrement::mutable_topics_name(int index) {
  return topics_name_.Mutable(index);
}
inline void ModelIncrement::set_topics_name(int index, const ::std::string& value) {
  topics_name_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_topics_name(int index, const char* value) {
  topics_name_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_topics_name(int index, const char* value, size_t size) {
  topics_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::add_topics_name() {
  return topics_name_.Add();
}
inline void ModelIncrement::add_topics_name(const ::std::string& value) {
  topics_name_.Add()->assign(value);
}
inline void ModelIncrement::add_topics_name(const char* value) {
  topics_name_.Add()->assign(value);
}
inline void ModelIncrement::add_topics_name(const char* value, size_t size) {
  topics_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModelIncrement::topics_name() const {
  return topics_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModelIncrement::mutable_topics_name() {
  return &topics_name_;
}

// repeated string token = 4;
inline int ModelIncrement::token_size() const {
  return token_.size();
}
inline void ModelIncrement::clear_token() {
  token_.Clear();
}
inline const ::std::string& ModelIncrement::token(int index) const {
  return token_.Get(index);
}
inline ::std::string* ModelIncrement::mutable_token(int index) {
  return token_.Mutable(index);
}
inline void ModelIncrement::set_token(int index, const ::std::string& value) {
  token_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::add_token() {
  return token_.Add();
}
inline void ModelIncrement::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
}
inline void ModelIncrement::add_token(const char* value) {
  token_.Add()->assign(value);
}
inline void ModelIncrement::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModelIncrement::token() const {
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModelIncrement::mutable_token() {
  return &token_;
}

// repeated string class_id = 5;
inline int ModelIncrement::class_id_size() const {
  return class_id_.size();
}
inline void ModelIncrement::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& ModelIncrement::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* ModelIncrement::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void ModelIncrement::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::add_class_id() {
  return class_id_.Add();
}
inline void ModelIncrement::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void ModelIncrement::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void ModelIncrement::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModelIncrement::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModelIncrement::mutable_class_id() {
  return &class_id_;
}

// repeated .artm.core.ModelIncrement.OperationType operation_type = 6;
inline int ModelIncrement::operation_type_size() const {
  return operation_type_.size();
}
inline void ModelIncrement::clear_operation_type() {
  operation_type_.Clear();
}
inline ::artm::core::ModelIncrement_OperationType ModelIncrement::operation_type(int index) const {
  return static_cast< ::artm::core::ModelIncrement_OperationType >(operation_type_.Get(index));
}
inline void ModelIncrement::set_operation_type(int index, ::artm::core::ModelIncrement_OperationType value) {
  assert(::artm::core::ModelIncrement_OperationType_IsValid(value));
  operation_type_.Set(index, value);
}
inline void ModelIncrement::add_operation_type(::artm::core::ModelIncrement_OperationType value) {
  assert(::artm::core::ModelIncrement_OperationType_IsValid(value));
  operation_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
ModelIncrement::operation_type() const {
  return operation_type_;
}
inline ::google::protobuf::RepeatedField<int>*
ModelIncrement::mutable_operation_type() {
  return &operation_type_;
}

// repeated .artm.FloatArray token_increment = 7;
inline int ModelIncrement::token_increment_size() const {
  return token_increment_.size();
}
inline void ModelIncrement::clear_token_increment() {
  token_increment_.Clear();
}
inline const ::artm::FloatArray& ModelIncrement::token_increment(int index) const {
  return token_increment_.Get(index);
}
inline ::artm::FloatArray* ModelIncrement::mutable_token_increment(int index) {
  return token_increment_.Mutable(index);
}
inline ::artm::FloatArray* ModelIncrement::add_token_increment() {
  return token_increment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
ModelIncrement::token_increment() const {
  return token_increment_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
ModelIncrement::mutable_token_increment() {
  return &token_increment_;
}

// repeated string score_name = 8;
inline int ModelIncrement::score_name_size() const {
  return score_name_.size();
}
inline void ModelIncrement::clear_score_name() {
  score_name_.Clear();
}
inline const ::std::string& ModelIncrement::score_name(int index) const {
  return score_name_.Get(index);
}
inline ::std::string* ModelIncrement::mutable_score_name(int index) {
  return score_name_.Mutable(index);
}
inline void ModelIncrement::set_score_name(int index, const ::std::string& value) {
  score_name_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_score_name(int index, const char* value) {
  score_name_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_score_name(int index, const char* value, size_t size) {
  score_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::add_score_name() {
  return score_name_.Add();
}
inline void ModelIncrement::add_score_name(const ::std::string& value) {
  score_name_.Add()->assign(value);
}
inline void ModelIncrement::add_score_name(const char* value) {
  score_name_.Add()->assign(value);
}
inline void ModelIncrement::add_score_name(const char* value, size_t size) {
  score_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModelIncrement::score_name() const {
  return score_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModelIncrement::mutable_score_name() {
  return &score_name_;
}

// repeated bytes score = 9;
inline int ModelIncrement::score_size() const {
  return score_.size();
}
inline void ModelIncrement::clear_score() {
  score_.Clear();
}
inline const ::std::string& ModelIncrement::score(int index) const {
  return score_.Get(index);
}
inline ::std::string* ModelIncrement::mutable_score(int index) {
  return score_.Mutable(index);
}
inline void ModelIncrement::set_score(int index, const ::std::string& value) {
  score_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_score(int index, const char* value) {
  score_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_score(int index, const void* value, size_t size) {
  score_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::add_score() {
  return score_.Add();
}
inline void ModelIncrement::add_score(const ::std::string& value) {
  score_.Add()->assign(value);
}
inline void ModelIncrement::add_score(const char* value) {
  score_.Add()->assign(value);
}
inline void ModelIncrement::add_score(const void* value, size_t size) {
  score_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModelIncrement::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModelIncrement::mutable_score() {
  return &score_;
}

// repeated int32 item_id = 10;
inline int ModelIncrement::item_id_size() const {
  return item_id_.size();
}
inline void ModelIncrement::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 ModelIncrement::item_id(int index) const {
  return item_id_.Get(index);
}
inline void ModelIncrement::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void ModelIncrement::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ModelIncrement::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ModelIncrement::mutable_item_id() {
  return &item_id_;
}

// repeated .artm.FloatArray theta = 11;
inline int ModelIncrement::theta_size() const {
  return theta_.size();
}
inline void ModelIncrement::clear_theta() {
  theta_.Clear();
}
inline const ::artm::FloatArray& ModelIncrement::theta(int index) const {
  return theta_.Get(index);
}
inline ::artm::FloatArray* ModelIncrement::mutable_theta(int index) {
  return theta_.Mutable(index);
}
inline ::artm::FloatArray* ModelIncrement::add_theta() {
  return theta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
ModelIncrement::theta() const {
  return theta_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
ModelIncrement::mutable_theta() {
  return &theta_;
}

// repeated string batch_uuid = 12;
inline int ModelIncrement::batch_uuid_size() const {
  return batch_uuid_.size();
}
inline void ModelIncrement::clear_batch_uuid() {
  batch_uuid_.Clear();
}
inline const ::std::string& ModelIncrement::batch_uuid(int index) const {
  return batch_uuid_.Get(index);
}
inline ::std::string* ModelIncrement::mutable_batch_uuid(int index) {
  return batch_uuid_.Mutable(index);
}
inline void ModelIncrement::set_batch_uuid(int index, const ::std::string& value) {
  batch_uuid_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_batch_uuid(int index, const char* value) {
  batch_uuid_.Mutable(index)->assign(value);
}
inline void ModelIncrement::set_batch_uuid(int index, const char* value, size_t size) {
  batch_uuid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelIncrement::add_batch_uuid() {
  return batch_uuid_.Add();
}
inline void ModelIncrement::add_batch_uuid(const ::std::string& value) {
  batch_uuid_.Add()->assign(value);
}
inline void ModelIncrement::add_batch_uuid(const char* value) {
  batch_uuid_.Add()->assign(value);
}
inline void ModelIncrement::add_batch_uuid(const char* value, size_t size) {
  batch_uuid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModelIncrement::batch_uuid() const {
  return batch_uuid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModelIncrement::mutable_batch_uuid() {
  return &batch_uuid_;
}

// -------------------------------------------------------------------

// BatchIds

// repeated string batch_id = 1;
inline int BatchIds::batch_id_size() const {
  return batch_id_.size();
}
inline void BatchIds::clear_batch_id() {
  batch_id_.Clear();
}
inline const ::std::string& BatchIds::batch_id(int index) const {
  return batch_id_.Get(index);
}
inline ::std::string* BatchIds::mutable_batch_id(int index) {
  return batch_id_.Mutable(index);
}
inline void BatchIds::set_batch_id(int index, const ::std::string& value) {
  batch_id_.Mutable(index)->assign(value);
}
inline void BatchIds::set_batch_id(int index, const char* value) {
  batch_id_.Mutable(index)->assign(value);
}
inline void BatchIds::set_batch_id(int index, const char* value, size_t size) {
  batch_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BatchIds::add_batch_id() {
  return batch_id_.Add();
}
inline void BatchIds::add_batch_id(const ::std::string& value) {
  batch_id_.Add()->assign(value);
}
inline void BatchIds::add_batch_id(const char* value) {
  batch_id_.Add()->assign(value);
}
inline void BatchIds::add_batch_id(const char* value, size_t size) {
  batch_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchIds::batch_id() const {
  return batch_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BatchIds::mutable_batch_id() {
  return &batch_id_;
}

// -------------------------------------------------------------------

// CreateOrReconfigureModelArgs

// optional string model_name = 2;
inline bool CreateOrReconfigureModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateOrReconfigureModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateOrReconfigureModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateOrReconfigureModelArgs::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& CreateOrReconfigureModelArgs::model_name() const {
  return *model_name_;
}
inline void CreateOrReconfigureModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void CreateOrReconfigureModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void CreateOrReconfigureModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrReconfigureModelArgs::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* CreateOrReconfigureModelArgs::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void CreateOrReconfigureModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .artm.ModelConfig config = 3;
inline bool CreateOrReconfigureModelArgs::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateOrReconfigureModelArgs::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateOrReconfigureModelArgs::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateOrReconfigureModelArgs::clear_config() {
  if (config_ != NULL) config_->::artm::ModelConfig::Clear();
  clear_has_config();
}
inline const ::artm::ModelConfig& CreateOrReconfigureModelArgs::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::artm::ModelConfig* CreateOrReconfigureModelArgs::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::artm::ModelConfig;
  return config_;
}
inline ::artm::ModelConfig* CreateOrReconfigureModelArgs::release_config() {
  clear_has_config();
  ::artm::ModelConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void CreateOrReconfigureModelArgs::set_allocated_config(::artm::ModelConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// -------------------------------------------------------------------

// DisposeModelArgs

// optional string model_name = 2;
inline bool DisposeModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisposeModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisposeModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisposeModelArgs::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& DisposeModelArgs::model_name() const {
  return *model_name_;
}
inline void DisposeModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void DisposeModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void DisposeModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisposeModelArgs::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* DisposeModelArgs::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DisposeModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// CreateOrReconfigureRegularizerArgs

// optional string regularizer_name = 2;
inline bool CreateOrReconfigureRegularizerArgs::has_regularizer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateOrReconfigureRegularizerArgs::set_has_regularizer_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateOrReconfigureRegularizerArgs::clear_has_regularizer_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateOrReconfigureRegularizerArgs::clear_regularizer_name() {
  if (regularizer_name_ != &::google::protobuf::internal::GetEmptyString()) {
    regularizer_name_->clear();
  }
  clear_has_regularizer_name();
}
inline const ::std::string& CreateOrReconfigureRegularizerArgs::regularizer_name() const {
  return *regularizer_name_;
}
inline void CreateOrReconfigureRegularizerArgs::set_regularizer_name(const ::std::string& value) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::GetEmptyString()) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(value);
}
inline void CreateOrReconfigureRegularizerArgs::set_regularizer_name(const char* value) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::GetEmptyString()) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(value);
}
inline void CreateOrReconfigureRegularizerArgs::set_regularizer_name(const char* value, size_t size) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::GetEmptyString()) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrReconfigureRegularizerArgs::mutable_regularizer_name() {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::GetEmptyString()) {
    regularizer_name_ = new ::std::string;
  }
  return regularizer_name_;
}
inline ::std::string* CreateOrReconfigureRegularizerArgs::release_regularizer_name() {
  clear_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = regularizer_name_;
    regularizer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void CreateOrReconfigureRegularizerArgs::set_allocated_regularizer_name(::std::string* regularizer_name) {
  if (regularizer_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete regularizer_name_;
  }
  if (regularizer_name) {
    set_has_regularizer_name();
    regularizer_name_ = regularizer_name;
  } else {
    clear_has_regularizer_name();
    regularizer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .artm.RegularizerConfig config = 3;
inline bool CreateOrReconfigureRegularizerArgs::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateOrReconfigureRegularizerArgs::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateOrReconfigureRegularizerArgs::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateOrReconfigureRegularizerArgs::clear_config() {
  if (config_ != NULL) config_->::artm::RegularizerConfig::Clear();
  clear_has_config();
}
inline const ::artm::RegularizerConfig& CreateOrReconfigureRegularizerArgs::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::artm::RegularizerConfig* CreateOrReconfigureRegularizerArgs::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::artm::RegularizerConfig;
  return config_;
}
inline ::artm::RegularizerConfig* CreateOrReconfigureRegularizerArgs::release_config() {
  clear_has_config();
  ::artm::RegularizerConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void CreateOrReconfigureRegularizerArgs::set_allocated_config(::artm::RegularizerConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// -------------------------------------------------------------------

// DisposeRegularizerArgs

// optional string regularizer_name = 2;
inline bool DisposeRegularizerArgs::has_regularizer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisposeRegularizerArgs::set_has_regularizer_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisposeRegularizerArgs::clear_has_regularizer_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisposeRegularizerArgs::clear_regularizer_name() {
  if (regularizer_name_ != &::google::protobuf::internal::GetEmptyString()) {
    regularizer_name_->clear();
  }
  clear_has_regularizer_name();
}
inline const ::std::string& DisposeRegularizerArgs::regularizer_name() const {
  return *regularizer_name_;
}
inline void DisposeRegularizerArgs::set_regularizer_name(const ::std::string& value) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::GetEmptyString()) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(value);
}
inline void DisposeRegularizerArgs::set_regularizer_name(const char* value) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::GetEmptyString()) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(value);
}
inline void DisposeRegularizerArgs::set_regularizer_name(const char* value, size_t size) {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::GetEmptyString()) {
    regularizer_name_ = new ::std::string;
  }
  regularizer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisposeRegularizerArgs::mutable_regularizer_name() {
  set_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::GetEmptyString()) {
    regularizer_name_ = new ::std::string;
  }
  return regularizer_name_;
}
inline ::std::string* DisposeRegularizerArgs::release_regularizer_name() {
  clear_has_regularizer_name();
  if (regularizer_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = regularizer_name_;
    regularizer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DisposeRegularizerArgs::set_allocated_regularizer_name(::std::string* regularizer_name) {
  if (regularizer_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete regularizer_name_;
  }
  if (regularizer_name) {
    set_has_regularizer_name();
    regularizer_name_ = regularizer_name;
  } else {
    clear_has_regularizer_name();
    regularizer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// CreateOrReconfigureDictionaryArgs

// optional .artm.DictionaryConfig dictionary = 2;
inline bool CreateOrReconfigureDictionaryArgs::has_dictionary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateOrReconfigureDictionaryArgs::set_has_dictionary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateOrReconfigureDictionaryArgs::clear_has_dictionary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateOrReconfigureDictionaryArgs::clear_dictionary() {
  if (dictionary_ != NULL) dictionary_->::artm::DictionaryConfig::Clear();
  clear_has_dictionary();
}
inline const ::artm::DictionaryConfig& CreateOrReconfigureDictionaryArgs::dictionary() const {
  return dictionary_ != NULL ? *dictionary_ : *default_instance_->dictionary_;
}
inline ::artm::DictionaryConfig* CreateOrReconfigureDictionaryArgs::mutable_dictionary() {
  set_has_dictionary();
  if (dictionary_ == NULL) dictionary_ = new ::artm::DictionaryConfig;
  return dictionary_;
}
inline ::artm::DictionaryConfig* CreateOrReconfigureDictionaryArgs::release_dictionary() {
  clear_has_dictionary();
  ::artm::DictionaryConfig* temp = dictionary_;
  dictionary_ = NULL;
  return temp;
}
inline void CreateOrReconfigureDictionaryArgs::set_allocated_dictionary(::artm::DictionaryConfig* dictionary) {
  delete dictionary_;
  dictionary_ = dictionary;
  if (dictionary) {
    set_has_dictionary();
  } else {
    clear_has_dictionary();
  }
}

// -------------------------------------------------------------------

// DisposeDictionaryArgs

// optional string dictionary_name = 2;
inline bool DisposeDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisposeDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisposeDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisposeDictionaryArgs::clear_dictionary_name() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_->clear();
  }
  clear_has_dictionary_name();
}
inline const ::std::string& DisposeDictionaryArgs::dictionary_name() const {
  return *dictionary_name_;
}
inline void DisposeDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void DisposeDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void DisposeDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisposeDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  return dictionary_name_;
}
inline ::std::string* DisposeDictionaryArgs::release_dictionary_name() {
  clear_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_name_;
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DisposeDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (dictionary_name) {
    set_has_dictionary_name();
    dictionary_name_ = dictionary_name;
  } else {
    clear_has_dictionary_name();
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// RequestScoreArgs

// optional string model_name = 1;
inline bool RequestScoreArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestScoreArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestScoreArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestScoreArgs::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& RequestScoreArgs::model_name() const {
  return *model_name_;
}
inline void RequestScoreArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void RequestScoreArgs::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void RequestScoreArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestScoreArgs::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* RequestScoreArgs::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void RequestScoreArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string score_name = 2;
inline bool RequestScoreArgs::has_score_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestScoreArgs::set_has_score_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestScoreArgs::clear_has_score_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestScoreArgs::clear_score_name() {
  if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
    score_name_->clear();
  }
  clear_has_score_name();
}
inline const ::std::string& RequestScoreArgs::score_name() const {
  return *score_name_;
}
inline void RequestScoreArgs::set_score_name(const ::std::string& value) {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  score_name_->assign(value);
}
inline void RequestScoreArgs::set_score_name(const char* value) {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  score_name_->assign(value);
}
inline void RequestScoreArgs::set_score_name(const char* value, size_t size) {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  score_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestScoreArgs::mutable_score_name() {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  return score_name_;
}
inline ::std::string* RequestScoreArgs::release_score_name() {
  clear_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = score_name_;
    score_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void RequestScoreArgs::set_allocated_score_name(::std::string* score_name) {
  if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete score_name_;
  }
  if (score_name) {
    set_has_score_name();
    score_name_ = score_name;
  } else {
    clear_has_score_name();
    score_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace artm

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::core::ModelIncrement_OperationType>() {
  return ::artm::core::ModelIncrement_OperationType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_artm_2fcore_2finternals_2eproto__INCLUDED
