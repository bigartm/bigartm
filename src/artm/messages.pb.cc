// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artm/messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "artm/messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace artm {

namespace {

const ::google::protobuf::Descriptor* DoubleArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* FloatArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoolArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoolArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Batch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Batch_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegularizerSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegularizerSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegularizerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegularizerConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegularizerConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SmoothSparseThetaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothSparseThetaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmoothSparsePhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothSparsePhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecorrelatorPhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecorrelatorPhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiLanguagePhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiLanguagePhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* LabelRegularizationPhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LabelRegularizationPhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecifiedSparsePhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecifiedSparsePhiConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SpecifiedSparsePhiConfig_Mode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ImproveCoherencePhiConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImproveCoherencePhiConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmoothPtdwConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmoothPtdwConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SmoothPtdwConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TopicSelectionThetaConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicSelectionThetaConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransformConfig_TransformType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScoreConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ScoreData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ScoreData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ScoreDataArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreDataArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerplexityScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerplexityScoreConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PerplexityScoreConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PerplexityScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerplexityScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparsityThetaScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsityThetaScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparsityThetaScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsityThetaScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparsityPhiScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsityPhiScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparsityPhiScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparsityPhiScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemsProcessedScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemsProcessedScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemsProcessedScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemsProcessedScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopTokensScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopTokensScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopTokensScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopTokensScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThetaSnippetScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThetaSnippetScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThetaSnippetScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThetaSnippetScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicKernelScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicKernelScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicKernelScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicKernelScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicMassPhiScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicMassPhiScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicMassPhiScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicMassPhiScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassPrecisionScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassPrecisionScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassPrecisionScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassPrecisionScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeakMemoryScoreConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeakMemoryScoreConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeakMemoryScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeakMemoryScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicModel_TopicModelInternals_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicModel_TopicModelInternals_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TopicModel_OperationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ThetaMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThetaMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectionParserConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectionParserConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CollectionParserConfig_Format_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CollectionParserConfig_NameType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InitializeModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitializeModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitializeModelArgs_Filter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitializeModelArgs_Filter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InitializeModelArgs_SourceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DictionaryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DictionaryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FilterDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FilterDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatherDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatherDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTopicModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTopicModelArgs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetTopicModelArgs_RequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GetTopicModelArgs_MatrixLayout_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetThetaMatrixArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetThetaMatrixArgs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetThetaMatrixArgs_MatrixLayout_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetScoreValueArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetScoreValueArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetScoreArrayArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetScoreArrayArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExportModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExportModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttachModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttachModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessBatchesArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessBatchesArgs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProcessBatchesArgs_ThetaMatrixType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProcessBatchesResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessBatchesResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegularizeModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegularizeModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* NormalizeModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalizeModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExportDictionaryArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExportDictionaryArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* CopyRequestResultArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CopyRequestResultArgs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CopyRequestResultArgs_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DuplicateMasterComponentArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplicateMasterComponentArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMasterComponentInfoArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMasterComponentInfoArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_RegularizerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_RegularizerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_ScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_ScoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_DictionaryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_DictionaryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_BatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_BatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_ModelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_ModelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterComponentInfo_CacheEntryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterComponentInfo_CacheEntryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportBatchesArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportBatchesArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* AwaitOperationArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AwaitOperationArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterModelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterModelConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FitOfflineMasterModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FitOfflineMasterModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* FitOnlineMasterModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FitOnlineMasterModelArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformMasterModelArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformMasterModelArgs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransformMasterModelArgs_ThetaMatrixType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConfigureLoggingArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigureLoggingArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearThetaCacheArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearThetaCacheArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearScoreCacheArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearScoreCacheArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearScoreArrayCacheArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearScoreArrayCacheArgs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_artm_2fmessages_2eproto() {
  protobuf_AddDesc_artm_2fmessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "artm/messages.proto");
  GOOGLE_CHECK(file != NULL);
  DoubleArray_descriptor_ = file->message_type(0);
  static const int DoubleArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleArray, value_),
  };
  DoubleArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleArray_descriptor_,
      DoubleArray::default_instance_,
      DoubleArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleArray));
  FloatArray_descriptor_ = file->message_type(1);
  static const int FloatArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatArray, value_),
  };
  FloatArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatArray_descriptor_,
      FloatArray::default_instance_,
      FloatArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatArray));
  BoolArray_descriptor_ = file->message_type(2);
  static const int BoolArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolArray, value_),
  };
  BoolArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoolArray_descriptor_,
      BoolArray::default_instance_,
      BoolArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoolArray));
  IntArray_descriptor_ = file->message_type(3);
  static const int IntArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntArray, value_),
  };
  IntArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntArray_descriptor_,
      IntArray::default_instance_,
      IntArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntArray));
  StringArray_descriptor_ = file->message_type(4);
  static const int StringArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringArray, value_),
  };
  StringArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringArray_descriptor_,
      StringArray::default_instance_,
      StringArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringArray));
  Item_descriptor_ = file->message_type(5);
  static const int Item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, token_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, token_weight_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  Batch_descriptor_ = file->message_type(6);
  static const int Batch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, id_),
  };
  Batch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Batch_descriptor_,
      Batch::default_instance_,
      Batch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Batch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Batch));
  RegularizerSettings_descriptor_ = file->message_type(7);
  static const int RegularizerSettings_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerSettings, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerSettings, tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerSettings, use_relative_regularization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerSettings, gamma_),
  };
  RegularizerSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegularizerSettings_descriptor_,
      RegularizerSettings::default_instance_,
      RegularizerSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegularizerSettings));
  RegularizerConfig_descriptor_ = file->message_type(8);
  static const int RegularizerConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, tau_),
  };
  RegularizerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegularizerConfig_descriptor_,
      RegularizerConfig::default_instance_,
      RegularizerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegularizerConfig));
  RegularizerConfig_Type_descriptor_ = RegularizerConfig_descriptor_->enum_type(0);
  SmoothSparseThetaConfig_descriptor_ = file->message_type(9);
  static const int SmoothSparseThetaConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, alpha_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, transform_config_),
  };
  SmoothSparseThetaConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmoothSparseThetaConfig_descriptor_,
      SmoothSparseThetaConfig::default_instance_,
      SmoothSparseThetaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparseThetaConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmoothSparseThetaConfig));
  SmoothSparsePhiConfig_descriptor_ = file->message_type(10);
  static const int SmoothSparsePhiConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, dictionary_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, transform_config_),
  };
  SmoothSparsePhiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmoothSparsePhiConfig_descriptor_,
      SmoothSparsePhiConfig::default_instance_,
      SmoothSparsePhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothSparsePhiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmoothSparsePhiConfig));
  DecorrelatorPhiConfig_descriptor_ = file->message_type(11);
  static const int DecorrelatorPhiConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, class_id_),
  };
  DecorrelatorPhiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecorrelatorPhiConfig_descriptor_,
      DecorrelatorPhiConfig::default_instance_,
      DecorrelatorPhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecorrelatorPhiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecorrelatorPhiConfig));
  MultiLanguagePhiConfig_descriptor_ = file->message_type(12);
  static const int MultiLanguagePhiConfig_offsets_[1] = {
  };
  MultiLanguagePhiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiLanguagePhiConfig_descriptor_,
      MultiLanguagePhiConfig::default_instance_,
      MultiLanguagePhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLanguagePhiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLanguagePhiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiLanguagePhiConfig));
  LabelRegularizationPhiConfig_descriptor_ = file->message_type(13);
  static const int LabelRegularizationPhiConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRegularizationPhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRegularizationPhiConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRegularizationPhiConfig, dictionary_name_),
  };
  LabelRegularizationPhiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LabelRegularizationPhiConfig_descriptor_,
      LabelRegularizationPhiConfig::default_instance_,
      LabelRegularizationPhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRegularizationPhiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LabelRegularizationPhiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LabelRegularizationPhiConfig));
  SpecifiedSparsePhiConfig_descriptor_ = file->message_type(14);
  static const int SpecifiedSparsePhiConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, max_elements_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, probability_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, mode_),
  };
  SpecifiedSparsePhiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecifiedSparsePhiConfig_descriptor_,
      SpecifiedSparsePhiConfig::default_instance_,
      SpecifiedSparsePhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecifiedSparsePhiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecifiedSparsePhiConfig));
  SpecifiedSparsePhiConfig_Mode_descriptor_ = SpecifiedSparsePhiConfig_descriptor_->enum_type(0);
  ImproveCoherencePhiConfig_descriptor_ = file->message_type(15);
  static const int ImproveCoherencePhiConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImproveCoherencePhiConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImproveCoherencePhiConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImproveCoherencePhiConfig, dictionary_name_),
  };
  ImproveCoherencePhiConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImproveCoherencePhiConfig_descriptor_,
      ImproveCoherencePhiConfig::default_instance_,
      ImproveCoherencePhiConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImproveCoherencePhiConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImproveCoherencePhiConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImproveCoherencePhiConfig));
  SmoothPtdwConfig_descriptor_ = file->message_type(16);
  static const int SmoothPtdwConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothPtdwConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothPtdwConfig, window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothPtdwConfig, threshold_),
  };
  SmoothPtdwConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmoothPtdwConfig_descriptor_,
      SmoothPtdwConfig::default_instance_,
      SmoothPtdwConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothPtdwConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmoothPtdwConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmoothPtdwConfig));
  SmoothPtdwConfig_Type_descriptor_ = SmoothPtdwConfig_descriptor_->enum_type(0);
  TopicSelectionThetaConfig_descriptor_ = file->message_type(17);
  static const int TopicSelectionThetaConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSelectionThetaConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSelectionThetaConfig, topic_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSelectionThetaConfig, alpha_iter_),
  };
  TopicSelectionThetaConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicSelectionThetaConfig_descriptor_,
      TopicSelectionThetaConfig::default_instance_,
      TopicSelectionThetaConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSelectionThetaConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSelectionThetaConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicSelectionThetaConfig));
  TransformConfig_descriptor_ = file->message_type(18);
  static const int TransformConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, transform_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, a_),
  };
  TransformConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformConfig_descriptor_,
      TransformConfig::default_instance_,
      TransformConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformConfig));
  TransformConfig_TransformType_descriptor_ = TransformConfig_descriptor_->enum_type(0);
  ScoreConfig_descriptor_ = file->message_type(19);
  static const int ScoreConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, config_),
  };
  ScoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreConfig_descriptor_,
      ScoreConfig::default_instance_,
      ScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreConfig));
  ScoreConfig_Type_descriptor_ = ScoreConfig_descriptor_->enum_type(0);
  ScoreData_descriptor_ = file->message_type(20);
  static const int ScoreData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreData, data_),
  };
  ScoreData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreData_descriptor_,
      ScoreData::default_instance_,
      ScoreData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreData));
  ScoreData_Type_descriptor_ = ScoreData_descriptor_->enum_type(0);
  ScoreDataArray_descriptor_ = file->message_type(21);
  static const int ScoreDataArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDataArray, score_),
  };
  ScoreDataArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreDataArray_descriptor_,
      ScoreDataArray::default_instance_,
      ScoreDataArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDataArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDataArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreDataArray));
  PerplexityScoreConfig_descriptor_ = file->message_type(22);
  static const int PerplexityScoreConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, model_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, dictionary_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, theta_sparsity_eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, theta_sparsity_topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, class_id_),
  };
  PerplexityScoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PerplexityScoreConfig_descriptor_,
      PerplexityScoreConfig::default_instance_,
      PerplexityScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PerplexityScoreConfig));
  PerplexityScoreConfig_Type_descriptor_ = PerplexityScoreConfig_descriptor_->enum_type(0);
  PerplexityScore_descriptor_ = file->message_type(23);
  static const int PerplexityScore_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, normalizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, zero_words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, theta_sparsity_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, theta_sparsity_zero_topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, theta_sparsity_total_topics_),
  };
  PerplexityScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PerplexityScore_descriptor_,
      PerplexityScore::default_instance_,
      PerplexityScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerplexityScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PerplexityScore));
  SparsityThetaScoreConfig_descriptor_ = file->message_type(24);
  static const int SparsityThetaScoreConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScoreConfig, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScoreConfig, topic_name_),
  };
  SparsityThetaScoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparsityThetaScoreConfig_descriptor_,
      SparsityThetaScoreConfig::default_instance_,
      SparsityThetaScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparsityThetaScoreConfig));
  SparsityThetaScore_descriptor_ = file->message_type(25);
  static const int SparsityThetaScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScore, zero_topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScore, total_topics_),
  };
  SparsityThetaScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparsityThetaScore_descriptor_,
      SparsityThetaScore::default_instance_,
      SparsityThetaScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityThetaScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparsityThetaScore));
  SparsityPhiScoreConfig_descriptor_ = file->message_type(26);
  static const int SparsityPhiScoreConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScoreConfig, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScoreConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScoreConfig, topic_name_),
  };
  SparsityPhiScoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparsityPhiScoreConfig_descriptor_,
      SparsityPhiScoreConfig::default_instance_,
      SparsityPhiScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparsityPhiScoreConfig));
  SparsityPhiScore_descriptor_ = file->message_type(27);
  static const int SparsityPhiScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScore, zero_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScore, total_tokens_),
  };
  SparsityPhiScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparsityPhiScore_descriptor_,
      SparsityPhiScore::default_instance_,
      SparsityPhiScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparsityPhiScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparsityPhiScore));
  ItemsProcessedScoreConfig_descriptor_ = file->message_type(28);
  static const int ItemsProcessedScoreConfig_offsets_[1] = {
  };
  ItemsProcessedScoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemsProcessedScoreConfig_descriptor_,
      ItemsProcessedScoreConfig::default_instance_,
      ItemsProcessedScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemsProcessedScoreConfig));
  ItemsProcessedScore_descriptor_ = file->message_type(29);
  static const int ItemsProcessedScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScore, num_batches_),
  };
  ItemsProcessedScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemsProcessedScore_descriptor_,
      ItemsProcessedScore::default_instance_,
      ItemsProcessedScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemsProcessedScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemsProcessedScore));
  TopTokensScoreConfig_descriptor_ = file->message_type(30);
  static const int TopTokensScoreConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, num_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, cooccurrence_dictionary_name_),
  };
  TopTokensScoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopTokensScoreConfig_descriptor_,
      TopTokensScoreConfig::default_instance_,
      TopTokensScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopTokensScoreConfig));
  TopTokensScore_descriptor_ = file->message_type(31);
  static const int TopTokensScore_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, num_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, topic_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, coherence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, average_coherence_),
  };
  TopTokensScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopTokensScore_descriptor_,
      TopTokensScore::default_instance_,
      TopTokensScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopTokensScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopTokensScore));
  ThetaSnippetScoreConfig_descriptor_ = file->message_type(32);
  static const int ThetaSnippetScoreConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScoreConfig, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScoreConfig, item_count_),
  };
  ThetaSnippetScoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThetaSnippetScoreConfig_descriptor_,
      ThetaSnippetScoreConfig::default_instance_,
      ThetaSnippetScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThetaSnippetScoreConfig));
  ThetaSnippetScore_descriptor_ = file->message_type(33);
  static const int ThetaSnippetScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScore, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScore, values_),
  };
  ThetaSnippetScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThetaSnippetScore_descriptor_,
      ThetaSnippetScore::default_instance_,
      ThetaSnippetScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaSnippetScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThetaSnippetScore));
  TopicKernelScoreConfig_descriptor_ = file->message_type(34);
  static const int TopicKernelScoreConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, probability_mass_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, cooccurrence_dictionary_name_),
  };
  TopicKernelScoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicKernelScoreConfig_descriptor_,
      TopicKernelScoreConfig::default_instance_,
      TopicKernelScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicKernelScoreConfig));
  TopicKernelScore_descriptor_ = file->message_type(35);
  static const int TopicKernelScore_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, kernel_purity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, kernel_contrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, average_kernel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, average_kernel_purity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, average_kernel_contrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, coherence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, average_coherence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, kernel_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, topic_name_),
  };
  TopicKernelScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicKernelScore_descriptor_,
      TopicKernelScore::default_instance_,
      TopicKernelScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicKernelScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicKernelScore));
  TopicMassPhiScoreConfig_descriptor_ = file->message_type(36);
  static const int TopicMassPhiScoreConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScoreConfig, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScoreConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScoreConfig, topic_name_),
  };
  TopicMassPhiScoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicMassPhiScoreConfig_descriptor_,
      TopicMassPhiScoreConfig::default_instance_,
      TopicMassPhiScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicMassPhiScoreConfig));
  TopicMassPhiScore_descriptor_ = file->message_type(37);
  static const int TopicMassPhiScore_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, topic_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, topic_mass_),
  };
  TopicMassPhiScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicMassPhiScore_descriptor_,
      TopicMassPhiScore::default_instance_,
      TopicMassPhiScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMassPhiScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicMassPhiScore));
  ClassPrecisionScoreConfig_descriptor_ = file->message_type(38);
  static const int ClassPrecisionScoreConfig_offsets_[1] = {
  };
  ClassPrecisionScoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassPrecisionScoreConfig_descriptor_,
      ClassPrecisionScoreConfig::default_instance_,
      ClassPrecisionScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassPrecisionScoreConfig));
  ClassPrecisionScore_descriptor_ = file->message_type(39);
  static const int ClassPrecisionScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScore, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScore, total_),
  };
  ClassPrecisionScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassPrecisionScore_descriptor_,
      ClassPrecisionScore::default_instance_,
      ClassPrecisionScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassPrecisionScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassPrecisionScore));
  PeakMemoryScoreConfig_descriptor_ = file->message_type(40);
  static const int PeakMemoryScoreConfig_offsets_[1] = {
  };
  PeakMemoryScoreConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeakMemoryScoreConfig_descriptor_,
      PeakMemoryScoreConfig::default_instance_,
      PeakMemoryScoreConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeakMemoryScoreConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeakMemoryScoreConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeakMemoryScoreConfig));
  PeakMemoryScore_descriptor_ = file->message_type(41);
  static const int PeakMemoryScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeakMemoryScore, value_),
  };
  PeakMemoryScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeakMemoryScore_descriptor_,
      PeakMemoryScore::default_instance_,
      PeakMemoryScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeakMemoryScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeakMemoryScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeakMemoryScore));
  TopicModel_descriptor_ = file->message_type(42);
  static const int TopicModel_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, token_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, internals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, topic_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, operation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, seed_),
  };
  TopicModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicModel_descriptor_,
      TopicModel::default_instance_,
      TopicModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicModel));
  TopicModel_TopicModelInternals_descriptor_ = TopicModel_descriptor_->nested_type(0);
  static const int TopicModel_TopicModelInternals_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel_TopicModelInternals, n_wt_),
  };
  TopicModel_TopicModelInternals_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicModel_TopicModelInternals_descriptor_,
      TopicModel_TopicModelInternals::default_instance_,
      TopicModel_TopicModelInternals_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel_TopicModelInternals, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicModel_TopicModelInternals, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicModel_TopicModelInternals));
  TopicModel_OperationType_descriptor_ = TopicModel_descriptor_->enum_type(0);
  ThetaMatrix_descriptor_ = file->message_type(43);
  static const int ThetaMatrix_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, item_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, item_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, topic_index_),
  };
  ThetaMatrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThetaMatrix_descriptor_,
      ThetaMatrix::default_instance_,
      ThetaMatrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThetaMatrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThetaMatrix));
  CollectionParserConfig_descriptor_ = file->message_type(44);
  static const int CollectionParserConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, docword_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, vocab_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, target_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, num_items_per_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, use_unity_based_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, name_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, cooccurrence_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, gather_cooc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, cooccurrence_class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, use_symmetric_cooc_values_),
  };
  CollectionParserConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectionParserConfig_descriptor_,
      CollectionParserConfig::default_instance_,
      CollectionParserConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionParserConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectionParserConfig));
  CollectionParserConfig_Format_descriptor_ = CollectionParserConfig_descriptor_->enum_type(0);
  CollectionParserConfig_NameType_descriptor_ = CollectionParserConfig_descriptor_->enum_type(1);
  InitializeModelArgs_descriptor_ = file->message_type(45);
  static const int InitializeModelArgs_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, dictionary_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, disk_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, batch_filename_),
  };
  InitializeModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitializeModelArgs_descriptor_,
      InitializeModelArgs::default_instance_,
      InitializeModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitializeModelArgs));
  InitializeModelArgs_Filter_descriptor_ = InitializeModelArgs_descriptor_->nested_type(0);
  static const int InitializeModelArgs_Filter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs_Filter, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs_Filter, min_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs_Filter, max_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs_Filter, min_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs_Filter, max_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs_Filter, min_total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs_Filter, min_one_item_count_),
  };
  InitializeModelArgs_Filter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitializeModelArgs_Filter_descriptor_,
      InitializeModelArgs_Filter::default_instance_,
      InitializeModelArgs_Filter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs_Filter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeModelArgs_Filter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitializeModelArgs_Filter));
  InitializeModelArgs_SourceType_descriptor_ = InitializeModelArgs_descriptor_->enum_type(0);
  DictionaryData_descriptor_ = file->message_type(46);
  static const int DictionaryData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, token_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, token_tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, token_df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, cooc_first_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, cooc_second_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, cooc_value_),
  };
  DictionaryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DictionaryData_descriptor_,
      DictionaryData::default_instance_,
      DictionaryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DictionaryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DictionaryData));
  FilterDictionaryArgs_descriptor_ = file->message_type(47);
  static const int FilterDictionaryArgs_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, dictionary_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, dictionary_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, min_df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, max_df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, min_df_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, max_df_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, min_tf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, max_tf_),
  };
  FilterDictionaryArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FilterDictionaryArgs_descriptor_,
      FilterDictionaryArgs::default_instance_,
      FilterDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FilterDictionaryArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FilterDictionaryArgs));
  GatherDictionaryArgs_descriptor_ = file->message_type(48);
  static const int GatherDictionaryArgs_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, dictionary_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, data_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, cooc_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, vocab_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, symmetric_cooc_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, batch_path_),
  };
  GatherDictionaryArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatherDictionaryArgs_descriptor_,
      GatherDictionaryArgs::default_instance_,
      GatherDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherDictionaryArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatherDictionaryArgs));
  GetDictionaryArgs_descriptor_ = file->message_type(49);
  static const int GetDictionaryArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDictionaryArgs, dictionary_name_),
  };
  GetDictionaryArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDictionaryArgs_descriptor_,
      GetDictionaryArgs::default_instance_,
      GetDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDictionaryArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDictionaryArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDictionaryArgs));
  GetTopicModelArgs_descriptor_ = file->message_type(50);
  static const int GetTopicModelArgs_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, use_sparse_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, matrix_layout_),
  };
  GetTopicModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTopicModelArgs_descriptor_,
      GetTopicModelArgs::default_instance_,
      GetTopicModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTopicModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTopicModelArgs));
  GetTopicModelArgs_RequestType_descriptor_ = GetTopicModelArgs_descriptor_->enum_type(0);
  GetTopicModelArgs_MatrixLayout_descriptor_ = GetTopicModelArgs_descriptor_->enum_type(1);
  GetThetaMatrixArgs_descriptor_ = file->message_type(51);
  static const int GetThetaMatrixArgs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, topic_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, use_sparse_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, eps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, matrix_layout_),
  };
  GetThetaMatrixArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetThetaMatrixArgs_descriptor_,
      GetThetaMatrixArgs::default_instance_,
      GetThetaMatrixArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetThetaMatrixArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetThetaMatrixArgs));
  GetThetaMatrixArgs_MatrixLayout_descriptor_ = GetThetaMatrixArgs_descriptor_->enum_type(0);
  GetScoreValueArgs_descriptor_ = file->message_type(52);
  static const int GetScoreValueArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreValueArgs, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreValueArgs, score_name_),
  };
  GetScoreValueArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetScoreValueArgs_descriptor_,
      GetScoreValueArgs::default_instance_,
      GetScoreValueArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreValueArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreValueArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetScoreValueArgs));
  GetScoreArrayArgs_descriptor_ = file->message_type(53);
  static const int GetScoreArrayArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreArrayArgs, score_name_),
  };
  GetScoreArrayArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetScoreArrayArgs_descriptor_,
      GetScoreArrayArgs::default_instance_,
      GetScoreArrayArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreArrayArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetScoreArrayArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetScoreArrayArgs));
  ExportModelArgs_descriptor_ = file->message_type(54);
  static const int ExportModelArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportModelArgs, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportModelArgs, model_name_),
  };
  ExportModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExportModelArgs_descriptor_,
      ExportModelArgs::default_instance_,
      ExportModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExportModelArgs));
  ImportModelArgs_descriptor_ = file->message_type(55);
  static const int ImportModelArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportModelArgs, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportModelArgs, model_name_),
  };
  ImportModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImportModelArgs_descriptor_,
      ImportModelArgs::default_instance_,
      ImportModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImportModelArgs));
  AttachModelArgs_descriptor_ = file->message_type(56);
  static const int AttachModelArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachModelArgs, model_name_),
  };
  AttachModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttachModelArgs_descriptor_,
      AttachModelArgs::default_instance_,
      AttachModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttachModelArgs));
  ProcessBatchesArgs_descriptor_ = file->message_type(57);
  static const int ProcessBatchesArgs_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, nwt_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, batch_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, pwt_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, inner_iterations_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, regularizer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, regularizer_tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, class_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, reuse_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, opt_for_avx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, theta_matrix_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, batch_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, predict_class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, use_random_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, topic_name_),
  };
  ProcessBatchesArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessBatchesArgs_descriptor_,
      ProcessBatchesArgs::default_instance_,
      ProcessBatchesArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessBatchesArgs));
  ProcessBatchesArgs_ThetaMatrixType_descriptor_ = ProcessBatchesArgs_descriptor_->enum_type(0);
  ProcessBatchesResult_descriptor_ = file->message_type(58);
  static const int ProcessBatchesResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesResult, score_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesResult, theta_matrix_),
  };
  ProcessBatchesResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessBatchesResult_descriptor_,
      ProcessBatchesResult::default_instance_,
      ProcessBatchesResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessBatchesResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessBatchesResult));
  MergeModelArgs_descriptor_ = file->message_type(59);
  static const int MergeModelArgs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, nwt_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, nwt_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, source_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, topic_name_),
  };
  MergeModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MergeModelArgs_descriptor_,
      MergeModelArgs::default_instance_,
      MergeModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MergeModelArgs));
  RegularizeModelArgs_descriptor_ = file->message_type(60);
  static const int RegularizeModelArgs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, rwt_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, pwt_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, nwt_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, regularizer_settings_),
  };
  RegularizeModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegularizeModelArgs_descriptor_,
      RegularizeModelArgs::default_instance_,
      RegularizeModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularizeModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegularizeModelArgs));
  NormalizeModelArgs_descriptor_ = file->message_type(61);
  static const int NormalizeModelArgs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeModelArgs, pwt_target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeModelArgs, nwt_source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeModelArgs, rwt_source_name_),
  };
  NormalizeModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NormalizeModelArgs_descriptor_,
      NormalizeModelArgs::default_instance_,
      NormalizeModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalizeModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NormalizeModelArgs));
  ImportDictionaryArgs_descriptor_ = file->message_type(62);
  static const int ImportDictionaryArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDictionaryArgs, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDictionaryArgs, dictionary_name_),
  };
  ImportDictionaryArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImportDictionaryArgs_descriptor_,
      ImportDictionaryArgs::default_instance_,
      ImportDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDictionaryArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportDictionaryArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImportDictionaryArgs));
  ExportDictionaryArgs_descriptor_ = file->message_type(63);
  static const int ExportDictionaryArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportDictionaryArgs, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportDictionaryArgs, dictionary_name_),
  };
  ExportDictionaryArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExportDictionaryArgs_descriptor_,
      ExportDictionaryArgs::default_instance_,
      ExportDictionaryArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportDictionaryArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExportDictionaryArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExportDictionaryArgs));
  CopyRequestResultArgs_descriptor_ = file->message_type(64);
  static const int CopyRequestResultArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyRequestResultArgs, request_type_),
  };
  CopyRequestResultArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CopyRequestResultArgs_descriptor_,
      CopyRequestResultArgs::default_instance_,
      CopyRequestResultArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyRequestResultArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyRequestResultArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CopyRequestResultArgs));
  CopyRequestResultArgs_RequestType_descriptor_ = CopyRequestResultArgs_descriptor_->enum_type(0);
  DuplicateMasterComponentArgs_descriptor_ = file->message_type(65);
  static const int DuplicateMasterComponentArgs_offsets_[1] = {
  };
  DuplicateMasterComponentArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuplicateMasterComponentArgs_descriptor_,
      DuplicateMasterComponentArgs::default_instance_,
      DuplicateMasterComponentArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateMasterComponentArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateMasterComponentArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuplicateMasterComponentArgs));
  GetMasterComponentInfoArgs_descriptor_ = file->message_type(66);
  static const int GetMasterComponentInfoArgs_offsets_[1] = {
  };
  GetMasterComponentInfoArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMasterComponentInfoArgs_descriptor_,
      GetMasterComponentInfoArgs::default_instance_,
      GetMasterComponentInfoArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMasterComponentInfoArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMasterComponentInfoArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMasterComponentInfoArgs));
  MasterComponentInfo_descriptor_ = file->message_type(67);
  static const int MasterComponentInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, master_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, regularizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, dictionary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, cache_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, processor_queue_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, batch_),
  };
  MasterComponentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterComponentInfo_descriptor_,
      MasterComponentInfo::default_instance_,
      MasterComponentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterComponentInfo));
  MasterComponentInfo_RegularizerInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(0);
  static const int MasterComponentInfo_RegularizerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_RegularizerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_RegularizerInfo, type_),
  };
  MasterComponentInfo_RegularizerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterComponentInfo_RegularizerInfo_descriptor_,
      MasterComponentInfo_RegularizerInfo::default_instance_,
      MasterComponentInfo_RegularizerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_RegularizerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_RegularizerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterComponentInfo_RegularizerInfo));
  MasterComponentInfo_ScoreInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(1);
  static const int MasterComponentInfo_ScoreInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ScoreInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ScoreInfo, type_),
  };
  MasterComponentInfo_ScoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterComponentInfo_ScoreInfo_descriptor_,
      MasterComponentInfo_ScoreInfo::default_instance_,
      MasterComponentInfo_ScoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ScoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ScoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterComponentInfo_ScoreInfo));
  MasterComponentInfo_DictionaryInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(2);
  static const int MasterComponentInfo_DictionaryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_DictionaryInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_DictionaryInfo, entries_count_),
  };
  MasterComponentInfo_DictionaryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterComponentInfo_DictionaryInfo_descriptor_,
      MasterComponentInfo_DictionaryInfo::default_instance_,
      MasterComponentInfo_DictionaryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_DictionaryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_DictionaryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterComponentInfo_DictionaryInfo));
  MasterComponentInfo_BatchInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(3);
  static const int MasterComponentInfo_BatchInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_BatchInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_BatchInfo, items_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_BatchInfo, token_count_),
  };
  MasterComponentInfo_BatchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterComponentInfo_BatchInfo_descriptor_,
      MasterComponentInfo_BatchInfo::default_instance_,
      MasterComponentInfo_BatchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_BatchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_BatchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterComponentInfo_BatchInfo));
  MasterComponentInfo_ModelInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(4);
  static const int MasterComponentInfo_ModelInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, topics_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, token_count_),
  };
  MasterComponentInfo_ModelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterComponentInfo_ModelInfo_descriptor_,
      MasterComponentInfo_ModelInfo::default_instance_,
      MasterComponentInfo_ModelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_ModelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterComponentInfo_ModelInfo));
  MasterComponentInfo_CacheEntryInfo_descriptor_ = MasterComponentInfo_descriptor_->nested_type(5);
  static const int MasterComponentInfo_CacheEntryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_CacheEntryInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_CacheEntryInfo, byte_size_),
  };
  MasterComponentInfo_CacheEntryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterComponentInfo_CacheEntryInfo_descriptor_,
      MasterComponentInfo_CacheEntryInfo::default_instance_,
      MasterComponentInfo_CacheEntryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_CacheEntryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterComponentInfo_CacheEntryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterComponentInfo_CacheEntryInfo));
  ImportBatchesArgs_descriptor_ = file->message_type(68);
  static const int ImportBatchesArgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportBatchesArgs, batch_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportBatchesArgs, batch_),
  };
  ImportBatchesArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImportBatchesArgs_descriptor_,
      ImportBatchesArgs::default_instance_,
      ImportBatchesArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportBatchesArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportBatchesArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImportBatchesArgs));
  AwaitOperationArgs_descriptor_ = file->message_type(69);
  static const int AwaitOperationArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwaitOperationArgs, timeout_milliseconds_),
  };
  AwaitOperationArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AwaitOperationArgs_descriptor_,
      AwaitOperationArgs::default_instance_,
      AwaitOperationArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwaitOperationArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwaitOperationArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AwaitOperationArgs));
  MasterModelConfig_descriptor_ = file->message_type(70);
  static const int MasterModelConfig_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, class_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, score_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, regularizer_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, pwt_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, nwt_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, inner_iterations_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, reuse_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, opt_for_avx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, disk_cache_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, cache_theta_),
  };
  MasterModelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterModelConfig_descriptor_,
      MasterModelConfig::default_instance_,
      MasterModelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterModelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterModelConfig));
  FitOfflineMasterModelArgs_descriptor_ = file->message_type(71);
  static const int FitOfflineMasterModelArgs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, batch_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, batch_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, passes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, batch_folder_),
  };
  FitOfflineMasterModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FitOfflineMasterModelArgs_descriptor_,
      FitOfflineMasterModelArgs::default_instance_,
      FitOfflineMasterModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOfflineMasterModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FitOfflineMasterModelArgs));
  FitOnlineMasterModelArgs_descriptor_ = file->message_type(72);
  static const int FitOnlineMasterModelArgs_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, batch_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, batch_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, update_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, apply_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, decay_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, async_),
  };
  FitOnlineMasterModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FitOnlineMasterModelArgs_descriptor_,
      FitOnlineMasterModelArgs::default_instance_,
      FitOnlineMasterModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FitOnlineMasterModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FitOnlineMasterModelArgs));
  TransformMasterModelArgs_descriptor_ = file->message_type(73);
  static const int TransformMasterModelArgs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, batch_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, theta_matrix_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, predict_class_id_),
  };
  TransformMasterModelArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformMasterModelArgs_descriptor_,
      TransformMasterModelArgs::default_instance_,
      TransformMasterModelArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformMasterModelArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformMasterModelArgs));
  TransformMasterModelArgs_ThetaMatrixType_descriptor_ = TransformMasterModelArgs_descriptor_->enum_type(0);
  ConfigureLoggingArgs_descriptor_ = file->message_type(74);
  static const int ConfigureLoggingArgs_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, log_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, minloglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, stderrthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, logtostderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, colorlogtostderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, alsologtostderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, logbufsecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, logbuflevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, max_log_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, stop_logging_if_full_disk_),
  };
  ConfigureLoggingArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigureLoggingArgs_descriptor_,
      ConfigureLoggingArgs::default_instance_,
      ConfigureLoggingArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigureLoggingArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigureLoggingArgs));
  ClearThetaCacheArgs_descriptor_ = file->message_type(75);
  static const int ClearThetaCacheArgs_offsets_[1] = {
  };
  ClearThetaCacheArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearThetaCacheArgs_descriptor_,
      ClearThetaCacheArgs::default_instance_,
      ClearThetaCacheArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearThetaCacheArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearThetaCacheArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearThetaCacheArgs));
  ClearScoreCacheArgs_descriptor_ = file->message_type(76);
  static const int ClearScoreCacheArgs_offsets_[1] = {
  };
  ClearScoreCacheArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearScoreCacheArgs_descriptor_,
      ClearScoreCacheArgs::default_instance_,
      ClearScoreCacheArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearScoreCacheArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearScoreCacheArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearScoreCacheArgs));
  ClearScoreArrayCacheArgs_descriptor_ = file->message_type(77);
  static const int ClearScoreArrayCacheArgs_offsets_[1] = {
  };
  ClearScoreArrayCacheArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearScoreArrayCacheArgs_descriptor_,
      ClearScoreArrayCacheArgs::default_instance_,
      ClearScoreArrayCacheArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearScoreArrayCacheArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearScoreArrayCacheArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearScoreArrayCacheArgs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_artm_2fmessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleArray_descriptor_, &DoubleArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatArray_descriptor_, &FloatArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoolArray_descriptor_, &BoolArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntArray_descriptor_, &IntArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringArray_descriptor_, &StringArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Batch_descriptor_, &Batch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegularizerSettings_descriptor_, &RegularizerSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegularizerConfig_descriptor_, &RegularizerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmoothSparseThetaConfig_descriptor_, &SmoothSparseThetaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmoothSparsePhiConfig_descriptor_, &SmoothSparsePhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecorrelatorPhiConfig_descriptor_, &DecorrelatorPhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiLanguagePhiConfig_descriptor_, &MultiLanguagePhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LabelRegularizationPhiConfig_descriptor_, &LabelRegularizationPhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecifiedSparsePhiConfig_descriptor_, &SpecifiedSparsePhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImproveCoherencePhiConfig_descriptor_, &ImproveCoherencePhiConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmoothPtdwConfig_descriptor_, &SmoothPtdwConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicSelectionThetaConfig_descriptor_, &TopicSelectionThetaConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformConfig_descriptor_, &TransformConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreConfig_descriptor_, &ScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreData_descriptor_, &ScoreData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreDataArray_descriptor_, &ScoreDataArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PerplexityScoreConfig_descriptor_, &PerplexityScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PerplexityScore_descriptor_, &PerplexityScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparsityThetaScoreConfig_descriptor_, &SparsityThetaScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparsityThetaScore_descriptor_, &SparsityThetaScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparsityPhiScoreConfig_descriptor_, &SparsityPhiScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparsityPhiScore_descriptor_, &SparsityPhiScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemsProcessedScoreConfig_descriptor_, &ItemsProcessedScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemsProcessedScore_descriptor_, &ItemsProcessedScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopTokensScoreConfig_descriptor_, &TopTokensScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopTokensScore_descriptor_, &TopTokensScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThetaSnippetScoreConfig_descriptor_, &ThetaSnippetScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThetaSnippetScore_descriptor_, &ThetaSnippetScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicKernelScoreConfig_descriptor_, &TopicKernelScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicKernelScore_descriptor_, &TopicKernelScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicMassPhiScoreConfig_descriptor_, &TopicMassPhiScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicMassPhiScore_descriptor_, &TopicMassPhiScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassPrecisionScoreConfig_descriptor_, &ClassPrecisionScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassPrecisionScore_descriptor_, &ClassPrecisionScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeakMemoryScoreConfig_descriptor_, &PeakMemoryScoreConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeakMemoryScore_descriptor_, &PeakMemoryScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicModel_descriptor_, &TopicModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicModel_TopicModelInternals_descriptor_, &TopicModel_TopicModelInternals::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThetaMatrix_descriptor_, &ThetaMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectionParserConfig_descriptor_, &CollectionParserConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitializeModelArgs_descriptor_, &InitializeModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitializeModelArgs_Filter_descriptor_, &InitializeModelArgs_Filter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DictionaryData_descriptor_, &DictionaryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FilterDictionaryArgs_descriptor_, &FilterDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatherDictionaryArgs_descriptor_, &GatherDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDictionaryArgs_descriptor_, &GetDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTopicModelArgs_descriptor_, &GetTopicModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetThetaMatrixArgs_descriptor_, &GetThetaMatrixArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetScoreValueArgs_descriptor_, &GetScoreValueArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetScoreArrayArgs_descriptor_, &GetScoreArrayArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExportModelArgs_descriptor_, &ExportModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImportModelArgs_descriptor_, &ImportModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttachModelArgs_descriptor_, &AttachModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessBatchesArgs_descriptor_, &ProcessBatchesArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessBatchesResult_descriptor_, &ProcessBatchesResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MergeModelArgs_descriptor_, &MergeModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegularizeModelArgs_descriptor_, &RegularizeModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NormalizeModelArgs_descriptor_, &NormalizeModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImportDictionaryArgs_descriptor_, &ImportDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExportDictionaryArgs_descriptor_, &ExportDictionaryArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CopyRequestResultArgs_descriptor_, &CopyRequestResultArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuplicateMasterComponentArgs_descriptor_, &DuplicateMasterComponentArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMasterComponentInfoArgs_descriptor_, &GetMasterComponentInfoArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterComponentInfo_descriptor_, &MasterComponentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterComponentInfo_RegularizerInfo_descriptor_, &MasterComponentInfo_RegularizerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterComponentInfo_ScoreInfo_descriptor_, &MasterComponentInfo_ScoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterComponentInfo_DictionaryInfo_descriptor_, &MasterComponentInfo_DictionaryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterComponentInfo_BatchInfo_descriptor_, &MasterComponentInfo_BatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterComponentInfo_ModelInfo_descriptor_, &MasterComponentInfo_ModelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterComponentInfo_CacheEntryInfo_descriptor_, &MasterComponentInfo_CacheEntryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImportBatchesArgs_descriptor_, &ImportBatchesArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AwaitOperationArgs_descriptor_, &AwaitOperationArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterModelConfig_descriptor_, &MasterModelConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FitOfflineMasterModelArgs_descriptor_, &FitOfflineMasterModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FitOnlineMasterModelArgs_descriptor_, &FitOnlineMasterModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformMasterModelArgs_descriptor_, &TransformMasterModelArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigureLoggingArgs_descriptor_, &ConfigureLoggingArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearThetaCacheArgs_descriptor_, &ClearThetaCacheArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearScoreCacheArgs_descriptor_, &ClearScoreCacheArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearScoreArrayCacheArgs_descriptor_, &ClearScoreArrayCacheArgs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_artm_2fmessages_2eproto() {
  delete DoubleArray::default_instance_;
  delete DoubleArray_reflection_;
  delete FloatArray::default_instance_;
  delete FloatArray_reflection_;
  delete BoolArray::default_instance_;
  delete BoolArray_reflection_;
  delete IntArray::default_instance_;
  delete IntArray_reflection_;
  delete StringArray::default_instance_;
  delete StringArray_reflection_;
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Batch::default_instance_;
  delete Batch_reflection_;
  delete RegularizerSettings::default_instance_;
  delete RegularizerSettings_reflection_;
  delete RegularizerConfig::default_instance_;
  delete RegularizerConfig_reflection_;
  delete SmoothSparseThetaConfig::default_instance_;
  delete SmoothSparseThetaConfig_reflection_;
  delete SmoothSparsePhiConfig::default_instance_;
  delete SmoothSparsePhiConfig_reflection_;
  delete DecorrelatorPhiConfig::default_instance_;
  delete DecorrelatorPhiConfig_reflection_;
  delete MultiLanguagePhiConfig::default_instance_;
  delete MultiLanguagePhiConfig_reflection_;
  delete LabelRegularizationPhiConfig::default_instance_;
  delete LabelRegularizationPhiConfig_reflection_;
  delete SpecifiedSparsePhiConfig::default_instance_;
  delete SpecifiedSparsePhiConfig_reflection_;
  delete SpecifiedSparsePhiConfig::_default_class_id_;
  delete ImproveCoherencePhiConfig::default_instance_;
  delete ImproveCoherencePhiConfig_reflection_;
  delete SmoothPtdwConfig::default_instance_;
  delete SmoothPtdwConfig_reflection_;
  delete TopicSelectionThetaConfig::default_instance_;
  delete TopicSelectionThetaConfig_reflection_;
  delete TransformConfig::default_instance_;
  delete TransformConfig_reflection_;
  delete ScoreConfig::default_instance_;
  delete ScoreConfig_reflection_;
  delete ScoreData::default_instance_;
  delete ScoreData_reflection_;
  delete ScoreDataArray::default_instance_;
  delete ScoreDataArray_reflection_;
  delete PerplexityScoreConfig::default_instance_;
  delete PerplexityScoreConfig_reflection_;
  delete PerplexityScore::default_instance_;
  delete PerplexityScore_reflection_;
  delete SparsityThetaScoreConfig::default_instance_;
  delete SparsityThetaScoreConfig_reflection_;
  delete SparsityThetaScore::default_instance_;
  delete SparsityThetaScore_reflection_;
  delete SparsityPhiScoreConfig::default_instance_;
  delete SparsityPhiScoreConfig_reflection_;
  delete SparsityPhiScoreConfig::_default_class_id_;
  delete SparsityPhiScore::default_instance_;
  delete SparsityPhiScore_reflection_;
  delete ItemsProcessedScoreConfig::default_instance_;
  delete ItemsProcessedScoreConfig_reflection_;
  delete ItemsProcessedScore::default_instance_;
  delete ItemsProcessedScore_reflection_;
  delete TopTokensScoreConfig::default_instance_;
  delete TopTokensScoreConfig_reflection_;
  delete TopTokensScoreConfig::_default_class_id_;
  delete TopTokensScore::default_instance_;
  delete TopTokensScore_reflection_;
  delete ThetaSnippetScoreConfig::default_instance_;
  delete ThetaSnippetScoreConfig_reflection_;
  delete ThetaSnippetScore::default_instance_;
  delete ThetaSnippetScore_reflection_;
  delete TopicKernelScoreConfig::default_instance_;
  delete TopicKernelScoreConfig_reflection_;
  delete TopicKernelScoreConfig::_default_class_id_;
  delete TopicKernelScore::default_instance_;
  delete TopicKernelScore_reflection_;
  delete TopicMassPhiScoreConfig::default_instance_;
  delete TopicMassPhiScoreConfig_reflection_;
  delete TopicMassPhiScoreConfig::_default_class_id_;
  delete TopicMassPhiScore::default_instance_;
  delete TopicMassPhiScore_reflection_;
  delete ClassPrecisionScoreConfig::default_instance_;
  delete ClassPrecisionScoreConfig_reflection_;
  delete ClassPrecisionScore::default_instance_;
  delete ClassPrecisionScore_reflection_;
  delete PeakMemoryScoreConfig::default_instance_;
  delete PeakMemoryScoreConfig_reflection_;
  delete PeakMemoryScore::default_instance_;
  delete PeakMemoryScore_reflection_;
  delete TopicModel::default_instance_;
  delete TopicModel_reflection_;
  delete TopicModel::_default_name_;
  delete TopicModel_TopicModelInternals::default_instance_;
  delete TopicModel_TopicModelInternals_reflection_;
  delete ThetaMatrix::default_instance_;
  delete ThetaMatrix_reflection_;
  delete CollectionParserConfig::default_instance_;
  delete CollectionParserConfig_reflection_;
  delete InitializeModelArgs::default_instance_;
  delete InitializeModelArgs_reflection_;
  delete InitializeModelArgs_Filter::default_instance_;
  delete InitializeModelArgs_Filter_reflection_;
  delete DictionaryData::default_instance_;
  delete DictionaryData_reflection_;
  delete FilterDictionaryArgs::default_instance_;
  delete FilterDictionaryArgs_reflection_;
  delete GatherDictionaryArgs::default_instance_;
  delete GatherDictionaryArgs_reflection_;
  delete GetDictionaryArgs::default_instance_;
  delete GetDictionaryArgs_reflection_;
  delete GetTopicModelArgs::default_instance_;
  delete GetTopicModelArgs_reflection_;
  delete GetThetaMatrixArgs::default_instance_;
  delete GetThetaMatrixArgs_reflection_;
  delete GetScoreValueArgs::default_instance_;
  delete GetScoreValueArgs_reflection_;
  delete GetScoreArrayArgs::default_instance_;
  delete GetScoreArrayArgs_reflection_;
  delete ExportModelArgs::default_instance_;
  delete ExportModelArgs_reflection_;
  delete ImportModelArgs::default_instance_;
  delete ImportModelArgs_reflection_;
  delete AttachModelArgs::default_instance_;
  delete AttachModelArgs_reflection_;
  delete ProcessBatchesArgs::default_instance_;
  delete ProcessBatchesArgs_reflection_;
  delete ProcessBatchesResult::default_instance_;
  delete ProcessBatchesResult_reflection_;
  delete MergeModelArgs::default_instance_;
  delete MergeModelArgs_reflection_;
  delete RegularizeModelArgs::default_instance_;
  delete RegularizeModelArgs_reflection_;
  delete NormalizeModelArgs::default_instance_;
  delete NormalizeModelArgs_reflection_;
  delete ImportDictionaryArgs::default_instance_;
  delete ImportDictionaryArgs_reflection_;
  delete ExportDictionaryArgs::default_instance_;
  delete ExportDictionaryArgs_reflection_;
  delete CopyRequestResultArgs::default_instance_;
  delete CopyRequestResultArgs_reflection_;
  delete DuplicateMasterComponentArgs::default_instance_;
  delete DuplicateMasterComponentArgs_reflection_;
  delete GetMasterComponentInfoArgs::default_instance_;
  delete GetMasterComponentInfoArgs_reflection_;
  delete MasterComponentInfo::default_instance_;
  delete MasterComponentInfo_reflection_;
  delete MasterComponentInfo_RegularizerInfo::default_instance_;
  delete MasterComponentInfo_RegularizerInfo_reflection_;
  delete MasterComponentInfo_ScoreInfo::default_instance_;
  delete MasterComponentInfo_ScoreInfo_reflection_;
  delete MasterComponentInfo_DictionaryInfo::default_instance_;
  delete MasterComponentInfo_DictionaryInfo_reflection_;
  delete MasterComponentInfo_BatchInfo::default_instance_;
  delete MasterComponentInfo_BatchInfo_reflection_;
  delete MasterComponentInfo_ModelInfo::default_instance_;
  delete MasterComponentInfo_ModelInfo_reflection_;
  delete MasterComponentInfo_CacheEntryInfo::default_instance_;
  delete MasterComponentInfo_CacheEntryInfo_reflection_;
  delete ImportBatchesArgs::default_instance_;
  delete ImportBatchesArgs_reflection_;
  delete AwaitOperationArgs::default_instance_;
  delete AwaitOperationArgs_reflection_;
  delete MasterModelConfig::default_instance_;
  delete MasterModelConfig_reflection_;
  delete MasterModelConfig::_default_pwt_name_;
  delete MasterModelConfig::_default_nwt_name_;
  delete FitOfflineMasterModelArgs::default_instance_;
  delete FitOfflineMasterModelArgs_reflection_;
  delete FitOnlineMasterModelArgs::default_instance_;
  delete FitOnlineMasterModelArgs_reflection_;
  delete TransformMasterModelArgs::default_instance_;
  delete TransformMasterModelArgs_reflection_;
  delete ConfigureLoggingArgs::default_instance_;
  delete ConfigureLoggingArgs_reflection_;
  delete ClearThetaCacheArgs::default_instance_;
  delete ClearThetaCacheArgs_reflection_;
  delete ClearScoreCacheArgs::default_instance_;
  delete ClearScoreCacheArgs_reflection_;
  delete ClearScoreArrayCacheArgs::default_instance_;
  delete ClearScoreArrayCacheArgs_reflection_;
}

void protobuf_AddDesc_artm_2fmessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023artm/messages.proto\022\004artm\" \n\013DoubleArr"
    "ay\022\021\n\005value\030\001 \003(\001B\002\020\001\"\037\n\nFloatArray\022\021\n\005v"
    "alue\030\001 \003(\002B\002\020\001\"\036\n\tBoolArray\022\021\n\005value\030\001 \003"
    "(\010B\002\020\001\"\035\n\010IntArray\022\021\n\005value\030\001 \003(\005B\002\020\001\"\034\n"
    "\013StringArray\022\r\n\005value\030\001 \003(\t\"I\n\004Item\022\n\n\002i"
    "d\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\020\n\010token_id\030\003 \003(\005"
    "\022\024\n\014token_weight\030\004 \003(\002\"c\n\005Batch\022\r\n\005token"
    "\030\001 \003(\t\022\020\n\010class_id\030\002 \003(\t\022\030\n\004item\030\003 \003(\0132\n"
    ".artm.Item\022\023\n\013description\030\004 \001(\t\022\n\n\002id\030\005 "
    "\001(\t\"d\n\023RegularizerSettings\022\014\n\004name\030\001 \001(\t"
    "\022\013\n\003tau\030\002 \001(\001\022#\n\033use_relative_regulariza"
    "tion\030\003 \001(\010\022\r\n\005gamma\030\004 \001(\001\"\300\002\n\021Regularize"
    "rConfig\022\014\n\004name\030\001 \001(\t\022*\n\004type\030\002 \001(\0162\034.ar"
    "tm.RegularizerConfig.Type\022\016\n\006config\030\003 \001("
    "\014\022\013\n\003tau\030\004 \001(\002\"\323\001\n\004Type\022\025\n\021SmoothSparseT"
    "heta\020\000\022\023\n\017SmoothSparsePhi\020\001\022\023\n\017Decorrela"
    "torPhi\020\002\022\024\n\020MultiLanguagePhi\020\003\022\032\n\026LabelR"
    "egularizationPhi\020\004\022\026\n\022SpecifiedSparsePhi"
    "\020\005\022\027\n\023ImproveCoherencePhi\020\006\022\016\n\nSmoothPtd"
    "w\020\007\022\027\n\023TopicSelectionTheta\020\010\"r\n\027SmoothSp"
    "arseThetaConfig\022\022\n\ntopic_name\030\001 \003(\t\022\022\n\na"
    "lpha_iter\030\002 \003(\002\022/\n\020transform_config\030\003 \001("
    "\0132\025.artm.TransformConfig\"\207\001\n\025SmoothSpars"
    "ePhiConfig\022\022\n\ntopic_name\030\001 \003(\t\022\020\n\010class_"
    "id\030\002 \003(\t\022\027\n\017dictionary_name\030\003 \001(\t\022/\n\020tra"
    "nsform_config\030\004 \001(\0132\025.artm.TransformConf"
    "ig\"=\n\025DecorrelatorPhiConfig\022\022\n\ntopic_nam"
    "e\030\001 \003(\t\022\020\n\010class_id\030\002 \003(\t\"\030\n\026MultiLangua"
    "gePhiConfig\"]\n\034LabelRegularizationPhiCon"
    "fig\022\022\n\ntopic_name\030\001 \003(\t\022\020\n\010class_id\030\002 \003("
    "\t\022\027\n\017dictionary_name\030\003 \001(\t\"\202\002\n\030Specified"
    "SparsePhiConfig\022\022\n\ntopic_name\030\001 \003(\t\022 \n\010c"
    "lass_id\030\002 \001(\t:\016@default_class\022\036\n\022max_ele"
    "ments_count\030\003 \001(\005:\00220\022#\n\025probability_thr"
    "eshold\030\004 \001(\002:\0040.99\022\?\n\004mode\030\005 \001(\0162#.artm."
    "SpecifiedSparsePhiConfig.Mode:\014SparseTop"
    "ics\"*\n\004Mode\022\020\n\014SparseTopics\020\000\022\020\n\014SparseT"
    "okens\020\001\"Z\n\031ImproveCoherencePhiConfig\022\022\n\n"
    "topic_name\030\001 \003(\t\022\020\n\010class_id\030\002 \003(\t\022\027\n\017di"
    "ctionary_name\030\003 \001(\t\"\244\001\n\020SmoothPtdwConfig"
    "\0228\n\004type\030\001 \001(\0162\033.artm.SmoothPtdwConfig.T"
    "ype:\rMovingAverage\022\022\n\006window\030\003 \001(\005:\00210\022\024"
    "\n\tthreshold\030\004 \001(\001:\0011\",\n\004Type\022\021\n\rMovingAv"
    "erage\020\001\022\021\n\rMovingProduct\020\002\"X\n\031TopicSelec"
    "tionThetaConfig\022\022\n\ntopic_name\030\001 \003(\t\022\023\n\013t"
    "opic_value\030\002 \003(\002\022\022\n\nalpha_iter\030\003 \003(\002\"\262\001\n"
    "\017TransformConfig\022E\n\016transform_type\030\001 \001(\016"
    "2#.artm.TransformConfig.TransformType:\010C"
    "onstant\022\014\n\001n\030\002 \001(\001:\0011\022\014\n\001a\030\003 \001(\001:\0011\"<\n\rT"
    "ransformType\022\r\n\tLogarithm\020\000\022\016\n\nPolynomia"
    "l\020\001\022\014\n\010Constant\020\002\"\212\002\n\013ScoreConfig\022\014\n\004nam"
    "e\030\001 \001(\t\022$\n\004type\030\002 \001(\0162\026.artm.ScoreConfig"
    ".Type\022\016\n\006config\030\003 \001(\014\"\266\001\n\004Type\022\016\n\nPerple"
    "xity\020\000\022\021\n\rSparsityTheta\020\001\022\017\n\013SparsityPhi"
    "\020\002\022\022\n\016ItemsProcessed\020\003\022\r\n\tTopTokens\020\004\022\020\n"
    "\014ThetaSnippet\020\005\022\017\n\013TopicKernel\020\006\022\020\n\014Topi"
    "cMassPhi\020\007\022\022\n\016ClassPrecision\020\010\022\016\n\nPeakMe"
    "mory\020\t\"\204\002\n\tScoreData\022\014\n\004name\030\001 \001(\t\022\"\n\004ty"
    "pe\030\002 \001(\0162\024.artm.ScoreData.Type\022\014\n\004data\030\003"
    " \001(\014\"\266\001\n\004Type\022\016\n\nPerplexity\020\000\022\021\n\rSparsit"
    "yTheta\020\001\022\017\n\013SparsityPhi\020\002\022\022\n\016ItemsProces"
    "sed\020\003\022\r\n\tTopTokens\020\004\022\020\n\014ThetaSnippet\020\005\022\017"
    "\n\013TopicKernel\020\006\022\020\n\014TopicMassPhi\020\007\022\022\n\016Cla"
    "ssPrecision\020\010\022\016\n\nPeakMemory\020\t\"0\n\016ScoreDa"
    "taArray\022\036\n\005score\030\001 \003(\0132\017.artm.ScoreData\""
    "\223\002\n\025PerplexityScoreConfig\022J\n\nmodel_type\030"
    "\003 \001(\0162 .artm.PerplexityScoreConfig.Type:"
    "\024UnigramDocumentModel\022\027\n\017dictionary_name"
    "\030\004 \001(\t\022\"\n\022theta_sparsity_eps\030\005 \001(\002:\0061e-0"
    "37\022!\n\031theta_sparsity_topic_name\030\006 \003(\t\022\020\n"
    "\010class_id\030\007 \003(\t\"<\n\004Type\022\030\n\024UnigramDocume"
    "ntModel\020\000\022\032\n\026UnigramCollectionModel\020\001\"\274\001"
    "\n\017PerplexityScore\022\r\n\005value\030\001 \001(\001\022\013\n\003raw\030"
    "\002 \001(\001\022\022\n\nnormalizer\030\003 \001(\001\022\022\n\nzero_words\030"
    "\004 \001(\003\022\034\n\024theta_sparsity_value\030\005 \001(\001\022\"\n\032t"
    "heta_sparsity_zero_topics\030\006 \001(\005\022#\n\033theta"
    "_sparsity_total_topics\030\007 \001(\005\"C\n\030Sparsity"
    "ThetaScoreConfig\022\023\n\003eps\030\003 \001(\002:\0061e-037\022\022\n"
    "\ntopic_name\030\004 \003(\t\"N\n\022SparsityThetaScore\022"
    "\r\n\005value\030\001 \001(\001\022\023\n\013zero_topics\030\002 \001(\003\022\024\n\014t"
    "otal_topics\030\003 \001(\003\"c\n\026SparsityPhiScoreCon"
    "fig\022\023\n\003eps\030\001 \001(\002:\0061e-037\022 \n\010class_id\030\002 \001"
    "(\t:\016@default_class\022\022\n\ntopic_name\030\003 \003(\t\"L"
    "\n\020SparsityPhiScore\022\r\n\005value\030\001 \001(\001\022\023\n\013zer"
    "o_tokens\030\002 \001(\003\022\024\n\014total_tokens\030\003 \001(\003\"\033\n\031"
    "ItemsProcessedScoreConfig\"\?\n\023ItemsProces"
    "sedScore\022\020\n\005value\030\001 \001(\005:\0010\022\026\n\013num_batche"
    "s\030\002 \001(\005:\0010\"\212\001\n\024TopTokensScoreConfig\022\026\n\nn"
    "um_tokens\030\001 \001(\005:\00210\022 \n\010class_id\030\002 \001(\t:\016@"
    "default_class\022\022\n\ntopic_name\030\003 \003(\t\022$\n\034coo"
    "ccurrence_dictionary_name\030\004 \001(\t\"\255\001\n\016TopT"
    "okensScore\022\023\n\013num_entries\030\001 \001(\005\022\022\n\ntopic"
    "_name\030\002 \003(\t\022\023\n\013topic_index\030\003 \003(\005\022\r\n\005toke"
    "n\030\004 \003(\t\022\016\n\006weight\030\005 \003(\002\022#\n\tcoherence\030\006 \001"
    "(\0132\020.artm.FloatArray\022\031\n\021average_coherenc"
    "e\030\007 \001(\002\"F\n\027ThetaSnippetScoreConfig\022\023\n\007it"
    "em_id\030\003 \003(\005B\002\020\001\022\026\n\nitem_count\030\004 \001(\005:\00210\""
    "F\n\021ThetaSnippetScore\022\017\n\007item_id\030\001 \003(\005\022 \n"
    "\006values\030\002 \003(\0132\020.artm.FloatArray\"\262\001\n\026Topi"
    "cKernelScoreConfig\022\023\n\003eps\030\001 \001(\002:\0061e-037\022"
    " \n\010class_id\030\002 \001(\t:\016@default_class\022\022\n\ntop"
    "ic_name\030\003 \003(\t\022\'\n\032probability_mass_thresh"
    "old\030\004 \001(\001:\0030.1\022$\n\034cooccurrence_dictionar"
    "y_name\030\005 \001(\t\"\377\002\n\020TopicKernelScore\022&\n\013ker"
    "nel_size\030\001 \001(\0132\021.artm.DoubleArray\022(\n\rker"
    "nel_purity\030\002 \001(\0132\021.artm.DoubleArray\022*\n\017k"
    "ernel_contrast\030\003 \001(\0132\021.artm.DoubleArray\022"
    "\033\n\023average_kernel_size\030\004 \001(\001\022\035\n\025average_"
    "kernel_purity\030\005 \001(\001\022\037\n\027average_kernel_co"
    "ntrast\030\006 \001(\001\022$\n\tcoherence\030\007 \001(\0132\021.artm.D"
    "oubleArray\022\031\n\021average_coherence\030\010 \001(\002\022(\n"
    "\rkernel_tokens\030\t \003(\0132\021.artm.StringArray\022"
    "%\n\ntopic_name\030\n \001(\0132\021.artm.StringArray\"d"
    "\n\027TopicMassPhiScoreConfig\022\023\n\003eps\030\001 \001(\002:\006"
    "1e-037\022 \n\010class_id\030\002 \001(\t:\016@default_class"
    "\022\022\n\ntopic_name\030\003 \003(\t\"_\n\021TopicMassPhiScor"
    "e\022\r\n\005value\030\001 \001(\001\022\022\n\ntopic_name\030\002 \003(\t\022\023\n\013"
    "topic_ratio\030\003 \003(\001\022\022\n\ntopic_mass\030\004 \003(\001\"\033\n"
    "\031ClassPrecisionScoreConfig\"B\n\023ClassPreci"
    "sionScore\022\r\n\005value\030\001 \001(\001\022\r\n\005error\030\002 \001(\001\022"
    "\r\n\005total\030\003 \001(\001\"\027\n\025PeakMemoryScoreConfig\""
    " \n\017PeakMemoryScore\022\r\n\005value\030\001 \001(\003\"\242\003\n\nTo"
    "picModel\022\024\n\004name\030\001 \001(\t:\006@model\022\024\n\014topics"
    "_count\030\002 \001(\005\022\022\n\ntopic_name\030\003 \003(\t\022\r\n\005toke"
    "n\030\004 \003(\t\022\'\n\rtoken_weights\030\005 \003(\0132\020.artm.Fl"
    "oatArray\022\020\n\010class_id\030\006 \003(\t\022\021\n\tinternals\030"
    "\007 \001(\014\022#\n\013topic_index\030\010 \003(\0132\016.artm.IntArr"
    "ay\0226\n\016operation_type\030\t \003(\0162\036.artm.TopicM"
    "odel.OperationType\022\014\n\004seed\030\n \001(\005\0325\n\023Topi"
    "cModelInternals\022\036\n\004n_wt\030\001 \003(\0132\020.artm.Flo"
    "atArray\"U\n\rOperationType\022\016\n\nInitialize\020\000"
    "\022\r\n\tIncrement\020\001\022\r\n\tOverwrite\020\002\022\n\n\006Remove"
    "\020\003\022\n\n\006Ignore\020\004\"\251\001\n\013ThetaMatrix\022\017\n\007item_i"
    "d\030\002 \003(\005\022&\n\014item_weights\030\003 \003(\0132\020.artm.Flo"
    "atArray\022\022\n\ntopic_name\030\004 \003(\t\022\024\n\014topics_co"
    "unt\030\005 \001(\005\022\022\n\nitem_title\030\006 \003(\t\022#\n\013topic_i"
    "ndex\030\007 \003(\0132\016.artm.IntArray\"\214\004\n\026Collectio"
    "nParserConfig\022B\n\006format\030\001 \001(\0162#.artm.Col"
    "lectionParserConfig.Format:\rBagOfWordsUc"
    "i\022\031\n\021docword_file_path\030\002 \001(\t\022\027\n\017vocab_fi"
    "le_path\030\003 \001(\t\022\025\n\rtarget_folder\030\004 \001(\t\022!\n\023"
    "num_items_per_batch\030\005 \001(\005:\0041000\022%\n\027use_u"
    "nity_based_indices\030\006 \001(\010:\004true\022>\n\tname_t"
    "ype\030\007 \001(\0162%.artm.CollectionParserConfig."
    "NameType:\004Guid\022\032\n\022cooccurrence_token\030\010 \003"
    "(\t\022\023\n\013gather_cooc\030\t \001(\010\022\035\n\025cooccurrence_"
    "class_id\030\n \003(\t\022(\n\031use_symmetric_cooc_val"
    "ues\030\013 \001(\010:\005false\"\?\n\006Format\022\021\n\rBagOfWords"
    "Uci\020\000\022\020\n\014MatrixMarket\020\001\022\020\n\014VowpalWabbit\020"
    "\002\"\036\n\010NameType\022\010\n\004Guid\020\000\022\010\n\004Code\020\001\"\351\003\n\023In"
    "itializeModelArgs\022\022\n\nmodel_name\030\001 \001(\t\022\027\n"
    "\017dictionary_name\030\002 \001(\t\022\024\n\014topics_count\030\003"
    " \001(\005\022\022\n\ntopic_name\030\004 \003(\t\022\020\n\004seed\030\005 \001(\005:\002"
    "-1\0229\n\013source_type\030\006 \001(\0162$.artm.Initializ"
    "eModelArgs.SourceType\022\021\n\tdisk_path\030\007 \001(\t"
    "\0220\n\006filter\030\010 \003(\0132 .artm.InitializeModelA"
    "rgs.Filter\022\026\n\016batch_filename\030\t \003(\t\032\245\001\n\006F"
    "ilter\022\020\n\010class_id\030\001 \001(\t\022\026\n\016min_percentag"
    "e\030\002 \001(\002\022\026\n\016max_percentage\030\003 \001(\002\022\021\n\tmin_i"
    "tems\030\004 \001(\005\022\021\n\tmax_items\030\005 \001(\005\022\027\n\017min_tot"
    "al_count\030\006 \001(\005\022\032\n\022min_one_item_count\030\007 \001"
    "(\005\")\n\nSourceType\022\016\n\nDictionary\020\000\022\013\n\007Batc"
    "hes\020\001\"\301\001\n\016DictionaryData\022\014\n\004name\030\001 \001(\t\022\r"
    "\n\005token\030\002 \003(\t\022\020\n\010class_id\030\003 \003(\t\022\023\n\013token"
    "_value\030\004 \003(\002\022\020\n\010token_tf\030\005 \003(\002\022\020\n\010token_"
    "df\030\006 \003(\002\022\030\n\020cooc_first_index\030\007 \003(\005\022\031\n\021co"
    "oc_second_index\030\010 \003(\005\022\022\n\ncooc_value\030\t \003("
    "\002\"\313\001\n\024FilterDictionaryArgs\022\027\n\017dictionary"
    "_name\030\001 \001(\t\022\036\n\026dictionary_target_name\030\002 "
    "\001(\t\022\020\n\010class_id\030\003 \001(\t\022\016\n\006min_df\030\004 \001(\002\022\016\n"
    "\006max_df\030\005 \001(\002\022\023\n\013min_df_rate\030\006 \001(\002\022\023\n\013ma"
    "x_df_rate\030\007 \001(\002\022\016\n\006min_tf\030\010 \001(\002\022\016\n\006max_t"
    "f\030\t \001(\002\"\264\001\n\024GatherDictionaryArgs\022\036\n\026dict"
    "ionary_target_name\030\001 \001(\t\022\021\n\tdata_path\030\002 "
    "\001(\t\022\026\n\016cooc_file_path\030\003 \001(\t\022\027\n\017vocab_fil"
    "e_path\030\004 \001(\t\022$\n\025symmetric_cooc_values\030\005 "
    "\001(\010:\005false\022\022\n\nbatch_path\030\006 \003(\t\",\n\021GetDic"
    "tionaryArgs\022\027\n\017dictionary_name\030\001 \001(\t\"\364\002\n"
    "\021GetTopicModelArgs\022\022\n\nmodel_name\030\001 \001(\t\022\022"
    "\n\ntopic_name\030\002 \003(\t\022\r\n\005token\030\003 \003(\t\022\020\n\010cla"
    "ss_id\030\004 \003(\t\022\031\n\021use_sparse_format\030\005 \001(\010\022\023"
    "\n\003eps\030\006 \001(\002:\0061e-037\022>\n\014request_type\030\007 \001("
    "\0162#.artm.GetTopicModelArgs.RequestType:\003"
    "Pwt\022B\n\rmatrix_layout\030\010 \001(\0162$.artm.GetTop"
    "icModelArgs.MatrixLayout:\005Dense\";\n\013Reque"
    "stType\022\007\n\003Pwt\020\000\022\007\n\003Nwt\020\001\022\016\n\nTopicNames\020\002"
    "\022\n\n\006Tokens\020\003\"%\n\014MatrixLayout\022\t\n\005Dense\020\000\022"
    "\n\n\006Sparse\020\001\"\331\001\n\022GetThetaMatrixArgs\022\022\n\nto"
    "pic_name\030\003 \003(\t\022\023\n\013topic_index\030\004 \003(\005\022\031\n\021u"
    "se_sparse_format\030\006 \001(\010\022\023\n\003eps\030\007 \001(\002:\0061e-"
    "037\022C\n\rmatrix_layout\030\010 \001(\0162%.artm.GetThe"
    "taMatrixArgs.MatrixLayout:\005Dense\"%\n\014Matr"
    "ixLayout\022\t\n\005Dense\020\000\022\n\n\006Sparse\020\001\";\n\021GetSc"
    "oreValueArgs\022\022\n\nmodel_name\030\001 \001(\t\022\022\n\nscor"
    "e_name\030\002 \001(\t\"\'\n\021GetScoreArrayArgs\022\022\n\nsco"
    "re_name\030\002 \001(\t\"8\n\017ExportModelArgs\022\021\n\tfile"
    "_name\030\001 \001(\t\022\022\n\nmodel_name\030\002 \001(\t\"8\n\017Impor"
    "tModelArgs\022\021\n\tfile_name\030\001 \001(\t\022\022\n\nmodel_n"
    "ame\030\002 \001(\t\"%\n\017AttachModelArgs\022\022\n\nmodel_na"
    "me\030\001 \001(\t\"\277\004\n\022ProcessBatchesArgs\022\027\n\017nwt_t"
    "arget_name\030\001 \001(\t\022\026\n\016batch_filename\030\002 \003(\t"
    "\022\027\n\017pwt_source_name\030\003 \001(\t\022\"\n\026inner_itera"
    "tions_count\030\004 \001(\005:\00210\022\030\n\020regularizer_nam"
    "e\030\006 \003(\t\022\027\n\017regularizer_tau\030\007 \003(\001\022\020\n\010clas"
    "s_id\030\010 \003(\t\022\024\n\014class_weight\030\t \003(\002\022\032\n\013reus"
    "e_theta\030\n \001(\010:\005false\022\031\n\013opt_for_avx\030\013 \001("
    "\010:\004true\022J\n\021theta_matrix_type\030\016 \001(\0162(.art"
    "m.ProcessBatchesArgs.ThetaMatrixType:\005Ca"
    "che\022\024\n\014batch_weight\030\017 \003(\002\022\030\n\020predict_cla"
    "ss_id\030\021 \001(\t\022\032\n\005batch\030\022 \003(\0132\013.artm.Batch\022"
    "\037\n\020use_random_theta\030\023 \001(\010:\005false\022\022\n\ntopi"
    "c_name\030\024 \003(\t\"\\\n\017ThetaMatrixType\022\010\n\004None\020"
    "\000\022\t\n\005Dense\020\001\022\n\n\006Sparse\020\002\022\t\n\005Cache\020\003\022\r\n\tD"
    "ensePtdw\020\004\022\016\n\nSparsePtdw\020\005\"d\n\024ProcessBat"
    "chesResult\022#\n\nscore_data\030\001 \003(\0132\017.artm.Sc"
    "oreData\022\'\n\014theta_matrix\030\002 \001(\0132\021.artm.The"
    "taMatrix\"m\n\016MergeModelArgs\022\027\n\017nwt_target"
    "_name\030\001 \001(\t\022\027\n\017nwt_source_name\030\002 \003(\t\022\025\n\r"
    "source_weight\030\003 \003(\002\022\022\n\ntopic_name\030\004 \003(\t\""
    "\231\001\n\023RegularizeModelArgs\022\027\n\017rwt_target_na"
    "me\030\001 \001(\t\022\027\n\017pwt_source_name\030\002 \001(\t\022\027\n\017nwt"
    "_source_name\030\003 \001(\t\0227\n\024regularizer_settin"
    "gs\030\004 \003(\0132\031.artm.RegularizerSettings\"_\n\022N"
    "ormalizeModelArgs\022\027\n\017pwt_target_name\030\001 \001"
    "(\t\022\027\n\017nwt_source_name\030\002 \001(\t\022\027\n\017rwt_sourc"
    "e_name\030\003 \001(\t\"B\n\024ImportDictionaryArgs\022\021\n\t"
    "file_name\030\001 \001(\t\022\027\n\017dictionary_name\030\002 \001(\t"
    "\"B\n\024ExportDictionaryArgs\022\021\n\tfile_name\030\001 "
    "\001(\t\022\027\n\017dictionary_name\030\002 \001(\t\"\301\001\n\025CopyReq"
    "uestResultArgs\022Q\n\014request_type\030\001 \001(\0162\'.a"
    "rtm.CopyRequestResultArgs.RequestType:\022D"
    "efaultRequestType\"U\n\013RequestType\022\026\n\022Defa"
    "ultRequestType\020\000\022\026\n\022GetThetaSecondPass\020\001"
    "\022\026\n\022GetModelSecondPass\020\002\"\036\n\034DuplicateMas"
    "terComponentArgs\"\034\n\032GetMasterComponentIn"
    "foArgs\"\242\006\n\023MasterComponentInfo\022\021\n\tmaster"
    "_id\030\001 \001(\005\022\'\n\006config\030\002 \001(\0132\027.artm.MasterM"
    "odelConfig\022>\n\013regularizer\030\003 \003(\0132).artm.M"
    "asterComponentInfo.RegularizerInfo\0222\n\005sc"
    "ore\030\004 \003(\0132#.artm.MasterComponentInfo.Sco"
    "reInfo\022<\n\ndictionary\030\005 \003(\0132(.artm.Master"
    "ComponentInfo.DictionaryInfo\0222\n\005model\030\006 "
    "\003(\0132#.artm.MasterComponentInfo.ModelInfo"
    "\022=\n\013cache_entry\030\007 \003(\0132(.artm.MasterCompo"
    "nentInfo.CacheEntryInfo\022\034\n\024processor_que"
    "ue_size\030\t \001(\005\0222\n\005batch\030\n \003(\0132#.artm.Mast"
    "erComponentInfo.BatchInfo\032-\n\017Regularizer"
    "Info\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\032\'\n\tScor"
    "eInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\0325\n\016Dic"
    "tionaryInfo\022\014\n\004name\030\001 \001(\t\022\025\n\rentries_cou"
    "nt\030\002 \001(\003\032C\n\tBatchInfo\022\014\n\004name\030\001 \001(\t\022\023\n\013i"
    "tems_count\030\002 \001(\005\022\023\n\013token_count\030\003 \001(\005\032R\n"
    "\tModelInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\024"
    "\n\014topics_count\030\003 \001(\005\022\023\n\013token_count\030\004 \001("
    "\005\0320\n\016CacheEntryInfo\022\013\n\003key\030\001 \001(\t\022\021\n\tbyte"
    "_size\030\002 \001(\005\"C\n\021ImportBatchesArgs\022\022\n\nbatc"
    "h_name\030\001 \003(\t\022\032\n\005batch\030\003 \003(\0132\013.artm.Batch"
    "\"6\n\022AwaitOperationArgs\022 \n\024timeout_millis"
    "econds\030\001 \001(\005:\002-1\"\370\002\n\021MasterModelConfig\022\022"
    "\n\ntopic_name\030\001 \003(\t\022\020\n\010class_id\030\002 \003(\t\022\024\n\014"
    "class_weight\030\003 \003(\002\022\'\n\014score_config\030\004 \003(\013"
    "2\021.artm.ScoreConfig\0223\n\022regularizer_confi"
    "g\030\005 \003(\0132\027.artm.RegularizerConfig\022\017\n\007thre"
    "ads\030\006 \001(\005\022\025\n\010pwt_name\030\007 \001(\t:\003pwt\022\025\n\010nwt_"
    "name\030\010 \001(\t:\003nwt\022\036\n\026inner_iterations_coun"
    "t\030\t \001(\005\022\032\n\013reuse_theta\030\n \001(\010:\005false\022\031\n\013o"
    "pt_for_avx\030\013 \001(\010:\004true\022\027\n\017disk_cache_pat"
    "h\030\r \001(\t\022\032\n\013cache_theta\030\017 \001(\010:\005false\"r\n\031F"
    "itOfflineMasterModelArgs\022\026\n\016batch_filena"
    "me\030\001 \003(\t\022\024\n\014batch_weight\030\002 \003(\002\022\021\n\006passes"
    "\030\003 \001(\005:\0011\022\024\n\014batch_folder\030\004 \001(\t\"\240\001\n\030FitO"
    "nlineMasterModelArgs\022\026\n\016batch_filename\030\001"
    " \003(\t\022\024\n\014batch_weight\030\002 \003(\002\022\024\n\014update_aft"
    "er\030\003 \003(\005\022\024\n\014apply_weight\030\004 \003(\002\022\024\n\014decay_"
    "weight\030\005 \003(\002\022\024\n\005async\030\006 \001(\010:\005false\"\230\002\n\030T"
    "ransformMasterModelArgs\022\032\n\005batch\030\001 \003(\0132\013"
    ".artm.Batch\022\026\n\016batch_filename\030\002 \003(\t\022P\n\021t"
    "heta_matrix_type\030\003 \001(\0162..artm.TransformM"
    "asterModelArgs.ThetaMatrixType:\005Dense\022\030\n"
    "\020predict_class_id\030\004 \001(\t\"\\\n\017ThetaMatrixTy"
    "pe\022\010\n\004None\020\000\022\t\n\005Dense\020\001\022\n\n\006Sparse\020\002\022\t\n\005C"
    "ache\020\003\022\r\n\tDensePtdw\020\004\022\016\n\nSparsePtdw\020\005\"\377\001"
    "\n\024ConfigureLoggingArgs\022\017\n\007log_dir\030\001 \001(\t\022"
    "\023\n\013minloglevel\030\002 \001(\005\022\027\n\017stderrthreshold\030"
    "\003 \001(\005\022\023\n\013logtostderr\030\004 \001(\010\022\030\n\020colorlogto"
    "stderr\030\005 \001(\010\022\027\n\017alsologtostderr\030\006 \001(\010\022\022\n"
    "\nlogbufsecs\030\007 \001(\005\022\023\n\013logbuflevel\030\010 \001(\005\022\024"
    "\n\014max_log_size\030\t \001(\005\022!\n\031stop_logging_if_"
    "full_disk\030\n \001(\010\"\025\n\023ClearThetaCacheArgs\"\025"
    "\n\023ClearScoreCacheArgs\"\032\n\030ClearScoreArray"
    "CacheArgs", 11609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "artm/messages.proto", &protobuf_RegisterTypes);
  DoubleArray::default_instance_ = new DoubleArray();
  FloatArray::default_instance_ = new FloatArray();
  BoolArray::default_instance_ = new BoolArray();
  IntArray::default_instance_ = new IntArray();
  StringArray::default_instance_ = new StringArray();
  Item::default_instance_ = new Item();
  Batch::default_instance_ = new Batch();
  RegularizerSettings::default_instance_ = new RegularizerSettings();
  RegularizerConfig::default_instance_ = new RegularizerConfig();
  SmoothSparseThetaConfig::default_instance_ = new SmoothSparseThetaConfig();
  SmoothSparsePhiConfig::default_instance_ = new SmoothSparsePhiConfig();
  DecorrelatorPhiConfig::default_instance_ = new DecorrelatorPhiConfig();
  MultiLanguagePhiConfig::default_instance_ = new MultiLanguagePhiConfig();
  LabelRegularizationPhiConfig::default_instance_ = new LabelRegularizationPhiConfig();
  SpecifiedSparsePhiConfig::_default_class_id_ =
      new ::std::string("@default_class", 14);
  SpecifiedSparsePhiConfig::default_instance_ = new SpecifiedSparsePhiConfig();
  ImproveCoherencePhiConfig::default_instance_ = new ImproveCoherencePhiConfig();
  SmoothPtdwConfig::default_instance_ = new SmoothPtdwConfig();
  TopicSelectionThetaConfig::default_instance_ = new TopicSelectionThetaConfig();
  TransformConfig::default_instance_ = new TransformConfig();
  ScoreConfig::default_instance_ = new ScoreConfig();
  ScoreData::default_instance_ = new ScoreData();
  ScoreDataArray::default_instance_ = new ScoreDataArray();
  PerplexityScoreConfig::default_instance_ = new PerplexityScoreConfig();
  PerplexityScore::default_instance_ = new PerplexityScore();
  SparsityThetaScoreConfig::default_instance_ = new SparsityThetaScoreConfig();
  SparsityThetaScore::default_instance_ = new SparsityThetaScore();
  SparsityPhiScoreConfig::_default_class_id_ =
      new ::std::string("@default_class", 14);
  SparsityPhiScoreConfig::default_instance_ = new SparsityPhiScoreConfig();
  SparsityPhiScore::default_instance_ = new SparsityPhiScore();
  ItemsProcessedScoreConfig::default_instance_ = new ItemsProcessedScoreConfig();
  ItemsProcessedScore::default_instance_ = new ItemsProcessedScore();
  TopTokensScoreConfig::_default_class_id_ =
      new ::std::string("@default_class", 14);
  TopTokensScoreConfig::default_instance_ = new TopTokensScoreConfig();
  TopTokensScore::default_instance_ = new TopTokensScore();
  ThetaSnippetScoreConfig::default_instance_ = new ThetaSnippetScoreConfig();
  ThetaSnippetScore::default_instance_ = new ThetaSnippetScore();
  TopicKernelScoreConfig::_default_class_id_ =
      new ::std::string("@default_class", 14);
  TopicKernelScoreConfig::default_instance_ = new TopicKernelScoreConfig();
  TopicKernelScore::default_instance_ = new TopicKernelScore();
  TopicMassPhiScoreConfig::_default_class_id_ =
      new ::std::string("@default_class", 14);
  TopicMassPhiScoreConfig::default_instance_ = new TopicMassPhiScoreConfig();
  TopicMassPhiScore::default_instance_ = new TopicMassPhiScore();
  ClassPrecisionScoreConfig::default_instance_ = new ClassPrecisionScoreConfig();
  ClassPrecisionScore::default_instance_ = new ClassPrecisionScore();
  PeakMemoryScoreConfig::default_instance_ = new PeakMemoryScoreConfig();
  PeakMemoryScore::default_instance_ = new PeakMemoryScore();
  TopicModel::_default_name_ =
      new ::std::string("@model", 6);
  TopicModel::default_instance_ = new TopicModel();
  TopicModel_TopicModelInternals::default_instance_ = new TopicModel_TopicModelInternals();
  ThetaMatrix::default_instance_ = new ThetaMatrix();
  CollectionParserConfig::default_instance_ = new CollectionParserConfig();
  InitializeModelArgs::default_instance_ = new InitializeModelArgs();
  InitializeModelArgs_Filter::default_instance_ = new InitializeModelArgs_Filter();
  DictionaryData::default_instance_ = new DictionaryData();
  FilterDictionaryArgs::default_instance_ = new FilterDictionaryArgs();
  GatherDictionaryArgs::default_instance_ = new GatherDictionaryArgs();
  GetDictionaryArgs::default_instance_ = new GetDictionaryArgs();
  GetTopicModelArgs::default_instance_ = new GetTopicModelArgs();
  GetThetaMatrixArgs::default_instance_ = new GetThetaMatrixArgs();
  GetScoreValueArgs::default_instance_ = new GetScoreValueArgs();
  GetScoreArrayArgs::default_instance_ = new GetScoreArrayArgs();
  ExportModelArgs::default_instance_ = new ExportModelArgs();
  ImportModelArgs::default_instance_ = new ImportModelArgs();
  AttachModelArgs::default_instance_ = new AttachModelArgs();
  ProcessBatchesArgs::default_instance_ = new ProcessBatchesArgs();
  ProcessBatchesResult::default_instance_ = new ProcessBatchesResult();
  MergeModelArgs::default_instance_ = new MergeModelArgs();
  RegularizeModelArgs::default_instance_ = new RegularizeModelArgs();
  NormalizeModelArgs::default_instance_ = new NormalizeModelArgs();
  ImportDictionaryArgs::default_instance_ = new ImportDictionaryArgs();
  ExportDictionaryArgs::default_instance_ = new ExportDictionaryArgs();
  CopyRequestResultArgs::default_instance_ = new CopyRequestResultArgs();
  DuplicateMasterComponentArgs::default_instance_ = new DuplicateMasterComponentArgs();
  GetMasterComponentInfoArgs::default_instance_ = new GetMasterComponentInfoArgs();
  MasterComponentInfo::default_instance_ = new MasterComponentInfo();
  MasterComponentInfo_RegularizerInfo::default_instance_ = new MasterComponentInfo_RegularizerInfo();
  MasterComponentInfo_ScoreInfo::default_instance_ = new MasterComponentInfo_ScoreInfo();
  MasterComponentInfo_DictionaryInfo::default_instance_ = new MasterComponentInfo_DictionaryInfo();
  MasterComponentInfo_BatchInfo::default_instance_ = new MasterComponentInfo_BatchInfo();
  MasterComponentInfo_ModelInfo::default_instance_ = new MasterComponentInfo_ModelInfo();
  MasterComponentInfo_CacheEntryInfo::default_instance_ = new MasterComponentInfo_CacheEntryInfo();
  ImportBatchesArgs::default_instance_ = new ImportBatchesArgs();
  AwaitOperationArgs::default_instance_ = new AwaitOperationArgs();
  MasterModelConfig::_default_pwt_name_ =
      new ::std::string("pwt", 3);
  MasterModelConfig::_default_nwt_name_ =
      new ::std::string("nwt", 3);
  MasterModelConfig::default_instance_ = new MasterModelConfig();
  FitOfflineMasterModelArgs::default_instance_ = new FitOfflineMasterModelArgs();
  FitOnlineMasterModelArgs::default_instance_ = new FitOnlineMasterModelArgs();
  TransformMasterModelArgs::default_instance_ = new TransformMasterModelArgs();
  ConfigureLoggingArgs::default_instance_ = new ConfigureLoggingArgs();
  ClearThetaCacheArgs::default_instance_ = new ClearThetaCacheArgs();
  ClearScoreCacheArgs::default_instance_ = new ClearScoreCacheArgs();
  ClearScoreArrayCacheArgs::default_instance_ = new ClearScoreArrayCacheArgs();
  DoubleArray::default_instance_->InitAsDefaultInstance();
  FloatArray::default_instance_->InitAsDefaultInstance();
  BoolArray::default_instance_->InitAsDefaultInstance();
  IntArray::default_instance_->InitAsDefaultInstance();
  StringArray::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  Batch::default_instance_->InitAsDefaultInstance();
  RegularizerSettings::default_instance_->InitAsDefaultInstance();
  RegularizerConfig::default_instance_->InitAsDefaultInstance();
  SmoothSparseThetaConfig::default_instance_->InitAsDefaultInstance();
  SmoothSparsePhiConfig::default_instance_->InitAsDefaultInstance();
  DecorrelatorPhiConfig::default_instance_->InitAsDefaultInstance();
  MultiLanguagePhiConfig::default_instance_->InitAsDefaultInstance();
  LabelRegularizationPhiConfig::default_instance_->InitAsDefaultInstance();
  SpecifiedSparsePhiConfig::default_instance_->InitAsDefaultInstance();
  ImproveCoherencePhiConfig::default_instance_->InitAsDefaultInstance();
  SmoothPtdwConfig::default_instance_->InitAsDefaultInstance();
  TopicSelectionThetaConfig::default_instance_->InitAsDefaultInstance();
  TransformConfig::default_instance_->InitAsDefaultInstance();
  ScoreConfig::default_instance_->InitAsDefaultInstance();
  ScoreData::default_instance_->InitAsDefaultInstance();
  ScoreDataArray::default_instance_->InitAsDefaultInstance();
  PerplexityScoreConfig::default_instance_->InitAsDefaultInstance();
  PerplexityScore::default_instance_->InitAsDefaultInstance();
  SparsityThetaScoreConfig::default_instance_->InitAsDefaultInstance();
  SparsityThetaScore::default_instance_->InitAsDefaultInstance();
  SparsityPhiScoreConfig::default_instance_->InitAsDefaultInstance();
  SparsityPhiScore::default_instance_->InitAsDefaultInstance();
  ItemsProcessedScoreConfig::default_instance_->InitAsDefaultInstance();
  ItemsProcessedScore::default_instance_->InitAsDefaultInstance();
  TopTokensScoreConfig::default_instance_->InitAsDefaultInstance();
  TopTokensScore::default_instance_->InitAsDefaultInstance();
  ThetaSnippetScoreConfig::default_instance_->InitAsDefaultInstance();
  ThetaSnippetScore::default_instance_->InitAsDefaultInstance();
  TopicKernelScoreConfig::default_instance_->InitAsDefaultInstance();
  TopicKernelScore::default_instance_->InitAsDefaultInstance();
  TopicMassPhiScoreConfig::default_instance_->InitAsDefaultInstance();
  TopicMassPhiScore::default_instance_->InitAsDefaultInstance();
  ClassPrecisionScoreConfig::default_instance_->InitAsDefaultInstance();
  ClassPrecisionScore::default_instance_->InitAsDefaultInstance();
  PeakMemoryScoreConfig::default_instance_->InitAsDefaultInstance();
  PeakMemoryScore::default_instance_->InitAsDefaultInstance();
  TopicModel::default_instance_->InitAsDefaultInstance();
  TopicModel_TopicModelInternals::default_instance_->InitAsDefaultInstance();
  ThetaMatrix::default_instance_->InitAsDefaultInstance();
  CollectionParserConfig::default_instance_->InitAsDefaultInstance();
  InitializeModelArgs::default_instance_->InitAsDefaultInstance();
  InitializeModelArgs_Filter::default_instance_->InitAsDefaultInstance();
  DictionaryData::default_instance_->InitAsDefaultInstance();
  FilterDictionaryArgs::default_instance_->InitAsDefaultInstance();
  GatherDictionaryArgs::default_instance_->InitAsDefaultInstance();
  GetDictionaryArgs::default_instance_->InitAsDefaultInstance();
  GetTopicModelArgs::default_instance_->InitAsDefaultInstance();
  GetThetaMatrixArgs::default_instance_->InitAsDefaultInstance();
  GetScoreValueArgs::default_instance_->InitAsDefaultInstance();
  GetScoreArrayArgs::default_instance_->InitAsDefaultInstance();
  ExportModelArgs::default_instance_->InitAsDefaultInstance();
  ImportModelArgs::default_instance_->InitAsDefaultInstance();
  AttachModelArgs::default_instance_->InitAsDefaultInstance();
  ProcessBatchesArgs::default_instance_->InitAsDefaultInstance();
  ProcessBatchesResult::default_instance_->InitAsDefaultInstance();
  MergeModelArgs::default_instance_->InitAsDefaultInstance();
  RegularizeModelArgs::default_instance_->InitAsDefaultInstance();
  NormalizeModelArgs::default_instance_->InitAsDefaultInstance();
  ImportDictionaryArgs::default_instance_->InitAsDefaultInstance();
  ExportDictionaryArgs::default_instance_->InitAsDefaultInstance();
  CopyRequestResultArgs::default_instance_->InitAsDefaultInstance();
  DuplicateMasterComponentArgs::default_instance_->InitAsDefaultInstance();
  GetMasterComponentInfoArgs::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_RegularizerInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_ScoreInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_DictionaryInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_BatchInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_ModelInfo::default_instance_->InitAsDefaultInstance();
  MasterComponentInfo_CacheEntryInfo::default_instance_->InitAsDefaultInstance();
  ImportBatchesArgs::default_instance_->InitAsDefaultInstance();
  AwaitOperationArgs::default_instance_->InitAsDefaultInstance();
  MasterModelConfig::default_instance_->InitAsDefaultInstance();
  FitOfflineMasterModelArgs::default_instance_->InitAsDefaultInstance();
  FitOnlineMasterModelArgs::default_instance_->InitAsDefaultInstance();
  TransformMasterModelArgs::default_instance_->InitAsDefaultInstance();
  ConfigureLoggingArgs::default_instance_->InitAsDefaultInstance();
  ClearThetaCacheArgs::default_instance_->InitAsDefaultInstance();
  ClearScoreCacheArgs::default_instance_->InitAsDefaultInstance();
  ClearScoreArrayCacheArgs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_artm_2fmessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_artm_2fmessages_2eproto {
  StaticDescriptorInitializer_artm_2fmessages_2eproto() {
    protobuf_AddDesc_artm_2fmessages_2eproto();
  }
} static_descriptor_initializer_artm_2fmessages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DoubleArray::kValueFieldNumber;
#endif  // !_MSC_VER

DoubleArray::DoubleArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoubleArray::InitAsDefaultInstance() {
}

DoubleArray::DoubleArray(const DoubleArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoubleArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleArray::~DoubleArray() {
  SharedDtor();
}

void DoubleArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleArray_descriptor_;
}

const DoubleArray& DoubleArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DoubleArray* DoubleArray::default_instance_ = NULL;

DoubleArray* DoubleArray::New() const {
  return new DoubleArray;
}

void DoubleArray::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoubleArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoubleArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoubleArray::ByteSize() const {
  int total_size = 0;

  // repeated double value = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleArray::MergeFrom(const DoubleArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleArray::CopyFrom(const DoubleArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleArray::IsInitialized() const {

  return true;
}

void DoubleArray::Swap(DoubleArray* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleArray_descriptor_;
  metadata.reflection = DoubleArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FloatArray::kValueFieldNumber;
#endif  // !_MSC_VER

FloatArray::FloatArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FloatArray::InitAsDefaultInstance() {
}

FloatArray::FloatArray(const FloatArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FloatArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatArray::~FloatArray() {
  SharedDtor();
}

void FloatArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatArray_descriptor_;
}

const FloatArray& FloatArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

FloatArray* FloatArray::default_instance_ = NULL;

FloatArray* FloatArray::New() const {
  return new FloatArray;
}

void FloatArray::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloatArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FloatArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FloatArray::ByteSize() const {
  int total_size = 0;

  // repeated float value = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatArray::MergeFrom(const FloatArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatArray::CopyFrom(const FloatArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatArray::IsInitialized() const {

  return true;
}

void FloatArray::Swap(FloatArray* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatArray_descriptor_;
  metadata.reflection = FloatArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoolArray::kValueFieldNumber;
#endif  // !_MSC_VER

BoolArray::BoolArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoolArray::InitAsDefaultInstance() {
}

BoolArray::BoolArray(const BoolArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoolArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoolArray::~BoolArray() {
  SharedDtor();
}

void BoolArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoolArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoolArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoolArray_descriptor_;
}

const BoolArray& BoolArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

BoolArray* BoolArray::default_instance_ = NULL;

BoolArray* BoolArray::New() const {
  return new BoolArray;
}

void BoolArray::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoolArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool value = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoolArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoolArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoolArray::ByteSize() const {
  int total_size = 0;

  // repeated bool value = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->value_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoolArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoolArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoolArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoolArray::MergeFrom(const BoolArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoolArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolArray::CopyFrom(const BoolArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolArray::IsInitialized() const {

  return true;
}

void BoolArray::Swap(BoolArray* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoolArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoolArray_descriptor_;
  metadata.reflection = BoolArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntArray::kValueFieldNumber;
#endif  // !_MSC_VER

IntArray::IntArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntArray::InitAsDefaultInstance() {
}

IntArray::IntArray(const IntArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntArray::~IntArray() {
  SharedDtor();
}

void IntArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntArray_descriptor_;
}

const IntArray& IntArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

IntArray* IntArray::default_instance_ = NULL;

IntArray* IntArray::New() const {
  return new IntArray;
}

void IntArray::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 value = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 value = 1 [packed = true];
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 value = 1 [packed = true];
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntArray::ByteSize() const {
  int total_size = 0;

  // repeated int32 value = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntArray::MergeFrom(const IntArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntArray::CopyFrom(const IntArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntArray::IsInitialized() const {

  return true;
}

void IntArray::Swap(IntArray* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntArray_descriptor_;
  metadata.reflection = IntArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringArray::kValueFieldNumber;
#endif  // !_MSC_VER

StringArray::StringArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringArray::InitAsDefaultInstance() {
}

StringArray::StringArray(const StringArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringArray::~StringArray() {
  SharedDtor();
}

void StringArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StringArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringArray_descriptor_;
}

const StringArray& StringArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

StringArray* StringArray::default_instance_ = NULL;

StringArray* StringArray::New() const {
  return new StringArray;
}

void StringArray::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value(this->value_size() - 1).data(),
            this->value(this->value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string value = 1;
  for (int i = 0; i < this->value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->value(i).data(), this->value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringArray::ByteSize() const {
  int total_size = 0;

  // repeated string value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringArray::MergeFrom(const StringArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringArray::CopyFrom(const StringArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringArray::IsInitialized() const {

  return true;
}

void StringArray::Swap(StringArray* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringArray_descriptor_;
  metadata.reflection = StringArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item::kIdFieldNumber;
const int Item::kTitleFieldNumber;
const int Item::kTokenIdFieldNumber;
const int Item::kTokenWeightFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  SharedDtor();
}

void Item::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyString()) {
        title_->clear();
      }
    }
  }
  token_id_.Clear();
  token_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token_id;
        break;
      }

      // repeated int32 token_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_token_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_token_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token_id;
        if (input->ExpectTag(37)) goto parse_token_weight;
        break;
      }

      // repeated float token_weight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_token_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_token_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_token_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_token_weight;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // repeated int32 token_id = 3;
  for (int i = 0; i < this->token_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->token_id(i), output);
  }

  // repeated float token_weight = 4;
  for (int i = 0; i < this->token_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->token_weight(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // repeated int32 token_id = 3;
  for (int i = 0; i < this->token_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->token_id(i), target);
  }

  // repeated float token_weight = 4;
  for (int i = 0; i < this->token_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->token_weight(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  // repeated int32 token_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->token_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->token_id(i));
    }
    total_size += 1 * this->token_id_size() + data_size;
  }

  // repeated float token_weight = 4;
  {
    int data_size = 0;
    data_size = 4 * this->token_weight_size();
    total_size += 1 * this->token_weight_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_id_.MergeFrom(from.token_id_);
  token_weight_.MergeFrom(from.token_weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    token_id_.Swap(&other->token_id_);
    token_weight_.Swap(&other->token_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Batch::kTokenFieldNumber;
const int Batch::kClassIdFieldNumber;
const int Batch::kItemFieldNumber;
const int Batch::kDescriptionFieldNumber;
const int Batch::kIdFieldNumber;
#endif  // !_MSC_VER

Batch::Batch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Batch::InitAsDefaultInstance() {
}

Batch::Batch(const Batch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Batch::SharedCtor() {
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Batch::~Batch() {
  SharedDtor();
}

void Batch::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyString()) {
    delete description_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Batch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Batch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Batch_descriptor_;
}

const Batch& Batch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

Batch* Batch::default_instance_ = NULL;

Batch* Batch::New() const {
  return new Batch;
}

void Batch::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyString()) {
        description_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyString()) {
        id_->clear();
      }
    }
  }
  token_.Clear();
  class_id_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Batch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_token;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .artm.Item item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_id;
        break;
      }

      // optional string id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Batch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string token = 1;
  for (int i = 0; i < this->token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->token(i).data(), this->token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // repeated .artm.Item item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->description(), output);
  }

  // optional string id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Batch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string token = 1;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->token(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // repeated .artm.Item item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional string id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Batch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated string token = 1;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated .artm.Item item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Batch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Batch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Batch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Batch::MergeFrom(const Batch& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_.MergeFrom(from.token_);
  class_id_.MergeFrom(from.class_id_);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Batch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Batch::CopyFrom(const Batch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Batch::IsInitialized() const {

  return true;
}

void Batch::Swap(Batch* other) {
  if (other != this) {
    token_.Swap(&other->token_);
    class_id_.Swap(&other->class_id_);
    item_.Swap(&other->item_);
    std::swap(description_, other->description_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Batch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Batch_descriptor_;
  metadata.reflection = Batch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegularizerSettings::kNameFieldNumber;
const int RegularizerSettings::kTauFieldNumber;
const int RegularizerSettings::kUseRelativeRegularizationFieldNumber;
const int RegularizerSettings::kGammaFieldNumber;
#endif  // !_MSC_VER

RegularizerSettings::RegularizerSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegularizerSettings::InitAsDefaultInstance() {
}

RegularizerSettings::RegularizerSettings(const RegularizerSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegularizerSettings::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  tau_ = 0;
  use_relative_regularization_ = false;
  gamma_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegularizerSettings::~RegularizerSettings() {
  SharedDtor();
}

void RegularizerSettings::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RegularizerSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegularizerSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizerSettings_descriptor_;
}

const RegularizerSettings& RegularizerSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

RegularizerSettings* RegularizerSettings::default_instance_ = NULL;

RegularizerSettings* RegularizerSettings::New() const {
  return new RegularizerSettings;
}

void RegularizerSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    tau_ = 0;
    use_relative_regularization_ = false;
    gamma_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegularizerSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_tau;
        break;
      }

      // optional double tau = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use_relative_regularization;
        break;
      }

      // optional bool use_relative_regularization = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_relative_regularization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_relative_regularization_)));
          set_has_use_relative_regularization();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_gamma;
        break;
      }

      // optional double gamma = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegularizerSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional double tau = 2;
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tau(), output);
  }

  // optional bool use_relative_regularization = 3;
  if (has_use_relative_regularization()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_relative_regularization(), output);
  }

  // optional double gamma = 4;
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gamma(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegularizerSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double tau = 2;
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tau(), target);
  }

  // optional bool use_relative_regularization = 3;
  if (has_use_relative_regularization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_relative_regularization(), target);
  }

  // optional double gamma = 4;
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gamma(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegularizerSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double tau = 2;
    if (has_tau()) {
      total_size += 1 + 8;
    }

    // optional bool use_relative_regularization = 3;
    if (has_use_relative_regularization()) {
      total_size += 1 + 1;
    }

    // optional double gamma = 4;
    if (has_gamma()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegularizerSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegularizerSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegularizerSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegularizerSettings::MergeFrom(const RegularizerSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tau()) {
      set_tau(from.tau());
    }
    if (from.has_use_relative_regularization()) {
      set_use_relative_regularization(from.use_relative_regularization());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegularizerSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegularizerSettings::CopyFrom(const RegularizerSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegularizerSettings::IsInitialized() const {

  return true;
}

void RegularizerSettings::Swap(RegularizerSettings* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(tau_, other->tau_);
    std::swap(use_relative_regularization_, other->use_relative_regularization_);
    std::swap(gamma_, other->gamma_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegularizerSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegularizerSettings_descriptor_;
  metadata.reflection = RegularizerSettings_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RegularizerConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizerConfig_Type_descriptor_;
}
bool RegularizerConfig_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RegularizerConfig_Type RegularizerConfig::SmoothSparseTheta;
const RegularizerConfig_Type RegularizerConfig::SmoothSparsePhi;
const RegularizerConfig_Type RegularizerConfig::DecorrelatorPhi;
const RegularizerConfig_Type RegularizerConfig::MultiLanguagePhi;
const RegularizerConfig_Type RegularizerConfig::LabelRegularizationPhi;
const RegularizerConfig_Type RegularizerConfig::SpecifiedSparsePhi;
const RegularizerConfig_Type RegularizerConfig::ImproveCoherencePhi;
const RegularizerConfig_Type RegularizerConfig::SmoothPtdw;
const RegularizerConfig_Type RegularizerConfig::TopicSelectionTheta;
const RegularizerConfig_Type RegularizerConfig::Type_MIN;
const RegularizerConfig_Type RegularizerConfig::Type_MAX;
const int RegularizerConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RegularizerConfig::kNameFieldNumber;
const int RegularizerConfig::kTypeFieldNumber;
const int RegularizerConfig::kConfigFieldNumber;
const int RegularizerConfig::kTauFieldNumber;
#endif  // !_MSC_VER

RegularizerConfig::RegularizerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegularizerConfig::InitAsDefaultInstance() {
}

RegularizerConfig::RegularizerConfig(const RegularizerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegularizerConfig::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  type_ = 0;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  tau_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegularizerConfig::~RegularizerConfig() {
  SharedDtor();
}

void RegularizerConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (config_ != &::google::protobuf::internal::GetEmptyString()) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void RegularizerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegularizerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizerConfig_descriptor_;
}

const RegularizerConfig& RegularizerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

RegularizerConfig* RegularizerConfig::default_instance_ = NULL;

RegularizerConfig* RegularizerConfig::New() const {
  return new RegularizerConfig;
}

void RegularizerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    type_ = 0;
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::GetEmptyString()) {
        config_->clear();
      }
    }
    tau_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegularizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .artm.RegularizerConfig.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::RegularizerConfig_Type_IsValid(value)) {
            set_type(static_cast< ::artm::RegularizerConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // optional bytes config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_tau;
        break;
      }

      // optional float tau = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegularizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .artm.RegularizerConfig.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->config(), output);
  }

  // optional float tau = 4;
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->tau(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegularizerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .artm.RegularizerConfig.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes config = 3;
  if (has_config()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->config(), target);
  }

  // optional float tau = 4;
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->tau(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegularizerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .artm.RegularizerConfig.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config());
    }

    // optional float tau = 4;
    if (has_tau()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegularizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegularizerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegularizerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegularizerConfig::MergeFrom(const RegularizerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_tau()) {
      set_tau(from.tau());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegularizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegularizerConfig::CopyFrom(const RegularizerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegularizerConfig::IsInitialized() const {

  return true;
}

void RegularizerConfig::Swap(RegularizerConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(config_, other->config_);
    std::swap(tau_, other->tau_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegularizerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegularizerConfig_descriptor_;
  metadata.reflection = RegularizerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmoothSparseThetaConfig::kTopicNameFieldNumber;
const int SmoothSparseThetaConfig::kAlphaIterFieldNumber;
const int SmoothSparseThetaConfig::kTransformConfigFieldNumber;
#endif  // !_MSC_VER

SmoothSparseThetaConfig::SmoothSparseThetaConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmoothSparseThetaConfig::InitAsDefaultInstance() {
  transform_config_ = const_cast< ::artm::TransformConfig*>(&::artm::TransformConfig::default_instance());
}

SmoothSparseThetaConfig::SmoothSparseThetaConfig(const SmoothSparseThetaConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmoothSparseThetaConfig::SharedCtor() {
  _cached_size_ = 0;
  transform_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothSparseThetaConfig::~SmoothSparseThetaConfig() {
  SharedDtor();
}

void SmoothSparseThetaConfig::SharedDtor() {
  if (this != default_instance_) {
    delete transform_config_;
  }
}

void SmoothSparseThetaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothSparseThetaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothSparseThetaConfig_descriptor_;
}

const SmoothSparseThetaConfig& SmoothSparseThetaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SmoothSparseThetaConfig* SmoothSparseThetaConfig::default_instance_ = NULL;

SmoothSparseThetaConfig* SmoothSparseThetaConfig::New() const {
  return new SmoothSparseThetaConfig;
}

void SmoothSparseThetaConfig::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_transform_config()) {
      if (transform_config_ != NULL) transform_config_->::artm::TransformConfig::Clear();
    }
  }
  topic_name_.Clear();
  alpha_iter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmoothSparseThetaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(21)) goto parse_alpha_iter;
        break;
      }

      // repeated float alpha_iter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_alpha_iter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_alpha_iter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_alpha_iter;
        if (input->ExpectTag(26)) goto parse_transform_config;
        break;
      }

      // optional .artm.TransformConfig transform_config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transform_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmoothSparseThetaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated float alpha_iter = 2;
  for (int i = 0; i < this->alpha_iter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->alpha_iter(i), output);
  }

  // optional .artm.TransformConfig transform_config = 3;
  if (has_transform_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transform_config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmoothSparseThetaConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated float alpha_iter = 2;
  for (int i = 0; i < this->alpha_iter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->alpha_iter(i), target);
  }

  // optional .artm.TransformConfig transform_config = 3;
  if (has_transform_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transform_config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmoothSparseThetaConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .artm.TransformConfig transform_config = 3;
    if (has_transform_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_config());
    }

  }
  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated float alpha_iter = 2;
  {
    int data_size = 0;
    data_size = 4 * this->alpha_iter_size();
    total_size += 1 * this->alpha_iter_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothSparseThetaConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmoothSparseThetaConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmoothSparseThetaConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmoothSparseThetaConfig::MergeFrom(const SmoothSparseThetaConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  alpha_iter_.MergeFrom(from.alpha_iter_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_transform_config()) {
      mutable_transform_config()->::artm::TransformConfig::MergeFrom(from.transform_config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmoothSparseThetaConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothSparseThetaConfig::CopyFrom(const SmoothSparseThetaConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothSparseThetaConfig::IsInitialized() const {

  return true;
}

void SmoothSparseThetaConfig::Swap(SmoothSparseThetaConfig* other) {
  if (other != this) {
    topic_name_.Swap(&other->topic_name_);
    alpha_iter_.Swap(&other->alpha_iter_);
    std::swap(transform_config_, other->transform_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmoothSparseThetaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothSparseThetaConfig_descriptor_;
  metadata.reflection = SmoothSparseThetaConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmoothSparsePhiConfig::kTopicNameFieldNumber;
const int SmoothSparsePhiConfig::kClassIdFieldNumber;
const int SmoothSparsePhiConfig::kDictionaryNameFieldNumber;
const int SmoothSparsePhiConfig::kTransformConfigFieldNumber;
#endif  // !_MSC_VER

SmoothSparsePhiConfig::SmoothSparsePhiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmoothSparsePhiConfig::InitAsDefaultInstance() {
  transform_config_ = const_cast< ::artm::TransformConfig*>(&::artm::TransformConfig::default_instance());
}

SmoothSparsePhiConfig::SmoothSparsePhiConfig(const SmoothSparsePhiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmoothSparsePhiConfig::SharedCtor() {
  _cached_size_ = 0;
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  transform_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothSparsePhiConfig::~SmoothSparsePhiConfig() {
  SharedDtor();
}

void SmoothSparsePhiConfig::SharedDtor() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (this != default_instance_) {
    delete transform_config_;
  }
}

void SmoothSparsePhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothSparsePhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothSparsePhiConfig_descriptor_;
}

const SmoothSparsePhiConfig& SmoothSparsePhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SmoothSparsePhiConfig* SmoothSparsePhiConfig::default_instance_ = NULL;

SmoothSparsePhiConfig* SmoothSparsePhiConfig::New() const {
  return new SmoothSparsePhiConfig;
}

void SmoothSparsePhiConfig::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_name_->clear();
      }
    }
    if (has_transform_config()) {
      if (transform_config_ != NULL) transform_config_->::artm::TransformConfig::Clear();
    }
  }
  topic_name_.Clear();
  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmoothSparsePhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(26)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_transform_config;
        break;
      }

      // optional .artm.TransformConfig transform_config = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transform_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmoothSparsePhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dictionary_name(), output);
  }

  // optional .artm.TransformConfig transform_config = 4;
  if (has_transform_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transform_config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmoothSparsePhiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dictionary_name(), target);
  }

  // optional .artm.TransformConfig transform_config = 4;
  if (has_transform_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transform_config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmoothSparsePhiConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string dictionary_name = 3;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

    // optional .artm.TransformConfig transform_config = 4;
    if (has_transform_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform_config());
    }

  }
  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothSparsePhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmoothSparsePhiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmoothSparsePhiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmoothSparsePhiConfig::MergeFrom(const SmoothSparsePhiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
    if (from.has_transform_config()) {
      mutable_transform_config()->::artm::TransformConfig::MergeFrom(from.transform_config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmoothSparsePhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothSparsePhiConfig::CopyFrom(const SmoothSparsePhiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothSparsePhiConfig::IsInitialized() const {

  return true;
}

void SmoothSparsePhiConfig::Swap(SmoothSparsePhiConfig* other) {
  if (other != this) {
    topic_name_.Swap(&other->topic_name_);
    class_id_.Swap(&other->class_id_);
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(transform_config_, other->transform_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmoothSparsePhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothSparsePhiConfig_descriptor_;
  metadata.reflection = SmoothSparsePhiConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DecorrelatorPhiConfig::kTopicNameFieldNumber;
const int DecorrelatorPhiConfig::kClassIdFieldNumber;
#endif  // !_MSC_VER

DecorrelatorPhiConfig::DecorrelatorPhiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DecorrelatorPhiConfig::InitAsDefaultInstance() {
}

DecorrelatorPhiConfig::DecorrelatorPhiConfig(const DecorrelatorPhiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DecorrelatorPhiConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecorrelatorPhiConfig::~DecorrelatorPhiConfig() {
  SharedDtor();
}

void DecorrelatorPhiConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DecorrelatorPhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecorrelatorPhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecorrelatorPhiConfig_descriptor_;
}

const DecorrelatorPhiConfig& DecorrelatorPhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DecorrelatorPhiConfig* DecorrelatorPhiConfig::default_instance_ = NULL;

DecorrelatorPhiConfig* DecorrelatorPhiConfig::New() const {
  return new DecorrelatorPhiConfig;
}

void DecorrelatorPhiConfig::Clear() {
  topic_name_.Clear();
  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecorrelatorPhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DecorrelatorPhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DecorrelatorPhiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DecorrelatorPhiConfig::ByteSize() const {
  int total_size = 0;

  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecorrelatorPhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecorrelatorPhiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecorrelatorPhiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecorrelatorPhiConfig::MergeFrom(const DecorrelatorPhiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  class_id_.MergeFrom(from.class_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecorrelatorPhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecorrelatorPhiConfig::CopyFrom(const DecorrelatorPhiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecorrelatorPhiConfig::IsInitialized() const {

  return true;
}

void DecorrelatorPhiConfig::Swap(DecorrelatorPhiConfig* other) {
  if (other != this) {
    topic_name_.Swap(&other->topic_name_);
    class_id_.Swap(&other->class_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecorrelatorPhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecorrelatorPhiConfig_descriptor_;
  metadata.reflection = DecorrelatorPhiConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MultiLanguagePhiConfig::MultiLanguagePhiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiLanguagePhiConfig::InitAsDefaultInstance() {
}

MultiLanguagePhiConfig::MultiLanguagePhiConfig(const MultiLanguagePhiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiLanguagePhiConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiLanguagePhiConfig::~MultiLanguagePhiConfig() {
  SharedDtor();
}

void MultiLanguagePhiConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiLanguagePhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiLanguagePhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiLanguagePhiConfig_descriptor_;
}

const MultiLanguagePhiConfig& MultiLanguagePhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MultiLanguagePhiConfig* MultiLanguagePhiConfig::default_instance_ = NULL;

MultiLanguagePhiConfig* MultiLanguagePhiConfig::New() const {
  return new MultiLanguagePhiConfig;
}

void MultiLanguagePhiConfig::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiLanguagePhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MultiLanguagePhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiLanguagePhiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiLanguagePhiConfig::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiLanguagePhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiLanguagePhiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiLanguagePhiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiLanguagePhiConfig::MergeFrom(const MultiLanguagePhiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiLanguagePhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiLanguagePhiConfig::CopyFrom(const MultiLanguagePhiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiLanguagePhiConfig::IsInitialized() const {

  return true;
}

void MultiLanguagePhiConfig::Swap(MultiLanguagePhiConfig* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiLanguagePhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiLanguagePhiConfig_descriptor_;
  metadata.reflection = MultiLanguagePhiConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LabelRegularizationPhiConfig::kTopicNameFieldNumber;
const int LabelRegularizationPhiConfig::kClassIdFieldNumber;
const int LabelRegularizationPhiConfig::kDictionaryNameFieldNumber;
#endif  // !_MSC_VER

LabelRegularizationPhiConfig::LabelRegularizationPhiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LabelRegularizationPhiConfig::InitAsDefaultInstance() {
}

LabelRegularizationPhiConfig::LabelRegularizationPhiConfig(const LabelRegularizationPhiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LabelRegularizationPhiConfig::SharedCtor() {
  _cached_size_ = 0;
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LabelRegularizationPhiConfig::~LabelRegularizationPhiConfig() {
  SharedDtor();
}

void LabelRegularizationPhiConfig::SharedDtor() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (this != default_instance_) {
  }
}

void LabelRegularizationPhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LabelRegularizationPhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LabelRegularizationPhiConfig_descriptor_;
}

const LabelRegularizationPhiConfig& LabelRegularizationPhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

LabelRegularizationPhiConfig* LabelRegularizationPhiConfig::default_instance_ = NULL;

LabelRegularizationPhiConfig* LabelRegularizationPhiConfig::New() const {
  return new LabelRegularizationPhiConfig;
}

void LabelRegularizationPhiConfig::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_name_->clear();
      }
    }
  }
  topic_name_.Clear();
  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LabelRegularizationPhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(26)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LabelRegularizationPhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dictionary_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LabelRegularizationPhiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dictionary_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LabelRegularizationPhiConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string dictionary_name = 3;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LabelRegularizationPhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LabelRegularizationPhiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LabelRegularizationPhiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LabelRegularizationPhiConfig::MergeFrom(const LabelRegularizationPhiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LabelRegularizationPhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelRegularizationPhiConfig::CopyFrom(const LabelRegularizationPhiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelRegularizationPhiConfig::IsInitialized() const {

  return true;
}

void LabelRegularizationPhiConfig::Swap(LabelRegularizationPhiConfig* other) {
  if (other != this) {
    topic_name_.Swap(&other->topic_name_);
    class_id_.Swap(&other->class_id_);
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LabelRegularizationPhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LabelRegularizationPhiConfig_descriptor_;
  metadata.reflection = LabelRegularizationPhiConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SpecifiedSparsePhiConfig_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecifiedSparsePhiConfig_Mode_descriptor_;
}
bool SpecifiedSparsePhiConfig_Mode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SpecifiedSparsePhiConfig_Mode SpecifiedSparsePhiConfig::SparseTopics;
const SpecifiedSparsePhiConfig_Mode SpecifiedSparsePhiConfig::SparseTokens;
const SpecifiedSparsePhiConfig_Mode SpecifiedSparsePhiConfig::Mode_MIN;
const SpecifiedSparsePhiConfig_Mode SpecifiedSparsePhiConfig::Mode_MAX;
const int SpecifiedSparsePhiConfig::Mode_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* SpecifiedSparsePhiConfig::_default_class_id_ = NULL;
#ifndef _MSC_VER
const int SpecifiedSparsePhiConfig::kTopicNameFieldNumber;
const int SpecifiedSparsePhiConfig::kClassIdFieldNumber;
const int SpecifiedSparsePhiConfig::kMaxElementsCountFieldNumber;
const int SpecifiedSparsePhiConfig::kProbabilityThresholdFieldNumber;
const int SpecifiedSparsePhiConfig::kModeFieldNumber;
#endif  // !_MSC_VER

SpecifiedSparsePhiConfig::SpecifiedSparsePhiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecifiedSparsePhiConfig::InitAsDefaultInstance() {
}

SpecifiedSparsePhiConfig::SpecifiedSparsePhiConfig(const SpecifiedSparsePhiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecifiedSparsePhiConfig::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = const_cast< ::std::string*>(_default_class_id_);
  max_elements_count_ = 20;
  probability_threshold_ = 0.99f;
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecifiedSparsePhiConfig::~SpecifiedSparsePhiConfig() {
  SharedDtor();
}

void SpecifiedSparsePhiConfig::SharedDtor() {
  if (class_id_ != _default_class_id_) {
    delete class_id_;
  }
  if (this != default_instance_) {
  }
}

void SpecifiedSparsePhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecifiedSparsePhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecifiedSparsePhiConfig_descriptor_;
}

const SpecifiedSparsePhiConfig& SpecifiedSparsePhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SpecifiedSparsePhiConfig* SpecifiedSparsePhiConfig::default_instance_ = NULL;

SpecifiedSparsePhiConfig* SpecifiedSparsePhiConfig::New() const {
  return new SpecifiedSparsePhiConfig;
}

void SpecifiedSparsePhiConfig::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_class_id()) {
      if (class_id_ != _default_class_id_) {
        class_id_->assign(*_default_class_id_);
      }
    }
    max_elements_count_ = 20;
    probability_threshold_ = 0.99f;
    mode_ = 0;
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecifiedSparsePhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // optional string class_id = 2 [default = "@default_class"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_elements_count;
        break;
      }

      // optional int32 max_elements_count = 3 [default = 20];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_elements_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_elements_count_)));
          set_has_max_elements_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_probability_threshold;
        break;
      }

      // optional float probability_threshold = 4 [default = 0.99];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_probability_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_threshold_)));
          set_has_probability_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mode;
        break;
      }

      // optional .artm.SpecifiedSparsePhiConfig.Mode mode = 5 [default = SparseTopics];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::SpecifiedSparsePhiConfig_Mode_IsValid(value)) {
            set_mode(static_cast< ::artm::SpecifiedSparsePhiConfig_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecifiedSparsePhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(), output);
  }

  // optional int32 max_elements_count = 3 [default = 20];
  if (has_max_elements_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_elements_count(), output);
  }

  // optional float probability_threshold = 4 [default = 0.99];
  if (has_probability_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->probability_threshold(), output);
  }

  // optional .artm.SpecifiedSparsePhiConfig.Mode mode = 5 [default = SparseTopics];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecifiedSparsePhiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_id(), target);
  }

  // optional int32 max_elements_count = 3 [default = 20];
  if (has_max_elements_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_elements_count(), target);
  }

  // optional float probability_threshold = 4 [default = 0.99];
  if (has_probability_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->probability_threshold(), target);
  }

  // optional .artm.SpecifiedSparsePhiConfig.Mode mode = 5 [default = SparseTopics];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecifiedSparsePhiConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string class_id = 2 [default = "@default_class"];
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

    // optional int32 max_elements_count = 3 [default = 20];
    if (has_max_elements_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_elements_count());
    }

    // optional float probability_threshold = 4 [default = 0.99];
    if (has_probability_threshold()) {
      total_size += 1 + 4;
    }

    // optional .artm.SpecifiedSparsePhiConfig.Mode mode = 5 [default = SparseTopics];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecifiedSparsePhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecifiedSparsePhiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecifiedSparsePhiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecifiedSparsePhiConfig::MergeFrom(const SpecifiedSparsePhiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_max_elements_count()) {
      set_max_elements_count(from.max_elements_count());
    }
    if (from.has_probability_threshold()) {
      set_probability_threshold(from.probability_threshold());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecifiedSparsePhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecifiedSparsePhiConfig::CopyFrom(const SpecifiedSparsePhiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecifiedSparsePhiConfig::IsInitialized() const {

  return true;
}

void SpecifiedSparsePhiConfig::Swap(SpecifiedSparsePhiConfig* other) {
  if (other != this) {
    topic_name_.Swap(&other->topic_name_);
    std::swap(class_id_, other->class_id_);
    std::swap(max_elements_count_, other->max_elements_count_);
    std::swap(probability_threshold_, other->probability_threshold_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecifiedSparsePhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecifiedSparsePhiConfig_descriptor_;
  metadata.reflection = SpecifiedSparsePhiConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImproveCoherencePhiConfig::kTopicNameFieldNumber;
const int ImproveCoherencePhiConfig::kClassIdFieldNumber;
const int ImproveCoherencePhiConfig::kDictionaryNameFieldNumber;
#endif  // !_MSC_VER

ImproveCoherencePhiConfig::ImproveCoherencePhiConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImproveCoherencePhiConfig::InitAsDefaultInstance() {
}

ImproveCoherencePhiConfig::ImproveCoherencePhiConfig(const ImproveCoherencePhiConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImproveCoherencePhiConfig::SharedCtor() {
  _cached_size_ = 0;
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImproveCoherencePhiConfig::~ImproveCoherencePhiConfig() {
  SharedDtor();
}

void ImproveCoherencePhiConfig::SharedDtor() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (this != default_instance_) {
  }
}

void ImproveCoherencePhiConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImproveCoherencePhiConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImproveCoherencePhiConfig_descriptor_;
}

const ImproveCoherencePhiConfig& ImproveCoherencePhiConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ImproveCoherencePhiConfig* ImproveCoherencePhiConfig::default_instance_ = NULL;

ImproveCoherencePhiConfig* ImproveCoherencePhiConfig::New() const {
  return new ImproveCoherencePhiConfig;
}

void ImproveCoherencePhiConfig::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_name_->clear();
      }
    }
  }
  topic_name_.Clear();
  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImproveCoherencePhiConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(26)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImproveCoherencePhiConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dictionary_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImproveCoherencePhiConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // optional string dictionary_name = 3;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dictionary_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImproveCoherencePhiConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string dictionary_name = 3;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImproveCoherencePhiConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImproveCoherencePhiConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImproveCoherencePhiConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImproveCoherencePhiConfig::MergeFrom(const ImproveCoherencePhiConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImproveCoherencePhiConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImproveCoherencePhiConfig::CopyFrom(const ImproveCoherencePhiConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImproveCoherencePhiConfig::IsInitialized() const {

  return true;
}

void ImproveCoherencePhiConfig::Swap(ImproveCoherencePhiConfig* other) {
  if (other != this) {
    topic_name_.Swap(&other->topic_name_);
    class_id_.Swap(&other->class_id_);
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImproveCoherencePhiConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImproveCoherencePhiConfig_descriptor_;
  metadata.reflection = ImproveCoherencePhiConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SmoothPtdwConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothPtdwConfig_Type_descriptor_;
}
bool SmoothPtdwConfig_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SmoothPtdwConfig_Type SmoothPtdwConfig::MovingAverage;
const SmoothPtdwConfig_Type SmoothPtdwConfig::MovingProduct;
const SmoothPtdwConfig_Type SmoothPtdwConfig::Type_MIN;
const SmoothPtdwConfig_Type SmoothPtdwConfig::Type_MAX;
const int SmoothPtdwConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SmoothPtdwConfig::kTypeFieldNumber;
const int SmoothPtdwConfig::kWindowFieldNumber;
const int SmoothPtdwConfig::kThresholdFieldNumber;
#endif  // !_MSC_VER

SmoothPtdwConfig::SmoothPtdwConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmoothPtdwConfig::InitAsDefaultInstance() {
}

SmoothPtdwConfig::SmoothPtdwConfig(const SmoothPtdwConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmoothPtdwConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  window_ = 10;
  threshold_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmoothPtdwConfig::~SmoothPtdwConfig() {
  SharedDtor();
}

void SmoothPtdwConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmoothPtdwConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmoothPtdwConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmoothPtdwConfig_descriptor_;
}

const SmoothPtdwConfig& SmoothPtdwConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SmoothPtdwConfig* SmoothPtdwConfig::default_instance_ = NULL;

SmoothPtdwConfig* SmoothPtdwConfig::New() const {
  return new SmoothPtdwConfig;
}

void SmoothPtdwConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    window_ = 10;
    threshold_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmoothPtdwConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.SmoothPtdwConfig.Type type = 1 [default = MovingAverage];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::SmoothPtdwConfig_Type_IsValid(value)) {
            set_type(static_cast< ::artm::SmoothPtdwConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_window;
        break;
      }

      // optional int32 window = 3 [default = 10];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_)));
          set_has_window();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_threshold;
        break;
      }

      // optional double threshold = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
          set_has_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmoothPtdwConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .artm.SmoothPtdwConfig.Type type = 1 [default = MovingAverage];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 window = 3 [default = 10];
  if (has_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->window(), output);
  }

  // optional double threshold = 4 [default = 1];
  if (has_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->threshold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmoothPtdwConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .artm.SmoothPtdwConfig.Type type = 1 [default = MovingAverage];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 window = 3 [default = 10];
  if (has_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->window(), target);
  }

  // optional double threshold = 4 [default = 1];
  if (has_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->threshold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmoothPtdwConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .artm.SmoothPtdwConfig.Type type = 1 [default = MovingAverage];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 window = 3 [default = 10];
    if (has_window()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window());
    }

    // optional double threshold = 4 [default = 1];
    if (has_threshold()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmoothPtdwConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmoothPtdwConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmoothPtdwConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmoothPtdwConfig::MergeFrom(const SmoothPtdwConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_window()) {
      set_window(from.window());
    }
    if (from.has_threshold()) {
      set_threshold(from.threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmoothPtdwConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmoothPtdwConfig::CopyFrom(const SmoothPtdwConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmoothPtdwConfig::IsInitialized() const {

  return true;
}

void SmoothPtdwConfig::Swap(SmoothPtdwConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(window_, other->window_);
    std::swap(threshold_, other->threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmoothPtdwConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmoothPtdwConfig_descriptor_;
  metadata.reflection = SmoothPtdwConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopicSelectionThetaConfig::kTopicNameFieldNumber;
const int TopicSelectionThetaConfig::kTopicValueFieldNumber;
const int TopicSelectionThetaConfig::kAlphaIterFieldNumber;
#endif  // !_MSC_VER

TopicSelectionThetaConfig::TopicSelectionThetaConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicSelectionThetaConfig::InitAsDefaultInstance() {
}

TopicSelectionThetaConfig::TopicSelectionThetaConfig(const TopicSelectionThetaConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicSelectionThetaConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicSelectionThetaConfig::~TopicSelectionThetaConfig() {
  SharedDtor();
}

void TopicSelectionThetaConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicSelectionThetaConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicSelectionThetaConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicSelectionThetaConfig_descriptor_;
}

const TopicSelectionThetaConfig& TopicSelectionThetaConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicSelectionThetaConfig* TopicSelectionThetaConfig::default_instance_ = NULL;

TopicSelectionThetaConfig* TopicSelectionThetaConfig::New() const {
  return new TopicSelectionThetaConfig;
}

void TopicSelectionThetaConfig::Clear() {
  topic_name_.Clear();
  topic_value_.Clear();
  alpha_iter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicSelectionThetaConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(21)) goto parse_topic_value;
        break;
      }

      // repeated float topic_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_topic_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_topic_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_topic_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_topic_value;
        if (input->ExpectTag(29)) goto parse_alpha_iter;
        break;
      }

      // repeated float alpha_iter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_alpha_iter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_alpha_iter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_alpha_iter;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicSelectionThetaConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated float topic_value = 2;
  for (int i = 0; i < this->topic_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->topic_value(i), output);
  }

  // repeated float alpha_iter = 3;
  for (int i = 0; i < this->alpha_iter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->alpha_iter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicSelectionThetaConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated float topic_value = 2;
  for (int i = 0; i < this->topic_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->topic_value(i), target);
  }

  // repeated float alpha_iter = 3;
  for (int i = 0; i < this->alpha_iter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->alpha_iter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicSelectionThetaConfig::ByteSize() const {
  int total_size = 0;

  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated float topic_value = 2;
  {
    int data_size = 0;
    data_size = 4 * this->topic_value_size();
    total_size += 1 * this->topic_value_size() + data_size;
  }

  // repeated float alpha_iter = 3;
  {
    int data_size = 0;
    data_size = 4 * this->alpha_iter_size();
    total_size += 1 * this->alpha_iter_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicSelectionThetaConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicSelectionThetaConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicSelectionThetaConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicSelectionThetaConfig::MergeFrom(const TopicSelectionThetaConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  topic_value_.MergeFrom(from.topic_value_);
  alpha_iter_.MergeFrom(from.alpha_iter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicSelectionThetaConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicSelectionThetaConfig::CopyFrom(const TopicSelectionThetaConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicSelectionThetaConfig::IsInitialized() const {

  return true;
}

void TopicSelectionThetaConfig::Swap(TopicSelectionThetaConfig* other) {
  if (other != this) {
    topic_name_.Swap(&other->topic_name_);
    topic_value_.Swap(&other->topic_value_);
    alpha_iter_.Swap(&other->alpha_iter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicSelectionThetaConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicSelectionThetaConfig_descriptor_;
  metadata.reflection = TopicSelectionThetaConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransformConfig_TransformType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformConfig_TransformType_descriptor_;
}
bool TransformConfig_TransformType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransformConfig_TransformType TransformConfig::Logarithm;
const TransformConfig_TransformType TransformConfig::Polynomial;
const TransformConfig_TransformType TransformConfig::Constant;
const TransformConfig_TransformType TransformConfig::TransformType_MIN;
const TransformConfig_TransformType TransformConfig::TransformType_MAX;
const int TransformConfig::TransformType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TransformConfig::kTransformTypeFieldNumber;
const int TransformConfig::kNFieldNumber;
const int TransformConfig::kAFieldNumber;
#endif  // !_MSC_VER

TransformConfig::TransformConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransformConfig::InitAsDefaultInstance() {
}

TransformConfig::TransformConfig(const TransformConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransformConfig::SharedCtor() {
  _cached_size_ = 0;
  transform_type_ = 2;
  n_ = 1;
  a_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformConfig::~TransformConfig() {
  SharedDtor();
}

void TransformConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransformConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformConfig_descriptor_;
}

const TransformConfig& TransformConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TransformConfig* TransformConfig::default_instance_ = NULL;

TransformConfig* TransformConfig::New() const {
  return new TransformConfig;
}

void TransformConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transform_type_ = 2;
    n_ = 1;
    a_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.TransformConfig.TransformType transform_type = 1 [default = Constant];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::TransformConfig_TransformType_IsValid(value)) {
            set_transform_type(static_cast< ::artm::TransformConfig_TransformType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_n;
        break;
      }

      // optional double n = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_a;
        break;
      }

      // optional double a = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransformConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .artm.TransformConfig.TransformType transform_type = 1 [default = Constant];
  if (has_transform_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->transform_type(), output);
  }

  // optional double n = 2 [default = 1];
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->n(), output);
  }

  // optional double a = 3 [default = 1];
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->a(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransformConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .artm.TransformConfig.TransformType transform_type = 1 [default = Constant];
  if (has_transform_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->transform_type(), target);
  }

  // optional double n = 2 [default = 1];
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->n(), target);
  }

  // optional double a = 3 [default = 1];
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->a(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransformConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .artm.TransformConfig.TransformType transform_type = 1 [default = Constant];
    if (has_transform_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transform_type());
    }

    // optional double n = 2 [default = 1];
    if (has_n()) {
      total_size += 1 + 8;
    }

    // optional double a = 3 [default = 1];
    if (has_a()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformConfig::MergeFrom(const TransformConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transform_type()) {
      set_transform_type(from.transform_type());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformConfig::CopyFrom(const TransformConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformConfig::IsInitialized() const {

  return true;
}

void TransformConfig::Swap(TransformConfig* other) {
  if (other != this) {
    std::swap(transform_type_, other->transform_type_);
    std::swap(n_, other->n_);
    std::swap(a_, other->a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformConfig_descriptor_;
  metadata.reflection = TransformConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ScoreConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreConfig_Type_descriptor_;
}
bool ScoreConfig_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ScoreConfig_Type ScoreConfig::Perplexity;
const ScoreConfig_Type ScoreConfig::SparsityTheta;
const ScoreConfig_Type ScoreConfig::SparsityPhi;
const ScoreConfig_Type ScoreConfig::ItemsProcessed;
const ScoreConfig_Type ScoreConfig::TopTokens;
const ScoreConfig_Type ScoreConfig::ThetaSnippet;
const ScoreConfig_Type ScoreConfig::TopicKernel;
const ScoreConfig_Type ScoreConfig::TopicMassPhi;
const ScoreConfig_Type ScoreConfig::ClassPrecision;
const ScoreConfig_Type ScoreConfig::PeakMemory;
const ScoreConfig_Type ScoreConfig::Type_MIN;
const ScoreConfig_Type ScoreConfig::Type_MAX;
const int ScoreConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ScoreConfig::kNameFieldNumber;
const int ScoreConfig::kTypeFieldNumber;
const int ScoreConfig::kConfigFieldNumber;
#endif  // !_MSC_VER

ScoreConfig::ScoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreConfig::InitAsDefaultInstance() {
}

ScoreConfig::ScoreConfig(const ScoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  type_ = 0;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreConfig::~ScoreConfig() {
  SharedDtor();
}

void ScoreConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (config_ != &::google::protobuf::internal::GetEmptyString()) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void ScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreConfig_descriptor_;
}

const ScoreConfig& ScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ScoreConfig* ScoreConfig::default_instance_ = NULL;

ScoreConfig* ScoreConfig::New() const {
  return new ScoreConfig;
}

void ScoreConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    type_ = 0;
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::GetEmptyString()) {
        config_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .artm.ScoreConfig.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::ScoreConfig_Type_IsValid(value)) {
            set_type(static_cast< ::artm::ScoreConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_config;
        break;
      }

      // optional bytes config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .artm.ScoreConfig.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .artm.ScoreConfig.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes config = 3;
  if (has_config()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .artm.ScoreConfig.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreConfig::MergeFrom(const ScoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreConfig::CopyFrom(const ScoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreConfig::IsInitialized() const {

  return true;
}

void ScoreConfig::Swap(ScoreConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreConfig_descriptor_;
  metadata.reflection = ScoreConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ScoreData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreData_Type_descriptor_;
}
bool ScoreData_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ScoreData_Type ScoreData::Perplexity;
const ScoreData_Type ScoreData::SparsityTheta;
const ScoreData_Type ScoreData::SparsityPhi;
const ScoreData_Type ScoreData::ItemsProcessed;
const ScoreData_Type ScoreData::TopTokens;
const ScoreData_Type ScoreData::ThetaSnippet;
const ScoreData_Type ScoreData::TopicKernel;
const ScoreData_Type ScoreData::TopicMassPhi;
const ScoreData_Type ScoreData::ClassPrecision;
const ScoreData_Type ScoreData::PeakMemory;
const ScoreData_Type ScoreData::Type_MIN;
const ScoreData_Type ScoreData::Type_MAX;
const int ScoreData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ScoreData::kNameFieldNumber;
const int ScoreData::kTypeFieldNumber;
const int ScoreData::kDataFieldNumber;
#endif  // !_MSC_VER

ScoreData::ScoreData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreData::InitAsDefaultInstance() {
}

ScoreData::ScoreData(const ScoreData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  type_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreData::~ScoreData() {
  SharedDtor();
}

void ScoreData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ScoreData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreData_descriptor_;
}

const ScoreData& ScoreData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ScoreData* ScoreData::default_instance_ = NULL;

ScoreData* ScoreData::New() const {
  return new ScoreData;
}

void ScoreData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    type_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyString()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .artm.ScoreData.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::ScoreData_Type_IsValid(value)) {
            set_type(static_cast< ::artm::ScoreData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .artm.ScoreData.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .artm.ScoreData.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .artm.ScoreData.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreData::MergeFrom(const ScoreData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreData::CopyFrom(const ScoreData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreData::IsInitialized() const {

  return true;
}

void ScoreData::Swap(ScoreData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreData_descriptor_;
  metadata.reflection = ScoreData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreDataArray::kScoreFieldNumber;
#endif  // !_MSC_VER

ScoreDataArray::ScoreDataArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreDataArray::InitAsDefaultInstance() {
}

ScoreDataArray::ScoreDataArray(const ScoreDataArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreDataArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreDataArray::~ScoreDataArray() {
  SharedDtor();
}

void ScoreDataArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreDataArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreDataArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreDataArray_descriptor_;
}

const ScoreDataArray& ScoreDataArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ScoreDataArray* ScoreDataArray::default_instance_ = NULL;

ScoreDataArray* ScoreDataArray::New() const {
  return new ScoreDataArray;
}

void ScoreDataArray::Clear() {
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreDataArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.ScoreData score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreDataArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .artm.ScoreData score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreDataArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .artm.ScoreData score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreDataArray::ByteSize() const {
  int total_size = 0;

  // repeated .artm.ScoreData score = 1;
  total_size += 1 * this->score_size();
  for (int i = 0; i < this->score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreDataArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreDataArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreDataArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreDataArray::MergeFrom(const ScoreDataArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreDataArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreDataArray::CopyFrom(const ScoreDataArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreDataArray::IsInitialized() const {

  return true;
}

void ScoreDataArray::Swap(ScoreDataArray* other) {
  if (other != this) {
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreDataArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreDataArray_descriptor_;
  metadata.reflection = ScoreDataArray_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PerplexityScoreConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerplexityScoreConfig_Type_descriptor_;
}
bool PerplexityScoreConfig_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PerplexityScoreConfig_Type PerplexityScoreConfig::UnigramDocumentModel;
const PerplexityScoreConfig_Type PerplexityScoreConfig::UnigramCollectionModel;
const PerplexityScoreConfig_Type PerplexityScoreConfig::Type_MIN;
const PerplexityScoreConfig_Type PerplexityScoreConfig::Type_MAX;
const int PerplexityScoreConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PerplexityScoreConfig::kModelTypeFieldNumber;
const int PerplexityScoreConfig::kDictionaryNameFieldNumber;
const int PerplexityScoreConfig::kThetaSparsityEpsFieldNumber;
const int PerplexityScoreConfig::kThetaSparsityTopicNameFieldNumber;
const int PerplexityScoreConfig::kClassIdFieldNumber;
#endif  // !_MSC_VER

PerplexityScoreConfig::PerplexityScoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PerplexityScoreConfig::InitAsDefaultInstance() {
}

PerplexityScoreConfig::PerplexityScoreConfig(const PerplexityScoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PerplexityScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  model_type_ = 0;
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  theta_sparsity_eps_ = 1e-037f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerplexityScoreConfig::~PerplexityScoreConfig() {
  SharedDtor();
}

void PerplexityScoreConfig::SharedDtor() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (this != default_instance_) {
  }
}

void PerplexityScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerplexityScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerplexityScoreConfig_descriptor_;
}

const PerplexityScoreConfig& PerplexityScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

PerplexityScoreConfig* PerplexityScoreConfig::default_instance_ = NULL;

PerplexityScoreConfig* PerplexityScoreConfig::New() const {
  return new PerplexityScoreConfig;
}

void PerplexityScoreConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    model_type_ = 0;
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_name_->clear();
      }
    }
    theta_sparsity_eps_ = 1e-037f;
  }
  theta_sparsity_topic_name_.Clear();
  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PerplexityScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.PerplexityScoreConfig.Type model_type = 3 [default = UnigramDocumentModel];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::PerplexityScoreConfig_Type_IsValid(value)) {
            set_model_type(static_cast< ::artm::PerplexityScoreConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_theta_sparsity_eps;
        break;
      }

      // optional float theta_sparsity_eps = 5 [default = 1e-037];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_theta_sparsity_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_sparsity_eps_)));
          set_has_theta_sparsity_eps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_theta_sparsity_topic_name;
        break;
      }

      // repeated string theta_sparsity_topic_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theta_sparsity_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_theta_sparsity_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->theta_sparsity_topic_name(this->theta_sparsity_topic_name_size() - 1).data(),
            this->theta_sparsity_topic_name(this->theta_sparsity_topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_theta_sparsity_topic_name;
        if (input->ExpectTag(58)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_class_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PerplexityScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .artm.PerplexityScoreConfig.Type model_type = 3 [default = UnigramDocumentModel];
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->model_type(), output);
  }

  // optional string dictionary_name = 4;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dictionary_name(), output);
  }

  // optional float theta_sparsity_eps = 5 [default = 1e-037];
  if (has_theta_sparsity_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->theta_sparsity_eps(), output);
  }

  // repeated string theta_sparsity_topic_name = 6;
  for (int i = 0; i < this->theta_sparsity_topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->theta_sparsity_topic_name(i).data(), this->theta_sparsity_topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->theta_sparsity_topic_name(i), output);
  }

  // repeated string class_id = 7;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->class_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PerplexityScoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .artm.PerplexityScoreConfig.Type model_type = 3 [default = UnigramDocumentModel];
  if (has_model_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->model_type(), target);
  }

  // optional string dictionary_name = 4;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dictionary_name(), target);
  }

  // optional float theta_sparsity_eps = 5 [default = 1e-037];
  if (has_theta_sparsity_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->theta_sparsity_eps(), target);
  }

  // repeated string theta_sparsity_topic_name = 6;
  for (int i = 0; i < this->theta_sparsity_topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theta_sparsity_topic_name(i).data(), this->theta_sparsity_topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->theta_sparsity_topic_name(i), target);
  }

  // repeated string class_id = 7;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->class_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PerplexityScoreConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .artm.PerplexityScoreConfig.Type model_type = 3 [default = UnigramDocumentModel];
    if (has_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model_type());
    }

    // optional string dictionary_name = 4;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

    // optional float theta_sparsity_eps = 5 [default = 1e-037];
    if (has_theta_sparsity_eps()) {
      total_size += 1 + 4;
    }

  }
  // repeated string theta_sparsity_topic_name = 6;
  total_size += 1 * this->theta_sparsity_topic_name_size();
  for (int i = 0; i < this->theta_sparsity_topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->theta_sparsity_topic_name(i));
  }

  // repeated string class_id = 7;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerplexityScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PerplexityScoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PerplexityScoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PerplexityScoreConfig::MergeFrom(const PerplexityScoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  theta_sparsity_topic_name_.MergeFrom(from.theta_sparsity_topic_name_);
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_type()) {
      set_model_type(from.model_type());
    }
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
    if (from.has_theta_sparsity_eps()) {
      set_theta_sparsity_eps(from.theta_sparsity_eps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PerplexityScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerplexityScoreConfig::CopyFrom(const PerplexityScoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerplexityScoreConfig::IsInitialized() const {

  return true;
}

void PerplexityScoreConfig::Swap(PerplexityScoreConfig* other) {
  if (other != this) {
    std::swap(model_type_, other->model_type_);
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(theta_sparsity_eps_, other->theta_sparsity_eps_);
    theta_sparsity_topic_name_.Swap(&other->theta_sparsity_topic_name_);
    class_id_.Swap(&other->class_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PerplexityScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerplexityScoreConfig_descriptor_;
  metadata.reflection = PerplexityScoreConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PerplexityScore::kValueFieldNumber;
const int PerplexityScore::kRawFieldNumber;
const int PerplexityScore::kNormalizerFieldNumber;
const int PerplexityScore::kZeroWordsFieldNumber;
const int PerplexityScore::kThetaSparsityValueFieldNumber;
const int PerplexityScore::kThetaSparsityZeroTopicsFieldNumber;
const int PerplexityScore::kThetaSparsityTotalTopicsFieldNumber;
#endif  // !_MSC_VER

PerplexityScore::PerplexityScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PerplexityScore::InitAsDefaultInstance() {
}

PerplexityScore::PerplexityScore(const PerplexityScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PerplexityScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  raw_ = 0;
  normalizer_ = 0;
  zero_words_ = GOOGLE_LONGLONG(0);
  theta_sparsity_value_ = 0;
  theta_sparsity_zero_topics_ = 0;
  theta_sparsity_total_topics_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerplexityScore::~PerplexityScore() {
  SharedDtor();
}

void PerplexityScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PerplexityScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerplexityScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerplexityScore_descriptor_;
}

const PerplexityScore& PerplexityScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

PerplexityScore* PerplexityScore::default_instance_ = NULL;

PerplexityScore* PerplexityScore::New() const {
  return new PerplexityScore;
}

void PerplexityScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    raw_ = 0;
    normalizer_ = 0;
    zero_words_ = GOOGLE_LONGLONG(0);
    theta_sparsity_value_ = 0;
    theta_sparsity_zero_topics_ = 0;
    theta_sparsity_total_topics_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PerplexityScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_raw;
        break;
      }

      // optional double raw = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_raw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &raw_)));
          set_has_raw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_normalizer;
        break;
      }

      // optional double normalizer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_normalizer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &normalizer_)));
          set_has_normalizer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zero_words;
        break;
      }

      // optional int64 zero_words = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zero_words:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &zero_words_)));
          set_has_zero_words();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_theta_sparsity_value;
        break;
      }

      // optional double theta_sparsity_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta_sparsity_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_sparsity_value_)));
          set_has_theta_sparsity_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_theta_sparsity_zero_topics;
        break;
      }

      // optional int32 theta_sparsity_zero_topics = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_theta_sparsity_zero_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &theta_sparsity_zero_topics_)));
          set_has_theta_sparsity_zero_topics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_theta_sparsity_total_topics;
        break;
      }

      // optional int32 theta_sparsity_total_topics = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_theta_sparsity_total_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &theta_sparsity_total_topics_)));
          set_has_theta_sparsity_total_topics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PerplexityScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // optional double raw = 2;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->raw(), output);
  }

  // optional double normalizer = 3;
  if (has_normalizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->normalizer(), output);
  }

  // optional int64 zero_words = 4;
  if (has_zero_words()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->zero_words(), output);
  }

  // optional double theta_sparsity_value = 5;
  if (has_theta_sparsity_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->theta_sparsity_value(), output);
  }

  // optional int32 theta_sparsity_zero_topics = 6;
  if (has_theta_sparsity_zero_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->theta_sparsity_zero_topics(), output);
  }

  // optional int32 theta_sparsity_total_topics = 7;
  if (has_theta_sparsity_total_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->theta_sparsity_total_topics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PerplexityScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // optional double raw = 2;
  if (has_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->raw(), target);
  }

  // optional double normalizer = 3;
  if (has_normalizer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->normalizer(), target);
  }

  // optional int64 zero_words = 4;
  if (has_zero_words()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->zero_words(), target);
  }

  // optional double theta_sparsity_value = 5;
  if (has_theta_sparsity_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->theta_sparsity_value(), target);
  }

  // optional int32 theta_sparsity_zero_topics = 6;
  if (has_theta_sparsity_zero_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->theta_sparsity_zero_topics(), target);
  }

  // optional int32 theta_sparsity_total_topics = 7;
  if (has_theta_sparsity_total_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->theta_sparsity_total_topics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PerplexityScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional double raw = 2;
    if (has_raw()) {
      total_size += 1 + 8;
    }

    // optional double normalizer = 3;
    if (has_normalizer()) {
      total_size += 1 + 8;
    }

    // optional int64 zero_words = 4;
    if (has_zero_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->zero_words());
    }

    // optional double theta_sparsity_value = 5;
    if (has_theta_sparsity_value()) {
      total_size += 1 + 8;
    }

    // optional int32 theta_sparsity_zero_topics = 6;
    if (has_theta_sparsity_zero_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->theta_sparsity_zero_topics());
    }

    // optional int32 theta_sparsity_total_topics = 7;
    if (has_theta_sparsity_total_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->theta_sparsity_total_topics());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerplexityScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PerplexityScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PerplexityScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PerplexityScore::MergeFrom(const PerplexityScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_raw()) {
      set_raw(from.raw());
    }
    if (from.has_normalizer()) {
      set_normalizer(from.normalizer());
    }
    if (from.has_zero_words()) {
      set_zero_words(from.zero_words());
    }
    if (from.has_theta_sparsity_value()) {
      set_theta_sparsity_value(from.theta_sparsity_value());
    }
    if (from.has_theta_sparsity_zero_topics()) {
      set_theta_sparsity_zero_topics(from.theta_sparsity_zero_topics());
    }
    if (from.has_theta_sparsity_total_topics()) {
      set_theta_sparsity_total_topics(from.theta_sparsity_total_topics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PerplexityScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerplexityScore::CopyFrom(const PerplexityScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerplexityScore::IsInitialized() const {

  return true;
}

void PerplexityScore::Swap(PerplexityScore* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(raw_, other->raw_);
    std::swap(normalizer_, other->normalizer_);
    std::swap(zero_words_, other->zero_words_);
    std::swap(theta_sparsity_value_, other->theta_sparsity_value_);
    std::swap(theta_sparsity_zero_topics_, other->theta_sparsity_zero_topics_);
    std::swap(theta_sparsity_total_topics_, other->theta_sparsity_total_topics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PerplexityScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerplexityScore_descriptor_;
  metadata.reflection = PerplexityScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SparsityThetaScoreConfig::kEpsFieldNumber;
const int SparsityThetaScoreConfig::kTopicNameFieldNumber;
#endif  // !_MSC_VER

SparsityThetaScoreConfig::SparsityThetaScoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SparsityThetaScoreConfig::InitAsDefaultInstance() {
}

SparsityThetaScoreConfig::SparsityThetaScoreConfig(const SparsityThetaScoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SparsityThetaScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  eps_ = 1e-037f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsityThetaScoreConfig::~SparsityThetaScoreConfig() {
  SharedDtor();
}

void SparsityThetaScoreConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparsityThetaScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsityThetaScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsityThetaScoreConfig_descriptor_;
}

const SparsityThetaScoreConfig& SparsityThetaScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SparsityThetaScoreConfig* SparsityThetaScoreConfig::default_instance_ = NULL;

SparsityThetaScoreConfig* SparsityThetaScoreConfig::New() const {
  return new SparsityThetaScoreConfig;
}

void SparsityThetaScoreConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eps_ = 1e-037f;
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparsityThetaScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float eps = 3 [default = 1e-037];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparsityThetaScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float eps = 3 [default = 1e-037];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eps(), output);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topic_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SparsityThetaScoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float eps = 3 [default = 1e-037];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eps(), target);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topic_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SparsityThetaScoreConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float eps = 3 [default = 1e-037];
    if (has_eps()) {
      total_size += 1 + 4;
    }

  }
  // repeated string topic_name = 4;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsityThetaScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparsityThetaScoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparsityThetaScoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparsityThetaScoreConfig::MergeFrom(const SparsityThetaScoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparsityThetaScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsityThetaScoreConfig::CopyFrom(const SparsityThetaScoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsityThetaScoreConfig::IsInitialized() const {

  return true;
}

void SparsityThetaScoreConfig::Swap(SparsityThetaScoreConfig* other) {
  if (other != this) {
    std::swap(eps_, other->eps_);
    topic_name_.Swap(&other->topic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparsityThetaScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsityThetaScoreConfig_descriptor_;
  metadata.reflection = SparsityThetaScoreConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SparsityThetaScore::kValueFieldNumber;
const int SparsityThetaScore::kZeroTopicsFieldNumber;
const int SparsityThetaScore::kTotalTopicsFieldNumber;
#endif  // !_MSC_VER

SparsityThetaScore::SparsityThetaScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SparsityThetaScore::InitAsDefaultInstance() {
}

SparsityThetaScore::SparsityThetaScore(const SparsityThetaScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SparsityThetaScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  zero_topics_ = GOOGLE_LONGLONG(0);
  total_topics_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsityThetaScore::~SparsityThetaScore() {
  SharedDtor();
}

void SparsityThetaScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparsityThetaScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsityThetaScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsityThetaScore_descriptor_;
}

const SparsityThetaScore& SparsityThetaScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SparsityThetaScore* SparsityThetaScore::default_instance_ = NULL;

SparsityThetaScore* SparsityThetaScore::New() const {
  return new SparsityThetaScore;
}

void SparsityThetaScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    zero_topics_ = GOOGLE_LONGLONG(0);
    total_topics_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparsityThetaScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zero_topics;
        break;
      }

      // optional int64 zero_topics = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zero_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &zero_topics_)));
          set_has_zero_topics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_topics;
        break;
      }

      // optional int64 total_topics = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_topics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_topics_)));
          set_has_total_topics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparsityThetaScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // optional int64 zero_topics = 2;
  if (has_zero_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->zero_topics(), output);
  }

  // optional int64 total_topics = 3;
  if (has_total_topics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_topics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SparsityThetaScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // optional int64 zero_topics = 2;
  if (has_zero_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->zero_topics(), target);
  }

  // optional int64 total_topics = 3;
  if (has_total_topics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_topics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SparsityThetaScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional int64 zero_topics = 2;
    if (has_zero_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->zero_topics());
    }

    // optional int64 total_topics = 3;
    if (has_total_topics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_topics());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsityThetaScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparsityThetaScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparsityThetaScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparsityThetaScore::MergeFrom(const SparsityThetaScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_zero_topics()) {
      set_zero_topics(from.zero_topics());
    }
    if (from.has_total_topics()) {
      set_total_topics(from.total_topics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparsityThetaScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsityThetaScore::CopyFrom(const SparsityThetaScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsityThetaScore::IsInitialized() const {

  return true;
}

void SparsityThetaScore::Swap(SparsityThetaScore* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(zero_topics_, other->zero_topics_);
    std::swap(total_topics_, other->total_topics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparsityThetaScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsityThetaScore_descriptor_;
  metadata.reflection = SparsityThetaScore_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SparsityPhiScoreConfig::_default_class_id_ = NULL;
#ifndef _MSC_VER
const int SparsityPhiScoreConfig::kEpsFieldNumber;
const int SparsityPhiScoreConfig::kClassIdFieldNumber;
const int SparsityPhiScoreConfig::kTopicNameFieldNumber;
#endif  // !_MSC_VER

SparsityPhiScoreConfig::SparsityPhiScoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SparsityPhiScoreConfig::InitAsDefaultInstance() {
}

SparsityPhiScoreConfig::SparsityPhiScoreConfig(const SparsityPhiScoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SparsityPhiScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  eps_ = 1e-037f;
  class_id_ = const_cast< ::std::string*>(_default_class_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsityPhiScoreConfig::~SparsityPhiScoreConfig() {
  SharedDtor();
}

void SparsityPhiScoreConfig::SharedDtor() {
  if (class_id_ != _default_class_id_) {
    delete class_id_;
  }
  if (this != default_instance_) {
  }
}

void SparsityPhiScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsityPhiScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsityPhiScoreConfig_descriptor_;
}

const SparsityPhiScoreConfig& SparsityPhiScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SparsityPhiScoreConfig* SparsityPhiScoreConfig::default_instance_ = NULL;

SparsityPhiScoreConfig* SparsityPhiScoreConfig::New() const {
  return new SparsityPhiScoreConfig;
}

void SparsityPhiScoreConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eps_ = 1e-037f;
    if (has_class_id()) {
      if (class_id_ != _default_class_id_) {
        class_id_->assign(*_default_class_id_);
      }
    }
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparsityPhiScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float eps = 1 [default = 1e-037];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // optional string class_id = 2 [default = "@default_class"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparsityPhiScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float eps = 1 [default = 1e-037];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eps(), output);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(), output);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SparsityPhiScoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float eps = 1 [default = 1e-037];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eps(), target);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_id(), target);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SparsityPhiScoreConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float eps = 1 [default = 1e-037];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional string class_id = 2 [default = "@default_class"];
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

  }
  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsityPhiScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparsityPhiScoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparsityPhiScoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparsityPhiScoreConfig::MergeFrom(const SparsityPhiScoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparsityPhiScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsityPhiScoreConfig::CopyFrom(const SparsityPhiScoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsityPhiScoreConfig::IsInitialized() const {

  return true;
}

void SparsityPhiScoreConfig::Swap(SparsityPhiScoreConfig* other) {
  if (other != this) {
    std::swap(eps_, other->eps_);
    std::swap(class_id_, other->class_id_);
    topic_name_.Swap(&other->topic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparsityPhiScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsityPhiScoreConfig_descriptor_;
  metadata.reflection = SparsityPhiScoreConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SparsityPhiScore::kValueFieldNumber;
const int SparsityPhiScore::kZeroTokensFieldNumber;
const int SparsityPhiScore::kTotalTokensFieldNumber;
#endif  // !_MSC_VER

SparsityPhiScore::SparsityPhiScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SparsityPhiScore::InitAsDefaultInstance() {
}

SparsityPhiScore::SparsityPhiScore(const SparsityPhiScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SparsityPhiScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  zero_tokens_ = GOOGLE_LONGLONG(0);
  total_tokens_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparsityPhiScore::~SparsityPhiScore() {
  SharedDtor();
}

void SparsityPhiScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparsityPhiScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparsityPhiScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparsityPhiScore_descriptor_;
}

const SparsityPhiScore& SparsityPhiScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

SparsityPhiScore* SparsityPhiScore::default_instance_ = NULL;

SparsityPhiScore* SparsityPhiScore::New() const {
  return new SparsityPhiScore;
}

void SparsityPhiScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    zero_tokens_ = GOOGLE_LONGLONG(0);
    total_tokens_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparsityPhiScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zero_tokens;
        break;
      }

      // optional int64 zero_tokens = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zero_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &zero_tokens_)));
          set_has_zero_tokens();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_tokens;
        break;
      }

      // optional int64 total_tokens = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_tokens_)));
          set_has_total_tokens();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparsityPhiScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // optional int64 zero_tokens = 2;
  if (has_zero_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->zero_tokens(), output);
  }

  // optional int64 total_tokens = 3;
  if (has_total_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->total_tokens(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SparsityPhiScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // optional int64 zero_tokens = 2;
  if (has_zero_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->zero_tokens(), target);
  }

  // optional int64 total_tokens = 3;
  if (has_total_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->total_tokens(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SparsityPhiScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional int64 zero_tokens = 2;
    if (has_zero_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->zero_tokens());
    }

    // optional int64 total_tokens = 3;
    if (has_total_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_tokens());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparsityPhiScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparsityPhiScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparsityPhiScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparsityPhiScore::MergeFrom(const SparsityPhiScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_zero_tokens()) {
      set_zero_tokens(from.zero_tokens());
    }
    if (from.has_total_tokens()) {
      set_total_tokens(from.total_tokens());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparsityPhiScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparsityPhiScore::CopyFrom(const SparsityPhiScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparsityPhiScore::IsInitialized() const {

  return true;
}

void SparsityPhiScore::Swap(SparsityPhiScore* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(zero_tokens_, other->zero_tokens_);
    std::swap(total_tokens_, other->total_tokens_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparsityPhiScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparsityPhiScore_descriptor_;
  metadata.reflection = SparsityPhiScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ItemsProcessedScoreConfig::ItemsProcessedScoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemsProcessedScoreConfig::InitAsDefaultInstance() {
}

ItemsProcessedScoreConfig::ItemsProcessedScoreConfig(const ItemsProcessedScoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemsProcessedScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemsProcessedScoreConfig::~ItemsProcessedScoreConfig() {
  SharedDtor();
}

void ItemsProcessedScoreConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemsProcessedScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemsProcessedScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemsProcessedScoreConfig_descriptor_;
}

const ItemsProcessedScoreConfig& ItemsProcessedScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ItemsProcessedScoreConfig* ItemsProcessedScoreConfig::default_instance_ = NULL;

ItemsProcessedScoreConfig* ItemsProcessedScoreConfig::New() const {
  return new ItemsProcessedScoreConfig;
}

void ItemsProcessedScoreConfig::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemsProcessedScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ItemsProcessedScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemsProcessedScoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemsProcessedScoreConfig::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemsProcessedScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemsProcessedScoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemsProcessedScoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemsProcessedScoreConfig::MergeFrom(const ItemsProcessedScoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemsProcessedScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemsProcessedScoreConfig::CopyFrom(const ItemsProcessedScoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemsProcessedScoreConfig::IsInitialized() const {

  return true;
}

void ItemsProcessedScoreConfig::Swap(ItemsProcessedScoreConfig* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemsProcessedScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemsProcessedScoreConfig_descriptor_;
  metadata.reflection = ItemsProcessedScoreConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemsProcessedScore::kValueFieldNumber;
const int ItemsProcessedScore::kNumBatchesFieldNumber;
#endif  // !_MSC_VER

ItemsProcessedScore::ItemsProcessedScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemsProcessedScore::InitAsDefaultInstance() {
}

ItemsProcessedScore::ItemsProcessedScore(const ItemsProcessedScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemsProcessedScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  num_batches_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemsProcessedScore::~ItemsProcessedScore() {
  SharedDtor();
}

void ItemsProcessedScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemsProcessedScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemsProcessedScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemsProcessedScore_descriptor_;
}

const ItemsProcessedScore& ItemsProcessedScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ItemsProcessedScore* ItemsProcessedScore::default_instance_ = NULL;

ItemsProcessedScore* ItemsProcessedScore::New() const {
  return new ItemsProcessedScore;
}

void ItemsProcessedScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    num_batches_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemsProcessedScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_batches;
        break;
      }

      // optional int32 num_batches = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_batches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_batches_)));
          set_has_num_batches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemsProcessedScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  // optional int32 num_batches = 2 [default = 0];
  if (has_num_batches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_batches(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemsProcessedScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  // optional int32 num_batches = 2 [default = 0];
  if (has_num_batches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_batches(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemsProcessedScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 num_batches = 2 [default = 0];
    if (has_num_batches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_batches());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemsProcessedScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemsProcessedScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemsProcessedScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemsProcessedScore::MergeFrom(const ItemsProcessedScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_num_batches()) {
      set_num_batches(from.num_batches());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemsProcessedScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemsProcessedScore::CopyFrom(const ItemsProcessedScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemsProcessedScore::IsInitialized() const {

  return true;
}

void ItemsProcessedScore::Swap(ItemsProcessedScore* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(num_batches_, other->num_batches_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemsProcessedScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemsProcessedScore_descriptor_;
  metadata.reflection = ItemsProcessedScore_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TopTokensScoreConfig::_default_class_id_ = NULL;
#ifndef _MSC_VER
const int TopTokensScoreConfig::kNumTokensFieldNumber;
const int TopTokensScoreConfig::kClassIdFieldNumber;
const int TopTokensScoreConfig::kTopicNameFieldNumber;
const int TopTokensScoreConfig::kCooccurrenceDictionaryNameFieldNumber;
#endif  // !_MSC_VER

TopTokensScoreConfig::TopTokensScoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopTokensScoreConfig::InitAsDefaultInstance() {
}

TopTokensScoreConfig::TopTokensScoreConfig(const TopTokensScoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopTokensScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  num_tokens_ = 10;
  class_id_ = const_cast< ::std::string*>(_default_class_id_);
  cooccurrence_dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopTokensScoreConfig::~TopTokensScoreConfig() {
  SharedDtor();
}

void TopTokensScoreConfig::SharedDtor() {
  if (class_id_ != _default_class_id_) {
    delete class_id_;
  }
  if (cooccurrence_dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete cooccurrence_dictionary_name_;
  }
  if (this != default_instance_) {
  }
}

void TopTokensScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopTokensScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopTokensScoreConfig_descriptor_;
}

const TopTokensScoreConfig& TopTokensScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopTokensScoreConfig* TopTokensScoreConfig::default_instance_ = NULL;

TopTokensScoreConfig* TopTokensScoreConfig::New() const {
  return new TopTokensScoreConfig;
}

void TopTokensScoreConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_tokens_ = 10;
    if (has_class_id()) {
      if (class_id_ != _default_class_id_) {
        class_id_->assign(*_default_class_id_);
      }
    }
    if (has_cooccurrence_dictionary_name()) {
      if (cooccurrence_dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        cooccurrence_dictionary_name_->clear();
      }
    }
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopTokensScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_tokens = 1 [default = 10];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_tokens_)));
          set_has_num_tokens();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // optional string class_id = 2 [default = "@default_class"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectTag(34)) goto parse_cooccurrence_dictionary_name;
        break;
      }

      // optional string cooccurrence_dictionary_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cooccurrence_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cooccurrence_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopTokensScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_tokens = 1 [default = 10];
  if (has_num_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_tokens(), output);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(), output);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  // optional string cooccurrence_dictionary_name = 4;
  if (has_cooccurrence_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cooccurrence_dictionary_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopTokensScoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num_tokens = 1 [default = 10];
  if (has_num_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_tokens(), target);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_id(), target);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  // optional string cooccurrence_dictionary_name = 4;
  if (has_cooccurrence_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cooccurrence_dictionary_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopTokensScoreConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_tokens = 1 [default = 10];
    if (has_num_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_tokens());
    }

    // optional string class_id = 2 [default = "@default_class"];
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

    // optional string cooccurrence_dictionary_name = 4;
    if (has_cooccurrence_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cooccurrence_dictionary_name());
    }

  }
  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopTokensScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopTokensScoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopTokensScoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopTokensScoreConfig::MergeFrom(const TopTokensScoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_tokens()) {
      set_num_tokens(from.num_tokens());
    }
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_cooccurrence_dictionary_name()) {
      set_cooccurrence_dictionary_name(from.cooccurrence_dictionary_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopTokensScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopTokensScoreConfig::CopyFrom(const TopTokensScoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopTokensScoreConfig::IsInitialized() const {

  return true;
}

void TopTokensScoreConfig::Swap(TopTokensScoreConfig* other) {
  if (other != this) {
    std::swap(num_tokens_, other->num_tokens_);
    std::swap(class_id_, other->class_id_);
    topic_name_.Swap(&other->topic_name_);
    std::swap(cooccurrence_dictionary_name_, other->cooccurrence_dictionary_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopTokensScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopTokensScoreConfig_descriptor_;
  metadata.reflection = TopTokensScoreConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopTokensScore::kNumEntriesFieldNumber;
const int TopTokensScore::kTopicNameFieldNumber;
const int TopTokensScore::kTopicIndexFieldNumber;
const int TopTokensScore::kTokenFieldNumber;
const int TopTokensScore::kWeightFieldNumber;
const int TopTokensScore::kCoherenceFieldNumber;
const int TopTokensScore::kAverageCoherenceFieldNumber;
#endif  // !_MSC_VER

TopTokensScore::TopTokensScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopTokensScore::InitAsDefaultInstance() {
  coherence_ = const_cast< ::artm::FloatArray*>(&::artm::FloatArray::default_instance());
}

TopTokensScore::TopTokensScore(const TopTokensScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopTokensScore::SharedCtor() {
  _cached_size_ = 0;
  num_entries_ = 0;
  coherence_ = NULL;
  average_coherence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopTokensScore::~TopTokensScore() {
  SharedDtor();
}

void TopTokensScore::SharedDtor() {
  if (this != default_instance_) {
    delete coherence_;
  }
}

void TopTokensScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopTokensScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopTokensScore_descriptor_;
}

const TopTokensScore& TopTokensScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopTokensScore* TopTokensScore::default_instance_ = NULL;

TopTokensScore* TopTokensScore::New() const {
  return new TopTokensScore;
}

void TopTokensScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_entries_ = 0;
    if (has_coherence()) {
      if (coherence_ != NULL) coherence_->::artm::FloatArray::Clear();
    }
    average_coherence_ = 0;
  }
  topic_name_.Clear();
  topic_index_.Clear();
  token_.Clear();
  weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopTokensScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_entries_)));
          set_has_num_entries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        if (input->ExpectTag(24)) goto parse_topic_index;
        break;
      }

      // repeated int32 topic_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topic_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_topic_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_topic_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_topic_index;
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // repeated string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        if (input->ExpectTag(45)) goto parse_weight;
        break;
      }

      // repeated float weight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_weight;
        if (input->ExpectTag(50)) goto parse_coherence;
        break;
      }

      // optional .artm.FloatArray coherence = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coherence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coherence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_average_coherence;
        break;
      }

      // optional float average_coherence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_average_coherence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_coherence_)));
          set_has_average_coherence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopTokensScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_entries = 1;
  if (has_num_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_entries(), output);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->topic_name(i), output);
  }

  // repeated int32 topic_index = 3;
  for (int i = 0; i < this->topic_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->topic_index(i), output);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->token(i).data(), this->token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(i), output);
  }

  // repeated float weight = 5;
  for (int i = 0; i < this->weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->weight(i), output);
  }

  // optional .artm.FloatArray coherence = 6;
  if (has_coherence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->coherence(), output);
  }

  // optional float average_coherence = 7;
  if (has_average_coherence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->average_coherence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopTokensScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num_entries = 1;
  if (has_num_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_entries(), target);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->topic_name(i), target);
  }

  // repeated int32 topic_index = 3;
  for (int i = 0; i < this->topic_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->topic_index(i), target);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->token(i), target);
  }

  // repeated float weight = 5;
  for (int i = 0; i < this->weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->weight(i), target);
  }

  // optional .artm.FloatArray coherence = 6;
  if (has_coherence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->coherence(), target);
  }

  // optional float average_coherence = 7;
  if (has_average_coherence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->average_coherence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopTokensScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_entries = 1;
    if (has_num_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_entries());
    }

    // optional .artm.FloatArray coherence = 6;
    if (has_coherence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coherence());
    }

    // optional float average_coherence = 7;
    if (has_average_coherence()) {
      total_size += 1 + 4;
    }

  }
  // repeated string topic_name = 2;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated int32 topic_index = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->topic_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->topic_index(i));
    }
    total_size += 1 * this->topic_index_size() + data_size;
  }

  // repeated string token = 4;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated float weight = 5;
  {
    int data_size = 0;
    data_size = 4 * this->weight_size();
    total_size += 1 * this->weight_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopTokensScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopTokensScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopTokensScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopTokensScore::MergeFrom(const TopTokensScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  topic_index_.MergeFrom(from.topic_index_);
  token_.MergeFrom(from.token_);
  weight_.MergeFrom(from.weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_entries()) {
      set_num_entries(from.num_entries());
    }
    if (from.has_coherence()) {
      mutable_coherence()->::artm::FloatArray::MergeFrom(from.coherence());
    }
    if (from.has_average_coherence()) {
      set_average_coherence(from.average_coherence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopTokensScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopTokensScore::CopyFrom(const TopTokensScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopTokensScore::IsInitialized() const {

  return true;
}

void TopTokensScore::Swap(TopTokensScore* other) {
  if (other != this) {
    std::swap(num_entries_, other->num_entries_);
    topic_name_.Swap(&other->topic_name_);
    topic_index_.Swap(&other->topic_index_);
    token_.Swap(&other->token_);
    weight_.Swap(&other->weight_);
    std::swap(coherence_, other->coherence_);
    std::swap(average_coherence_, other->average_coherence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopTokensScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopTokensScore_descriptor_;
  metadata.reflection = TopTokensScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThetaSnippetScoreConfig::kItemIdFieldNumber;
const int ThetaSnippetScoreConfig::kItemCountFieldNumber;
#endif  // !_MSC_VER

ThetaSnippetScoreConfig::ThetaSnippetScoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThetaSnippetScoreConfig::InitAsDefaultInstance() {
}

ThetaSnippetScoreConfig::ThetaSnippetScoreConfig(const ThetaSnippetScoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThetaSnippetScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  item_count_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThetaSnippetScoreConfig::~ThetaSnippetScoreConfig() {
  SharedDtor();
}

void ThetaSnippetScoreConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThetaSnippetScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThetaSnippetScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThetaSnippetScoreConfig_descriptor_;
}

const ThetaSnippetScoreConfig& ThetaSnippetScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ThetaSnippetScoreConfig* ThetaSnippetScoreConfig::default_instance_ = NULL;

ThetaSnippetScoreConfig* ThetaSnippetScoreConfig::New() const {
  return new ThetaSnippetScoreConfig;
}

void ThetaSnippetScoreConfig::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    item_count_ = 10;
  }
  item_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThetaSnippetScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 item_id = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_count;
        break;
      }

      // optional int32 item_count = 4 [default = 10];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThetaSnippetScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 item_id = 3 [packed = true];
  if (this->item_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_item_id_cached_byte_size_);
  }
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->item_id(i), output);
  }

  // optional int32 item_count = 4 [default = 10];
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThetaSnippetScoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 item_id = 3 [packed = true];
  if (this->item_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _item_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->item_id(i), target);
  }

  // optional int32 item_count = 4 [default = 10];
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThetaSnippetScoreConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 item_count = 4 [default = 10];
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

  }
  // repeated int32 item_id = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _item_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThetaSnippetScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThetaSnippetScoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThetaSnippetScoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThetaSnippetScoreConfig::MergeFrom(const ThetaSnippetScoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThetaSnippetScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThetaSnippetScoreConfig::CopyFrom(const ThetaSnippetScoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThetaSnippetScoreConfig::IsInitialized() const {

  return true;
}

void ThetaSnippetScoreConfig::Swap(ThetaSnippetScoreConfig* other) {
  if (other != this) {
    item_id_.Swap(&other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThetaSnippetScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThetaSnippetScoreConfig_descriptor_;
  metadata.reflection = ThetaSnippetScoreConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThetaSnippetScore::kItemIdFieldNumber;
const int ThetaSnippetScore::kValuesFieldNumber;
#endif  // !_MSC_VER

ThetaSnippetScore::ThetaSnippetScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThetaSnippetScore::InitAsDefaultInstance() {
}

ThetaSnippetScore::ThetaSnippetScore(const ThetaSnippetScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThetaSnippetScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThetaSnippetScore::~ThetaSnippetScore() {
  SharedDtor();
}

void ThetaSnippetScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThetaSnippetScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThetaSnippetScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThetaSnippetScore_descriptor_;
}

const ThetaSnippetScore& ThetaSnippetScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ThetaSnippetScore* ThetaSnippetScore::default_instance_ = NULL;

ThetaSnippetScore* ThetaSnippetScore::New() const {
  return new ThetaSnippetScore;
}

void ThetaSnippetScore::Clear() {
  item_id_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThetaSnippetScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_item_id;
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated .artm.FloatArray values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThetaSnippetScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 item_id = 1;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->item_id(i), output);
  }

  // repeated .artm.FloatArray values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThetaSnippetScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 item_id = 1;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->item_id(i), target);
  }

  // repeated .artm.FloatArray values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThetaSnippetScore::ByteSize() const {
  int total_size = 0;

  // repeated int32 item_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated .artm.FloatArray values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThetaSnippetScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThetaSnippetScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThetaSnippetScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThetaSnippetScore::MergeFrom(const ThetaSnippetScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThetaSnippetScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThetaSnippetScore::CopyFrom(const ThetaSnippetScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThetaSnippetScore::IsInitialized() const {

  return true;
}

void ThetaSnippetScore::Swap(ThetaSnippetScore* other) {
  if (other != this) {
    item_id_.Swap(&other->item_id_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThetaSnippetScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThetaSnippetScore_descriptor_;
  metadata.reflection = ThetaSnippetScore_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TopicKernelScoreConfig::_default_class_id_ = NULL;
#ifndef _MSC_VER
const int TopicKernelScoreConfig::kEpsFieldNumber;
const int TopicKernelScoreConfig::kClassIdFieldNumber;
const int TopicKernelScoreConfig::kTopicNameFieldNumber;
const int TopicKernelScoreConfig::kProbabilityMassThresholdFieldNumber;
const int TopicKernelScoreConfig::kCooccurrenceDictionaryNameFieldNumber;
#endif  // !_MSC_VER

TopicKernelScoreConfig::TopicKernelScoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicKernelScoreConfig::InitAsDefaultInstance() {
}

TopicKernelScoreConfig::TopicKernelScoreConfig(const TopicKernelScoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicKernelScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  eps_ = 1e-037f;
  class_id_ = const_cast< ::std::string*>(_default_class_id_);
  probability_mass_threshold_ = 0.1;
  cooccurrence_dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicKernelScoreConfig::~TopicKernelScoreConfig() {
  SharedDtor();
}

void TopicKernelScoreConfig::SharedDtor() {
  if (class_id_ != _default_class_id_) {
    delete class_id_;
  }
  if (cooccurrence_dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete cooccurrence_dictionary_name_;
  }
  if (this != default_instance_) {
  }
}

void TopicKernelScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicKernelScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicKernelScoreConfig_descriptor_;
}

const TopicKernelScoreConfig& TopicKernelScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicKernelScoreConfig* TopicKernelScoreConfig::default_instance_ = NULL;

TopicKernelScoreConfig* TopicKernelScoreConfig::New() const {
  return new TopicKernelScoreConfig;
}

void TopicKernelScoreConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eps_ = 1e-037f;
    if (has_class_id()) {
      if (class_id_ != _default_class_id_) {
        class_id_->assign(*_default_class_id_);
      }
    }
    probability_mass_threshold_ = 0.1;
    if (has_cooccurrence_dictionary_name()) {
      if (cooccurrence_dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        cooccurrence_dictionary_name_->clear();
      }
    }
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicKernelScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float eps = 1 [default = 1e-037];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // optional string class_id = 2 [default = "@default_class"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectTag(33)) goto parse_probability_mass_threshold;
        break;
      }

      // optional double probability_mass_threshold = 4 [default = 0.1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_probability_mass_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_mass_threshold_)));
          set_has_probability_mass_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cooccurrence_dictionary_name;
        break;
      }

      // optional string cooccurrence_dictionary_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cooccurrence_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cooccurrence_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicKernelScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float eps = 1 [default = 1e-037];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eps(), output);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(), output);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  // optional double probability_mass_threshold = 4 [default = 0.1];
  if (has_probability_mass_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->probability_mass_threshold(), output);
  }

  // optional string cooccurrence_dictionary_name = 5;
  if (has_cooccurrence_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cooccurrence_dictionary_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicKernelScoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float eps = 1 [default = 1e-037];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eps(), target);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_id(), target);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  // optional double probability_mass_threshold = 4 [default = 0.1];
  if (has_probability_mass_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->probability_mass_threshold(), target);
  }

  // optional string cooccurrence_dictionary_name = 5;
  if (has_cooccurrence_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cooccurrence_dictionary_name().data(), this->cooccurrence_dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cooccurrence_dictionary_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicKernelScoreConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float eps = 1 [default = 1e-037];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional string class_id = 2 [default = "@default_class"];
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

    // optional double probability_mass_threshold = 4 [default = 0.1];
    if (has_probability_mass_threshold()) {
      total_size += 1 + 8;
    }

    // optional string cooccurrence_dictionary_name = 5;
    if (has_cooccurrence_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cooccurrence_dictionary_name());
    }

  }
  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicKernelScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicKernelScoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicKernelScoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicKernelScoreConfig::MergeFrom(const TopicKernelScoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_probability_mass_threshold()) {
      set_probability_mass_threshold(from.probability_mass_threshold());
    }
    if (from.has_cooccurrence_dictionary_name()) {
      set_cooccurrence_dictionary_name(from.cooccurrence_dictionary_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicKernelScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicKernelScoreConfig::CopyFrom(const TopicKernelScoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicKernelScoreConfig::IsInitialized() const {

  return true;
}

void TopicKernelScoreConfig::Swap(TopicKernelScoreConfig* other) {
  if (other != this) {
    std::swap(eps_, other->eps_);
    std::swap(class_id_, other->class_id_);
    topic_name_.Swap(&other->topic_name_);
    std::swap(probability_mass_threshold_, other->probability_mass_threshold_);
    std::swap(cooccurrence_dictionary_name_, other->cooccurrence_dictionary_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicKernelScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicKernelScoreConfig_descriptor_;
  metadata.reflection = TopicKernelScoreConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopicKernelScore::kKernelSizeFieldNumber;
const int TopicKernelScore::kKernelPurityFieldNumber;
const int TopicKernelScore::kKernelContrastFieldNumber;
const int TopicKernelScore::kAverageKernelSizeFieldNumber;
const int TopicKernelScore::kAverageKernelPurityFieldNumber;
const int TopicKernelScore::kAverageKernelContrastFieldNumber;
const int TopicKernelScore::kCoherenceFieldNumber;
const int TopicKernelScore::kAverageCoherenceFieldNumber;
const int TopicKernelScore::kKernelTokensFieldNumber;
const int TopicKernelScore::kTopicNameFieldNumber;
#endif  // !_MSC_VER

TopicKernelScore::TopicKernelScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicKernelScore::InitAsDefaultInstance() {
  kernel_size_ = const_cast< ::artm::DoubleArray*>(&::artm::DoubleArray::default_instance());
  kernel_purity_ = const_cast< ::artm::DoubleArray*>(&::artm::DoubleArray::default_instance());
  kernel_contrast_ = const_cast< ::artm::DoubleArray*>(&::artm::DoubleArray::default_instance());
  coherence_ = const_cast< ::artm::DoubleArray*>(&::artm::DoubleArray::default_instance());
  topic_name_ = const_cast< ::artm::StringArray*>(&::artm::StringArray::default_instance());
}

TopicKernelScore::TopicKernelScore(const TopicKernelScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicKernelScore::SharedCtor() {
  _cached_size_ = 0;
  kernel_size_ = NULL;
  kernel_purity_ = NULL;
  kernel_contrast_ = NULL;
  average_kernel_size_ = 0;
  average_kernel_purity_ = 0;
  average_kernel_contrast_ = 0;
  coherence_ = NULL;
  average_coherence_ = 0;
  topic_name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicKernelScore::~TopicKernelScore() {
  SharedDtor();
}

void TopicKernelScore::SharedDtor() {
  if (this != default_instance_) {
    delete kernel_size_;
    delete kernel_purity_;
    delete kernel_contrast_;
    delete coherence_;
    delete topic_name_;
  }
}

void TopicKernelScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicKernelScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicKernelScore_descriptor_;
}

const TopicKernelScore& TopicKernelScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicKernelScore* TopicKernelScore::default_instance_ = NULL;

TopicKernelScore* TopicKernelScore::New() const {
  return new TopicKernelScore;
}

void TopicKernelScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_kernel_size()) {
      if (kernel_size_ != NULL) kernel_size_->::artm::DoubleArray::Clear();
    }
    if (has_kernel_purity()) {
      if (kernel_purity_ != NULL) kernel_purity_->::artm::DoubleArray::Clear();
    }
    if (has_kernel_contrast()) {
      if (kernel_contrast_ != NULL) kernel_contrast_->::artm::DoubleArray::Clear();
    }
    average_kernel_size_ = 0;
    average_kernel_purity_ = 0;
    average_kernel_contrast_ = 0;
    if (has_coherence()) {
      if (coherence_ != NULL) coherence_->::artm::DoubleArray::Clear();
    }
    average_coherence_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_topic_name()) {
      if (topic_name_ != NULL) topic_name_->::artm::StringArray::Clear();
    }
  }
  kernel_tokens_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicKernelScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.DoubleArray kernel_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel_size()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kernel_purity;
        break;
      }

      // optional .artm.DoubleArray kernel_purity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kernel_purity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel_purity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kernel_contrast;
        break;
      }

      // optional .artm.DoubleArray kernel_contrast = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kernel_contrast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel_contrast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_average_kernel_size;
        break;
      }

      // optional double average_kernel_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_average_kernel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_kernel_size_)));
          set_has_average_kernel_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_average_kernel_purity;
        break;
      }

      // optional double average_kernel_purity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_average_kernel_purity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_kernel_purity_)));
          set_has_average_kernel_purity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_average_kernel_contrast;
        break;
      }

      // optional double average_kernel_contrast = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_average_kernel_contrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_kernel_contrast_)));
          set_has_average_kernel_contrast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_coherence;
        break;
      }

      // optional .artm.DoubleArray coherence = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coherence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coherence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_average_coherence;
        break;
      }

      // optional float average_coherence = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_average_coherence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_coherence_)));
          set_has_average_coherence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_kernel_tokens;
        break;
      }

      // repeated .artm.StringArray kernel_tokens = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kernel_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kernel_tokens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_kernel_tokens;
        if (input->ExpectTag(82)) goto parse_topic_name;
        break;
      }

      // optional .artm.StringArray topic_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicKernelScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .artm.DoubleArray kernel_size = 1;
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kernel_size(), output);
  }

  // optional .artm.DoubleArray kernel_purity = 2;
  if (has_kernel_purity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kernel_purity(), output);
  }

  // optional .artm.DoubleArray kernel_contrast = 3;
  if (has_kernel_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->kernel_contrast(), output);
  }

  // optional double average_kernel_size = 4;
  if (has_average_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->average_kernel_size(), output);
  }

  // optional double average_kernel_purity = 5;
  if (has_average_kernel_purity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->average_kernel_purity(), output);
  }

  // optional double average_kernel_contrast = 6;
  if (has_average_kernel_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->average_kernel_contrast(), output);
  }

  // optional .artm.DoubleArray coherence = 7;
  if (has_coherence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->coherence(), output);
  }

  // optional float average_coherence = 8;
  if (has_average_coherence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->average_coherence(), output);
  }

  // repeated .artm.StringArray kernel_tokens = 9;
  for (int i = 0; i < this->kernel_tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->kernel_tokens(i), output);
  }

  // optional .artm.StringArray topic_name = 10;
  if (has_topic_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->topic_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicKernelScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .artm.DoubleArray kernel_size = 1;
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kernel_size(), target);
  }

  // optional .artm.DoubleArray kernel_purity = 2;
  if (has_kernel_purity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kernel_purity(), target);
  }

  // optional .artm.DoubleArray kernel_contrast = 3;
  if (has_kernel_contrast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->kernel_contrast(), target);
  }

  // optional double average_kernel_size = 4;
  if (has_average_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->average_kernel_size(), target);
  }

  // optional double average_kernel_purity = 5;
  if (has_average_kernel_purity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->average_kernel_purity(), target);
  }

  // optional double average_kernel_contrast = 6;
  if (has_average_kernel_contrast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->average_kernel_contrast(), target);
  }

  // optional .artm.DoubleArray coherence = 7;
  if (has_coherence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->coherence(), target);
  }

  // optional float average_coherence = 8;
  if (has_average_coherence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->average_coherence(), target);
  }

  // repeated .artm.StringArray kernel_tokens = 9;
  for (int i = 0; i < this->kernel_tokens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->kernel_tokens(i), target);
  }

  // optional .artm.StringArray topic_name = 10;
  if (has_topic_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->topic_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicKernelScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .artm.DoubleArray kernel_size = 1;
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kernel_size());
    }

    // optional .artm.DoubleArray kernel_purity = 2;
    if (has_kernel_purity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kernel_purity());
    }

    // optional .artm.DoubleArray kernel_contrast = 3;
    if (has_kernel_contrast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kernel_contrast());
    }

    // optional double average_kernel_size = 4;
    if (has_average_kernel_size()) {
      total_size += 1 + 8;
    }

    // optional double average_kernel_purity = 5;
    if (has_average_kernel_purity()) {
      total_size += 1 + 8;
    }

    // optional double average_kernel_contrast = 6;
    if (has_average_kernel_contrast()) {
      total_size += 1 + 8;
    }

    // optional .artm.DoubleArray coherence = 7;
    if (has_coherence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coherence());
    }

    // optional float average_coherence = 8;
    if (has_average_coherence()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .artm.StringArray topic_name = 10;
    if (has_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topic_name());
    }

  }
  // repeated .artm.StringArray kernel_tokens = 9;
  total_size += 1 * this->kernel_tokens_size();
  for (int i = 0; i < this->kernel_tokens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kernel_tokens(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicKernelScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicKernelScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicKernelScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicKernelScore::MergeFrom(const TopicKernelScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  kernel_tokens_.MergeFrom(from.kernel_tokens_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kernel_size()) {
      mutable_kernel_size()->::artm::DoubleArray::MergeFrom(from.kernel_size());
    }
    if (from.has_kernel_purity()) {
      mutable_kernel_purity()->::artm::DoubleArray::MergeFrom(from.kernel_purity());
    }
    if (from.has_kernel_contrast()) {
      mutable_kernel_contrast()->::artm::DoubleArray::MergeFrom(from.kernel_contrast());
    }
    if (from.has_average_kernel_size()) {
      set_average_kernel_size(from.average_kernel_size());
    }
    if (from.has_average_kernel_purity()) {
      set_average_kernel_purity(from.average_kernel_purity());
    }
    if (from.has_average_kernel_contrast()) {
      set_average_kernel_contrast(from.average_kernel_contrast());
    }
    if (from.has_coherence()) {
      mutable_coherence()->::artm::DoubleArray::MergeFrom(from.coherence());
    }
    if (from.has_average_coherence()) {
      set_average_coherence(from.average_coherence());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_topic_name()) {
      mutable_topic_name()->::artm::StringArray::MergeFrom(from.topic_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicKernelScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicKernelScore::CopyFrom(const TopicKernelScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicKernelScore::IsInitialized() const {

  return true;
}

void TopicKernelScore::Swap(TopicKernelScore* other) {
  if (other != this) {
    std::swap(kernel_size_, other->kernel_size_);
    std::swap(kernel_purity_, other->kernel_purity_);
    std::swap(kernel_contrast_, other->kernel_contrast_);
    std::swap(average_kernel_size_, other->average_kernel_size_);
    std::swap(average_kernel_purity_, other->average_kernel_purity_);
    std::swap(average_kernel_contrast_, other->average_kernel_contrast_);
    std::swap(coherence_, other->coherence_);
    std::swap(average_coherence_, other->average_coherence_);
    kernel_tokens_.Swap(&other->kernel_tokens_);
    std::swap(topic_name_, other->topic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicKernelScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicKernelScore_descriptor_;
  metadata.reflection = TopicKernelScore_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TopicMassPhiScoreConfig::_default_class_id_ = NULL;
#ifndef _MSC_VER
const int TopicMassPhiScoreConfig::kEpsFieldNumber;
const int TopicMassPhiScoreConfig::kClassIdFieldNumber;
const int TopicMassPhiScoreConfig::kTopicNameFieldNumber;
#endif  // !_MSC_VER

TopicMassPhiScoreConfig::TopicMassPhiScoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicMassPhiScoreConfig::InitAsDefaultInstance() {
}

TopicMassPhiScoreConfig::TopicMassPhiScoreConfig(const TopicMassPhiScoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicMassPhiScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  eps_ = 1e-037f;
  class_id_ = const_cast< ::std::string*>(_default_class_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicMassPhiScoreConfig::~TopicMassPhiScoreConfig() {
  SharedDtor();
}

void TopicMassPhiScoreConfig::SharedDtor() {
  if (class_id_ != _default_class_id_) {
    delete class_id_;
  }
  if (this != default_instance_) {
  }
}

void TopicMassPhiScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicMassPhiScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicMassPhiScoreConfig_descriptor_;
}

const TopicMassPhiScoreConfig& TopicMassPhiScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicMassPhiScoreConfig* TopicMassPhiScoreConfig::default_instance_ = NULL;

TopicMassPhiScoreConfig* TopicMassPhiScoreConfig::New() const {
  return new TopicMassPhiScoreConfig;
}

void TopicMassPhiScoreConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eps_ = 1e-037f;
    if (has_class_id()) {
      if (class_id_ != _default_class_id_) {
        class_id_->assign(*_default_class_id_);
      }
    }
  }
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicMassPhiScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float eps = 1 [default = 1e-037];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // optional string class_id = 2 [default = "@default_class"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicMassPhiScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float eps = 1 [default = 1e-037];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->eps(), output);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(), output);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicMassPhiScoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float eps = 1 [default = 1e-037];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->eps(), target);
  }

  // optional string class_id = 2 [default = "@default_class"];
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_id(), target);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicMassPhiScoreConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float eps = 1 [default = 1e-037];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional string class_id = 2 [default = "@default_class"];
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

  }
  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicMassPhiScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicMassPhiScoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicMassPhiScoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicMassPhiScoreConfig::MergeFrom(const TopicMassPhiScoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicMassPhiScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicMassPhiScoreConfig::CopyFrom(const TopicMassPhiScoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicMassPhiScoreConfig::IsInitialized() const {

  return true;
}

void TopicMassPhiScoreConfig::Swap(TopicMassPhiScoreConfig* other) {
  if (other != this) {
    std::swap(eps_, other->eps_);
    std::swap(class_id_, other->class_id_);
    topic_name_.Swap(&other->topic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicMassPhiScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicMassPhiScoreConfig_descriptor_;
  metadata.reflection = TopicMassPhiScoreConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopicMassPhiScore::kValueFieldNumber;
const int TopicMassPhiScore::kTopicNameFieldNumber;
const int TopicMassPhiScore::kTopicRatioFieldNumber;
const int TopicMassPhiScore::kTopicMassFieldNumber;
#endif  // !_MSC_VER

TopicMassPhiScore::TopicMassPhiScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicMassPhiScore::InitAsDefaultInstance() {
}

TopicMassPhiScore::TopicMassPhiScore(const TopicMassPhiScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicMassPhiScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicMassPhiScore::~TopicMassPhiScore() {
  SharedDtor();
}

void TopicMassPhiScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicMassPhiScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicMassPhiScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicMassPhiScore_descriptor_;
}

const TopicMassPhiScore& TopicMassPhiScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicMassPhiScore* TopicMassPhiScore::default_instance_ = NULL;

TopicMassPhiScore* TopicMassPhiScore::New() const {
  return new TopicMassPhiScore;
}

void TopicMassPhiScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  topic_name_.Clear();
  topic_ratio_.Clear();
  topic_mass_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicMassPhiScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        if (input->ExpectTag(25)) goto parse_topic_ratio;
        break;
      }

      // repeated double topic_ratio = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_topic_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_topic_ratio())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_topic_ratio())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_topic_ratio;
        if (input->ExpectTag(33)) goto parse_topic_mass;
        break;
      }

      // repeated double topic_mass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_topic_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_topic_mass())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_topic_mass())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_topic_mass;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicMassPhiScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->topic_name(i), output);
  }

  // repeated double topic_ratio = 3;
  for (int i = 0; i < this->topic_ratio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->topic_ratio(i), output);
  }

  // repeated double topic_mass = 4;
  for (int i = 0; i < this->topic_mass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->topic_mass(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicMassPhiScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->topic_name(i), target);
  }

  // repeated double topic_ratio = 3;
  for (int i = 0; i < this->topic_ratio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->topic_ratio(i), target);
  }

  // repeated double topic_mass = 4;
  for (int i = 0; i < this->topic_mass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->topic_mass(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicMassPhiScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  // repeated string topic_name = 2;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated double topic_ratio = 3;
  {
    int data_size = 0;
    data_size = 8 * this->topic_ratio_size();
    total_size += 1 * this->topic_ratio_size() + data_size;
  }

  // repeated double topic_mass = 4;
  {
    int data_size = 0;
    data_size = 8 * this->topic_mass_size();
    total_size += 1 * this->topic_mass_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicMassPhiScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicMassPhiScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicMassPhiScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicMassPhiScore::MergeFrom(const TopicMassPhiScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  topic_ratio_.MergeFrom(from.topic_ratio_);
  topic_mass_.MergeFrom(from.topic_mass_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicMassPhiScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicMassPhiScore::CopyFrom(const TopicMassPhiScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicMassPhiScore::IsInitialized() const {

  return true;
}

void TopicMassPhiScore::Swap(TopicMassPhiScore* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    topic_name_.Swap(&other->topic_name_);
    topic_ratio_.Swap(&other->topic_ratio_);
    topic_mass_.Swap(&other->topic_mass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicMassPhiScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicMassPhiScore_descriptor_;
  metadata.reflection = TopicMassPhiScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClassPrecisionScoreConfig::ClassPrecisionScoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClassPrecisionScoreConfig::InitAsDefaultInstance() {
}

ClassPrecisionScoreConfig::ClassPrecisionScoreConfig(const ClassPrecisionScoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClassPrecisionScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassPrecisionScoreConfig::~ClassPrecisionScoreConfig() {
  SharedDtor();
}

void ClassPrecisionScoreConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClassPrecisionScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassPrecisionScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassPrecisionScoreConfig_descriptor_;
}

const ClassPrecisionScoreConfig& ClassPrecisionScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ClassPrecisionScoreConfig* ClassPrecisionScoreConfig::default_instance_ = NULL;

ClassPrecisionScoreConfig* ClassPrecisionScoreConfig::New() const {
  return new ClassPrecisionScoreConfig;
}

void ClassPrecisionScoreConfig::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassPrecisionScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClassPrecisionScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClassPrecisionScoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClassPrecisionScoreConfig::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassPrecisionScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassPrecisionScoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassPrecisionScoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassPrecisionScoreConfig::MergeFrom(const ClassPrecisionScoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassPrecisionScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassPrecisionScoreConfig::CopyFrom(const ClassPrecisionScoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassPrecisionScoreConfig::IsInitialized() const {

  return true;
}

void ClassPrecisionScoreConfig::Swap(ClassPrecisionScoreConfig* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassPrecisionScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassPrecisionScoreConfig_descriptor_;
  metadata.reflection = ClassPrecisionScoreConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClassPrecisionScore::kValueFieldNumber;
const int ClassPrecisionScore::kErrorFieldNumber;
const int ClassPrecisionScore::kTotalFieldNumber;
#endif  // !_MSC_VER

ClassPrecisionScore::ClassPrecisionScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClassPrecisionScore::InitAsDefaultInstance() {
}

ClassPrecisionScore::ClassPrecisionScore(const ClassPrecisionScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClassPrecisionScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  error_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassPrecisionScore::~ClassPrecisionScore() {
  SharedDtor();
}

void ClassPrecisionScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClassPrecisionScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassPrecisionScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassPrecisionScore_descriptor_;
}

const ClassPrecisionScore& ClassPrecisionScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ClassPrecisionScore* ClassPrecisionScore::default_instance_ = NULL;

ClassPrecisionScore* ClassPrecisionScore::New() const {
  return new ClassPrecisionScore;
}

void ClassPrecisionScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    error_ = 0;
    total_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassPrecisionScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_error;
        break;
      }

      // optional double error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_total;
        break;
      }

      // optional double total = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClassPrecisionScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // optional double error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->error(), output);
  }

  // optional double total = 3;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClassPrecisionScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // optional double error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->error(), target);
  }

  // optional double total = 3;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClassPrecisionScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional double error = 2;
    if (has_error()) {
      total_size += 1 + 8;
    }

    // optional double total = 3;
    if (has_total()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassPrecisionScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassPrecisionScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassPrecisionScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassPrecisionScore::MergeFrom(const ClassPrecisionScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassPrecisionScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassPrecisionScore::CopyFrom(const ClassPrecisionScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassPrecisionScore::IsInitialized() const {

  return true;
}

void ClassPrecisionScore::Swap(ClassPrecisionScore* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(error_, other->error_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassPrecisionScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassPrecisionScore_descriptor_;
  metadata.reflection = ClassPrecisionScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PeakMemoryScoreConfig::PeakMemoryScoreConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeakMemoryScoreConfig::InitAsDefaultInstance() {
}

PeakMemoryScoreConfig::PeakMemoryScoreConfig(const PeakMemoryScoreConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeakMemoryScoreConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeakMemoryScoreConfig::~PeakMemoryScoreConfig() {
  SharedDtor();
}

void PeakMemoryScoreConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PeakMemoryScoreConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeakMemoryScoreConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeakMemoryScoreConfig_descriptor_;
}

const PeakMemoryScoreConfig& PeakMemoryScoreConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

PeakMemoryScoreConfig* PeakMemoryScoreConfig::default_instance_ = NULL;

PeakMemoryScoreConfig* PeakMemoryScoreConfig::New() const {
  return new PeakMemoryScoreConfig;
}

void PeakMemoryScoreConfig::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeakMemoryScoreConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PeakMemoryScoreConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeakMemoryScoreConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeakMemoryScoreConfig::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeakMemoryScoreConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeakMemoryScoreConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeakMemoryScoreConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeakMemoryScoreConfig::MergeFrom(const PeakMemoryScoreConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeakMemoryScoreConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeakMemoryScoreConfig::CopyFrom(const PeakMemoryScoreConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeakMemoryScoreConfig::IsInitialized() const {

  return true;
}

void PeakMemoryScoreConfig::Swap(PeakMemoryScoreConfig* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeakMemoryScoreConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeakMemoryScoreConfig_descriptor_;
  metadata.reflection = PeakMemoryScoreConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeakMemoryScore::kValueFieldNumber;
#endif  // !_MSC_VER

PeakMemoryScore::PeakMemoryScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeakMemoryScore::InitAsDefaultInstance() {
}

PeakMemoryScore::PeakMemoryScore(const PeakMemoryScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeakMemoryScore::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeakMemoryScore::~PeakMemoryScore() {
  SharedDtor();
}

void PeakMemoryScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PeakMemoryScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeakMemoryScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeakMemoryScore_descriptor_;
}

const PeakMemoryScore& PeakMemoryScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

PeakMemoryScore* PeakMemoryScore::default_instance_ = NULL;

PeakMemoryScore* PeakMemoryScore::New() const {
  return new PeakMemoryScore;
}

void PeakMemoryScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeakMemoryScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeakMemoryScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeakMemoryScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeakMemoryScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeakMemoryScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeakMemoryScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeakMemoryScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeakMemoryScore::MergeFrom(const PeakMemoryScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeakMemoryScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeakMemoryScore::CopyFrom(const PeakMemoryScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeakMemoryScore::IsInitialized() const {

  return true;
}

void PeakMemoryScore::Swap(PeakMemoryScore* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeakMemoryScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeakMemoryScore_descriptor_;
  metadata.reflection = PeakMemoryScore_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TopicModel_OperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicModel_OperationType_descriptor_;
}
bool TopicModel_OperationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TopicModel_OperationType TopicModel::Initialize;
const TopicModel_OperationType TopicModel::Increment;
const TopicModel_OperationType TopicModel::Overwrite;
const TopicModel_OperationType TopicModel::Remove;
const TopicModel_OperationType TopicModel::Ignore;
const TopicModel_OperationType TopicModel::OperationType_MIN;
const TopicModel_OperationType TopicModel::OperationType_MAX;
const int TopicModel::OperationType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TopicModel_TopicModelInternals::kNWtFieldNumber;
#endif  // !_MSC_VER

TopicModel_TopicModelInternals::TopicModel_TopicModelInternals()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicModel_TopicModelInternals::InitAsDefaultInstance() {
}

TopicModel_TopicModelInternals::TopicModel_TopicModelInternals(const TopicModel_TopicModelInternals& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicModel_TopicModelInternals::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicModel_TopicModelInternals::~TopicModel_TopicModelInternals() {
  SharedDtor();
}

void TopicModel_TopicModelInternals::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicModel_TopicModelInternals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicModel_TopicModelInternals::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicModel_TopicModelInternals_descriptor_;
}

const TopicModel_TopicModelInternals& TopicModel_TopicModelInternals::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicModel_TopicModelInternals* TopicModel_TopicModelInternals::default_instance_ = NULL;

TopicModel_TopicModelInternals* TopicModel_TopicModelInternals::New() const {
  return new TopicModel_TopicModelInternals;
}

void TopicModel_TopicModelInternals::Clear() {
  n_wt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicModel_TopicModelInternals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.FloatArray n_wt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_n_wt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_n_wt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_n_wt;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicModel_TopicModelInternals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .artm.FloatArray n_wt = 1;
  for (int i = 0; i < this->n_wt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->n_wt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicModel_TopicModelInternals::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .artm.FloatArray n_wt = 1;
  for (int i = 0; i < this->n_wt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->n_wt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicModel_TopicModelInternals::ByteSize() const {
  int total_size = 0;

  // repeated .artm.FloatArray n_wt = 1;
  total_size += 1 * this->n_wt_size();
  for (int i = 0; i < this->n_wt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->n_wt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicModel_TopicModelInternals::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicModel_TopicModelInternals* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicModel_TopicModelInternals*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicModel_TopicModelInternals::MergeFrom(const TopicModel_TopicModelInternals& from) {
  GOOGLE_CHECK_NE(&from, this);
  n_wt_.MergeFrom(from.n_wt_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicModel_TopicModelInternals::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicModel_TopicModelInternals::CopyFrom(const TopicModel_TopicModelInternals& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicModel_TopicModelInternals::IsInitialized() const {

  return true;
}

void TopicModel_TopicModelInternals::Swap(TopicModel_TopicModelInternals* other) {
  if (other != this) {
    n_wt_.Swap(&other->n_wt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicModel_TopicModelInternals::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicModel_TopicModelInternals_descriptor_;
  metadata.reflection = TopicModel_TopicModelInternals_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* TopicModel::_default_name_ = NULL;
#ifndef _MSC_VER
const int TopicModel::kNameFieldNumber;
const int TopicModel::kTopicsCountFieldNumber;
const int TopicModel::kTopicNameFieldNumber;
const int TopicModel::kTokenFieldNumber;
const int TopicModel::kTokenWeightsFieldNumber;
const int TopicModel::kClassIdFieldNumber;
const int TopicModel::kInternalsFieldNumber;
const int TopicModel::kTopicIndexFieldNumber;
const int TopicModel::kOperationTypeFieldNumber;
const int TopicModel::kSeedFieldNumber;
#endif  // !_MSC_VER

TopicModel::TopicModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicModel::InitAsDefaultInstance() {
}

TopicModel::TopicModel(const TopicModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicModel::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  topics_count_ = 0;
  internals_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  seed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicModel::~TopicModel() {
  SharedDtor();
}

void TopicModel::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (internals_ != &::google::protobuf::internal::GetEmptyString()) {
    delete internals_;
  }
  if (this != default_instance_) {
  }
}

void TopicModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicModel_descriptor_;
}

const TopicModel& TopicModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TopicModel* TopicModel::default_instance_ = NULL;

TopicModel* TopicModel::New() const {
  return new TopicModel;
}

void TopicModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    topics_count_ = 0;
    if (has_internals()) {
      if (internals_ != &::google::protobuf::internal::GetEmptyString()) {
        internals_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    seed_ = 0;
  }
  topic_name_.Clear();
  token_.Clear();
  token_weights_.Clear();
  class_id_.Clear();
  topic_index_.Clear();
  operation_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "@model"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topics_count;
        break;
      }

      // optional int32 topics_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topics_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topics_count_)));
          set_has_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // repeated string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        if (input->ExpectTag(42)) goto parse_token_weights;
        break;
      }

      // repeated .artm.FloatArray token_weights = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token_weights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_token_weights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_token_weights;
        if (input->ExpectTag(50)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_class_id;
        if (input->ExpectTag(58)) goto parse_internals;
        break;
      }

      // optional bytes internals = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_internals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_topic_index;
        break;
      }

      // repeated .artm.IntArray topic_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topic_index()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_topic_index;
        if (input->ExpectTag(72)) goto parse_operation_type;
        break;
      }

      // repeated .artm.TopicModel.OperationType operation_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::TopicModel_OperationType_IsValid(value)) {
            add_operation_type(static_cast< ::artm::TopicModel_OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::artm::TopicModel_OperationType_IsValid,
                 this->mutable_operation_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_operation_type;
        if (input->ExpectTag(80)) goto parse_seed;
        break;
      }

      // optional int32 seed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1 [default = "@model"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 topics_count = 2;
  if (has_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topics_count(), output);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->token(i).data(), this->token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(i), output);
  }

  // repeated .artm.FloatArray token_weights = 5;
  for (int i = 0; i < this->token_weights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->token_weights(i), output);
  }

  // repeated string class_id = 6;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->class_id(i), output);
  }

  // optional bytes internals = 7;
  if (has_internals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->internals(), output);
  }

  // repeated .artm.IntArray topic_index = 8;
  for (int i = 0; i < this->topic_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->topic_index(i), output);
  }

  // repeated .artm.TopicModel.OperationType operation_type = 9;
  for (int i = 0; i < this->operation_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->operation_type(i), output);
  }

  // optional int32 seed = 10;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->seed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1 [default = "@model"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 topics_count = 2;
  if (has_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->topics_count(), target);
  }

  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  // repeated string token = 4;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->token(i), target);
  }

  // repeated .artm.FloatArray token_weights = 5;
  for (int i = 0; i < this->token_weights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->token_weights(i), target);
  }

  // repeated string class_id = 6;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->class_id(i), target);
  }

  // optional bytes internals = 7;
  if (has_internals()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->internals(), target);
  }

  // repeated .artm.IntArray topic_index = 8;
  for (int i = 0; i < this->topic_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->topic_index(i), target);
  }

  // repeated .artm.TopicModel.OperationType operation_type = 9;
  for (int i = 0; i < this->operation_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->operation_type(i), target);
  }

  // optional int32 seed = 10;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->seed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "@model"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 topics_count = 2;
    if (has_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topics_count());
    }

    // optional bytes internals = 7;
    if (has_internals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->internals());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 seed = 10;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seed());
    }

  }
  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string token = 4;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated .artm.FloatArray token_weights = 5;
  total_size += 1 * this->token_weights_size();
  for (int i = 0; i < this->token_weights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->token_weights(i));
  }

  // repeated string class_id = 6;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated .artm.IntArray topic_index = 8;
  total_size += 1 * this->topic_index_size();
  for (int i = 0; i < this->topic_index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->topic_index(i));
  }

  // repeated .artm.TopicModel.OperationType operation_type = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->operation_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->operation_type(i));
    }
    total_size += 1 * this->operation_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicModel::MergeFrom(const TopicModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  token_.MergeFrom(from.token_);
  token_weights_.MergeFrom(from.token_weights_);
  class_id_.MergeFrom(from.class_id_);
  topic_index_.MergeFrom(from.topic_index_);
  operation_type_.MergeFrom(from.operation_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_topics_count()) {
      set_topics_count(from.topics_count());
    }
    if (from.has_internals()) {
      set_internals(from.internals());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_seed()) {
      set_seed(from.seed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicModel::CopyFrom(const TopicModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicModel::IsInitialized() const {

  return true;
}

void TopicModel::Swap(TopicModel* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(topics_count_, other->topics_count_);
    topic_name_.Swap(&other->topic_name_);
    token_.Swap(&other->token_);
    token_weights_.Swap(&other->token_weights_);
    class_id_.Swap(&other->class_id_);
    std::swap(internals_, other->internals_);
    topic_index_.Swap(&other->topic_index_);
    operation_type_.Swap(&other->operation_type_);
    std::swap(seed_, other->seed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicModel_descriptor_;
  metadata.reflection = TopicModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThetaMatrix::kItemIdFieldNumber;
const int ThetaMatrix::kItemWeightsFieldNumber;
const int ThetaMatrix::kTopicNameFieldNumber;
const int ThetaMatrix::kTopicsCountFieldNumber;
const int ThetaMatrix::kItemTitleFieldNumber;
const int ThetaMatrix::kTopicIndexFieldNumber;
#endif  // !_MSC_VER

ThetaMatrix::ThetaMatrix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThetaMatrix::InitAsDefaultInstance() {
}

ThetaMatrix::ThetaMatrix(const ThetaMatrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThetaMatrix::SharedCtor() {
  _cached_size_ = 0;
  topics_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThetaMatrix::~ThetaMatrix() {
  SharedDtor();
}

void ThetaMatrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ThetaMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThetaMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThetaMatrix_descriptor_;
}

const ThetaMatrix& ThetaMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ThetaMatrix* ThetaMatrix::default_instance_ = NULL;

ThetaMatrix* ThetaMatrix::New() const {
  return new ThetaMatrix;
}

void ThetaMatrix::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    topics_count_ = 0;
  }
  item_id_.Clear();
  item_weights_.Clear();
  topic_name_.Clear();
  item_title_.Clear();
  topic_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThetaMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        if (input->ExpectTag(26)) goto parse_item_weights;
        break;
      }

      // repeated .artm.FloatArray item_weights = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_weights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_weights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_weights;
        if (input->ExpectTag(34)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        if (input->ExpectTag(40)) goto parse_topics_count;
        break;
      }

      // optional int32 topics_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topics_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topics_count_)));
          set_has_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item_title;
        break;
      }

      // repeated string item_title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_item_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_title(this->item_title_size() - 1).data(),
            this->item_title(this->item_title_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item_title;
        if (input->ExpectTag(58)) goto parse_topic_index;
        break;
      }

      // repeated .artm.IntArray topic_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topic_index()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_topic_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThetaMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->item_id(i), output);
  }

  // repeated .artm.FloatArray item_weights = 3;
  for (int i = 0; i < this->item_weights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_weights(i), output);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topic_name(i), output);
  }

  // optional int32 topics_count = 5;
  if (has_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->topics_count(), output);
  }

  // repeated string item_title = 6;
  for (int i = 0; i < this->item_title_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->item_title(i).data(), this->item_title(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->item_title(i), output);
  }

  // repeated .artm.IntArray topic_index = 7;
  for (int i = 0; i < this->topic_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->topic_index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThetaMatrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 item_id = 2;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->item_id(i), target);
  }

  // repeated .artm.FloatArray item_weights = 3;
  for (int i = 0; i < this->item_weights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_weights(i), target);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topic_name(i), target);
  }

  // optional int32 topics_count = 5;
  if (has_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->topics_count(), target);
  }

  // repeated string item_title = 6;
  for (int i = 0; i < this->item_title_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_title(i).data(), this->item_title(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->item_title(i), target);
  }

  // repeated .artm.IntArray topic_index = 7;
  for (int i = 0; i < this->topic_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->topic_index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThetaMatrix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 topics_count = 5;
    if (has_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topics_count());
    }

  }
  // repeated int32 item_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated .artm.FloatArray item_weights = 3;
  total_size += 1 * this->item_weights_size();
  for (int i = 0; i < this->item_weights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_weights(i));
  }

  // repeated string topic_name = 4;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string item_title = 6;
  total_size += 1 * this->item_title_size();
  for (int i = 0; i < this->item_title_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->item_title(i));
  }

  // repeated .artm.IntArray topic_index = 7;
  total_size += 1 * this->topic_index_size();
  for (int i = 0; i < this->topic_index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->topic_index(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThetaMatrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThetaMatrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThetaMatrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThetaMatrix::MergeFrom(const ThetaMatrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  item_weights_.MergeFrom(from.item_weights_);
  topic_name_.MergeFrom(from.topic_name_);
  item_title_.MergeFrom(from.item_title_);
  topic_index_.MergeFrom(from.topic_index_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_topics_count()) {
      set_topics_count(from.topics_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThetaMatrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThetaMatrix::CopyFrom(const ThetaMatrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThetaMatrix::IsInitialized() const {

  return true;
}

void ThetaMatrix::Swap(ThetaMatrix* other) {
  if (other != this) {
    item_id_.Swap(&other->item_id_);
    item_weights_.Swap(&other->item_weights_);
    topic_name_.Swap(&other->topic_name_);
    std::swap(topics_count_, other->topics_count_);
    item_title_.Swap(&other->item_title_);
    topic_index_.Swap(&other->topic_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThetaMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThetaMatrix_descriptor_;
  metadata.reflection = ThetaMatrix_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CollectionParserConfig_Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionParserConfig_Format_descriptor_;
}
bool CollectionParserConfig_Format_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CollectionParserConfig_Format CollectionParserConfig::BagOfWordsUci;
const CollectionParserConfig_Format CollectionParserConfig::MatrixMarket;
const CollectionParserConfig_Format CollectionParserConfig::VowpalWabbit;
const CollectionParserConfig_Format CollectionParserConfig::Format_MIN;
const CollectionParserConfig_Format CollectionParserConfig::Format_MAX;
const int CollectionParserConfig::Format_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CollectionParserConfig_NameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionParserConfig_NameType_descriptor_;
}
bool CollectionParserConfig_NameType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CollectionParserConfig_NameType CollectionParserConfig::Guid;
const CollectionParserConfig_NameType CollectionParserConfig::Code;
const CollectionParserConfig_NameType CollectionParserConfig::NameType_MIN;
const CollectionParserConfig_NameType CollectionParserConfig::NameType_MAX;
const int CollectionParserConfig::NameType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CollectionParserConfig::kFormatFieldNumber;
const int CollectionParserConfig::kDocwordFilePathFieldNumber;
const int CollectionParserConfig::kVocabFilePathFieldNumber;
const int CollectionParserConfig::kTargetFolderFieldNumber;
const int CollectionParserConfig::kNumItemsPerBatchFieldNumber;
const int CollectionParserConfig::kUseUnityBasedIndicesFieldNumber;
const int CollectionParserConfig::kNameTypeFieldNumber;
const int CollectionParserConfig::kCooccurrenceTokenFieldNumber;
const int CollectionParserConfig::kGatherCoocFieldNumber;
const int CollectionParserConfig::kCooccurrenceClassIdFieldNumber;
const int CollectionParserConfig::kUseSymmetricCoocValuesFieldNumber;
#endif  // !_MSC_VER

CollectionParserConfig::CollectionParserConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectionParserConfig::InitAsDefaultInstance() {
}

CollectionParserConfig::CollectionParserConfig(const CollectionParserConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectionParserConfig::SharedCtor() {
  _cached_size_ = 0;
  format_ = 0;
  docword_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  vocab_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  target_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  num_items_per_batch_ = 1000;
  use_unity_based_indices_ = true;
  name_type_ = 0;
  gather_cooc_ = false;
  use_symmetric_cooc_values_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectionParserConfig::~CollectionParserConfig() {
  SharedDtor();
}

void CollectionParserConfig::SharedDtor() {
  if (docword_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete docword_file_path_;
  }
  if (vocab_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete vocab_file_path_;
  }
  if (target_folder_ != &::google::protobuf::internal::GetEmptyString()) {
    delete target_folder_;
  }
  if (this != default_instance_) {
  }
}

void CollectionParserConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectionParserConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionParserConfig_descriptor_;
}

const CollectionParserConfig& CollectionParserConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

CollectionParserConfig* CollectionParserConfig::default_instance_ = NULL;

CollectionParserConfig* CollectionParserConfig::New() const {
  return new CollectionParserConfig;
}

void CollectionParserConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    format_ = 0;
    if (has_docword_file_path()) {
      if (docword_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
        docword_file_path_->clear();
      }
    }
    if (has_vocab_file_path()) {
      if (vocab_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
        vocab_file_path_->clear();
      }
    }
    if (has_target_folder()) {
      if (target_folder_ != &::google::protobuf::internal::GetEmptyString()) {
        target_folder_->clear();
      }
    }
    num_items_per_batch_ = 1000;
    use_unity_based_indices_ = true;
    name_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gather_cooc_ = false;
    use_symmetric_cooc_values_ = false;
  }
  cooccurrence_token_.Clear();
  cooccurrence_class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectionParserConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.CollectionParserConfig.Format format = 1 [default = BagOfWordsUci];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::CollectionParserConfig_Format_IsValid(value)) {
            set_format(static_cast< ::artm::CollectionParserConfig_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_docword_file_path;
        break;
      }

      // optional string docword_file_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_docword_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docword_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->docword_file_path().data(), this->docword_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vocab_file_path;
        break;
      }

      // optional string vocab_file_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vocab_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vocab_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vocab_file_path().data(), this->vocab_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_target_folder;
        break;
      }

      // optional string target_folder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_folder().data(), this->target_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_items_per_batch;
        break;
      }

      // optional int32 num_items_per_batch = 5 [default = 1000];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_items_per_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_items_per_batch_)));
          set_has_num_items_per_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_use_unity_based_indices;
        break;
      }

      // optional bool use_unity_based_indices = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_unity_based_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_unity_based_indices_)));
          set_has_use_unity_based_indices();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_name_type;
        break;
      }

      // optional .artm.CollectionParserConfig.NameType name_type = 7 [default = Guid];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::CollectionParserConfig_NameType_IsValid(value)) {
            set_name_type(static_cast< ::artm::CollectionParserConfig_NameType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cooccurrence_token;
        break;
      }

      // repeated string cooccurrence_token = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cooccurrence_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cooccurrence_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cooccurrence_token(this->cooccurrence_token_size() - 1).data(),
            this->cooccurrence_token(this->cooccurrence_token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cooccurrence_token;
        if (input->ExpectTag(72)) goto parse_gather_cooc;
        break;
      }

      // optional bool gather_cooc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gather_cooc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gather_cooc_)));
          set_has_gather_cooc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_cooccurrence_class_id;
        break;
      }

      // repeated string cooccurrence_class_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cooccurrence_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cooccurrence_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cooccurrence_class_id(this->cooccurrence_class_id_size() - 1).data(),
            this->cooccurrence_class_id(this->cooccurrence_class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_cooccurrence_class_id;
        if (input->ExpectTag(88)) goto parse_use_symmetric_cooc_values;
        break;
      }

      // optional bool use_symmetric_cooc_values = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_symmetric_cooc_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_symmetric_cooc_values_)));
          set_has_use_symmetric_cooc_values();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollectionParserConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .artm.CollectionParserConfig.Format format = 1 [default = BagOfWordsUci];
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }

  // optional string docword_file_path = 2;
  if (has_docword_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->docword_file_path().data(), this->docword_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->docword_file_path(), output);
  }

  // optional string vocab_file_path = 3;
  if (has_vocab_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vocab_file_path().data(), this->vocab_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vocab_file_path(), output);
  }

  // optional string target_folder = 4;
  if (has_target_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_folder().data(), this->target_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->target_folder(), output);
  }

  // optional int32 num_items_per_batch = 5 [default = 1000];
  if (has_num_items_per_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_items_per_batch(), output);
  }

  // optional bool use_unity_based_indices = 6 [default = true];
  if (has_use_unity_based_indices()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_unity_based_indices(), output);
  }

  // optional .artm.CollectionParserConfig.NameType name_type = 7 [default = Guid];
  if (has_name_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->name_type(), output);
  }

  // repeated string cooccurrence_token = 8;
  for (int i = 0; i < this->cooccurrence_token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cooccurrence_token(i).data(), this->cooccurrence_token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->cooccurrence_token(i), output);
  }

  // optional bool gather_cooc = 9;
  if (has_gather_cooc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->gather_cooc(), output);
  }

  // repeated string cooccurrence_class_id = 10;
  for (int i = 0; i < this->cooccurrence_class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cooccurrence_class_id(i).data(), this->cooccurrence_class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->cooccurrence_class_id(i), output);
  }

  // optional bool use_symmetric_cooc_values = 11 [default = false];
  if (has_use_symmetric_cooc_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->use_symmetric_cooc_values(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectionParserConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .artm.CollectionParserConfig.Format format = 1 [default = BagOfWordsUci];
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }

  // optional string docword_file_path = 2;
  if (has_docword_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->docword_file_path().data(), this->docword_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->docword_file_path(), target);
  }

  // optional string vocab_file_path = 3;
  if (has_vocab_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vocab_file_path().data(), this->vocab_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vocab_file_path(), target);
  }

  // optional string target_folder = 4;
  if (has_target_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_folder().data(), this->target_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->target_folder(), target);
  }

  // optional int32 num_items_per_batch = 5 [default = 1000];
  if (has_num_items_per_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_items_per_batch(), target);
  }

  // optional bool use_unity_based_indices = 6 [default = true];
  if (has_use_unity_based_indices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_unity_based_indices(), target);
  }

  // optional .artm.CollectionParserConfig.NameType name_type = 7 [default = Guid];
  if (has_name_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->name_type(), target);
  }

  // repeated string cooccurrence_token = 8;
  for (int i = 0; i < this->cooccurrence_token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cooccurrence_token(i).data(), this->cooccurrence_token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->cooccurrence_token(i), target);
  }

  // optional bool gather_cooc = 9;
  if (has_gather_cooc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->gather_cooc(), target);
  }

  // repeated string cooccurrence_class_id = 10;
  for (int i = 0; i < this->cooccurrence_class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cooccurrence_class_id(i).data(), this->cooccurrence_class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->cooccurrence_class_id(i), target);
  }

  // optional bool use_symmetric_cooc_values = 11 [default = false];
  if (has_use_symmetric_cooc_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->use_symmetric_cooc_values(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectionParserConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .artm.CollectionParserConfig.Format format = 1 [default = BagOfWordsUci];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional string docword_file_path = 2;
    if (has_docword_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docword_file_path());
    }

    // optional string vocab_file_path = 3;
    if (has_vocab_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vocab_file_path());
    }

    // optional string target_folder = 4;
    if (has_target_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_folder());
    }

    // optional int32 num_items_per_batch = 5 [default = 1000];
    if (has_num_items_per_batch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_items_per_batch());
    }

    // optional bool use_unity_based_indices = 6 [default = true];
    if (has_use_unity_based_indices()) {
      total_size += 1 + 1;
    }

    // optional .artm.CollectionParserConfig.NameType name_type = 7 [default = Guid];
    if (has_name_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->name_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool gather_cooc = 9;
    if (has_gather_cooc()) {
      total_size += 1 + 1;
    }

    // optional bool use_symmetric_cooc_values = 11 [default = false];
    if (has_use_symmetric_cooc_values()) {
      total_size += 1 + 1;
    }

  }
  // repeated string cooccurrence_token = 8;
  total_size += 1 * this->cooccurrence_token_size();
  for (int i = 0; i < this->cooccurrence_token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cooccurrence_token(i));
  }

  // repeated string cooccurrence_class_id = 10;
  total_size += 1 * this->cooccurrence_class_id_size();
  for (int i = 0; i < this->cooccurrence_class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cooccurrence_class_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectionParserConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectionParserConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectionParserConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectionParserConfig::MergeFrom(const CollectionParserConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  cooccurrence_token_.MergeFrom(from.cooccurrence_token_);
  cooccurrence_class_id_.MergeFrom(from.cooccurrence_class_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_docword_file_path()) {
      set_docword_file_path(from.docword_file_path());
    }
    if (from.has_vocab_file_path()) {
      set_vocab_file_path(from.vocab_file_path());
    }
    if (from.has_target_folder()) {
      set_target_folder(from.target_folder());
    }
    if (from.has_num_items_per_batch()) {
      set_num_items_per_batch(from.num_items_per_batch());
    }
    if (from.has_use_unity_based_indices()) {
      set_use_unity_based_indices(from.use_unity_based_indices());
    }
    if (from.has_name_type()) {
      set_name_type(from.name_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gather_cooc()) {
      set_gather_cooc(from.gather_cooc());
    }
    if (from.has_use_symmetric_cooc_values()) {
      set_use_symmetric_cooc_values(from.use_symmetric_cooc_values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectionParserConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionParserConfig::CopyFrom(const CollectionParserConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionParserConfig::IsInitialized() const {

  return true;
}

void CollectionParserConfig::Swap(CollectionParserConfig* other) {
  if (other != this) {
    std::swap(format_, other->format_);
    std::swap(docword_file_path_, other->docword_file_path_);
    std::swap(vocab_file_path_, other->vocab_file_path_);
    std::swap(target_folder_, other->target_folder_);
    std::swap(num_items_per_batch_, other->num_items_per_batch_);
    std::swap(use_unity_based_indices_, other->use_unity_based_indices_);
    std::swap(name_type_, other->name_type_);
    cooccurrence_token_.Swap(&other->cooccurrence_token_);
    std::swap(gather_cooc_, other->gather_cooc_);
    cooccurrence_class_id_.Swap(&other->cooccurrence_class_id_);
    std::swap(use_symmetric_cooc_values_, other->use_symmetric_cooc_values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectionParserConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectionParserConfig_descriptor_;
  metadata.reflection = CollectionParserConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InitializeModelArgs_SourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitializeModelArgs_SourceType_descriptor_;
}
bool InitializeModelArgs_SourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InitializeModelArgs_SourceType InitializeModelArgs::Dictionary;
const InitializeModelArgs_SourceType InitializeModelArgs::Batches;
const InitializeModelArgs_SourceType InitializeModelArgs::SourceType_MIN;
const InitializeModelArgs_SourceType InitializeModelArgs::SourceType_MAX;
const int InitializeModelArgs::SourceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InitializeModelArgs_Filter::kClassIdFieldNumber;
const int InitializeModelArgs_Filter::kMinPercentageFieldNumber;
const int InitializeModelArgs_Filter::kMaxPercentageFieldNumber;
const int InitializeModelArgs_Filter::kMinItemsFieldNumber;
const int InitializeModelArgs_Filter::kMaxItemsFieldNumber;
const int InitializeModelArgs_Filter::kMinTotalCountFieldNumber;
const int InitializeModelArgs_Filter::kMinOneItemCountFieldNumber;
#endif  // !_MSC_VER

InitializeModelArgs_Filter::InitializeModelArgs_Filter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitializeModelArgs_Filter::InitAsDefaultInstance() {
}

InitializeModelArgs_Filter::InitializeModelArgs_Filter(const InitializeModelArgs_Filter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitializeModelArgs_Filter::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  min_percentage_ = 0;
  max_percentage_ = 0;
  min_items_ = 0;
  max_items_ = 0;
  min_total_count_ = 0;
  min_one_item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitializeModelArgs_Filter::~InitializeModelArgs_Filter() {
  SharedDtor();
}

void InitializeModelArgs_Filter::SharedDtor() {
  if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete class_id_;
  }
  if (this != default_instance_) {
  }
}

void InitializeModelArgs_Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitializeModelArgs_Filter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitializeModelArgs_Filter_descriptor_;
}

const InitializeModelArgs_Filter& InitializeModelArgs_Filter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

InitializeModelArgs_Filter* InitializeModelArgs_Filter::default_instance_ = NULL;

InitializeModelArgs_Filter* InitializeModelArgs_Filter::New() const {
  return new InitializeModelArgs_Filter;
}

void InitializeModelArgs_Filter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_class_id()) {
      if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
        class_id_->clear();
      }
    }
    min_percentage_ = 0;
    max_percentage_ = 0;
    min_items_ = 0;
    max_items_ = 0;
    min_total_count_ = 0;
    min_one_item_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitializeModelArgs_Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string class_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_min_percentage;
        break;
      }

      // optional float min_percentage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_percentage_)));
          set_has_min_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_max_percentage;
        break;
      }

      // optional float max_percentage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_percentage_)));
          set_has_max_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_min_items;
        break;
      }

      // optional int32 min_items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_items_)));
          set_has_min_items();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_items;
        break;
      }

      // optional int32 max_items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_items_)));
          set_has_max_items();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_min_total_count;
        break;
      }

      // optional int32 min_total_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_total_count_)));
          set_has_min_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_min_one_item_count;
        break;
      }

      // optional int32 min_one_item_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_one_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_one_item_count_)));
          set_has_min_one_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitializeModelArgs_Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->class_id(), output);
  }

  // optional float min_percentage = 2;
  if (has_min_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_percentage(), output);
  }

  // optional float max_percentage = 3;
  if (has_max_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_percentage(), output);
  }

  // optional int32 min_items = 4;
  if (has_min_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_items(), output);
  }

  // optional int32 max_items = 5;
  if (has_max_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_items(), output);
  }

  // optional int32 min_total_count = 6;
  if (has_min_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->min_total_count(), output);
  }

  // optional int32 min_one_item_count = 7;
  if (has_min_one_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->min_one_item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitializeModelArgs_Filter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->class_id(), target);
  }

  // optional float min_percentage = 2;
  if (has_min_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_percentage(), target);
  }

  // optional float max_percentage = 3;
  if (has_max_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_percentage(), target);
  }

  // optional int32 min_items = 4;
  if (has_min_items()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_items(), target);
  }

  // optional int32 max_items = 5;
  if (has_max_items()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_items(), target);
  }

  // optional int32 min_total_count = 6;
  if (has_min_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->min_total_count(), target);
  }

  // optional int32 min_one_item_count = 7;
  if (has_min_one_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->min_one_item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitializeModelArgs_Filter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

    // optional float min_percentage = 2;
    if (has_min_percentage()) {
      total_size += 1 + 4;
    }

    // optional float max_percentage = 3;
    if (has_max_percentage()) {
      total_size += 1 + 4;
    }

    // optional int32 min_items = 4;
    if (has_min_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_items());
    }

    // optional int32 max_items = 5;
    if (has_max_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_items());
    }

    // optional int32 min_total_count = 6;
    if (has_min_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_total_count());
    }

    // optional int32 min_one_item_count = 7;
    if (has_min_one_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_one_item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitializeModelArgs_Filter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitializeModelArgs_Filter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitializeModelArgs_Filter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitializeModelArgs_Filter::MergeFrom(const InitializeModelArgs_Filter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_min_percentage()) {
      set_min_percentage(from.min_percentage());
    }
    if (from.has_max_percentage()) {
      set_max_percentage(from.max_percentage());
    }
    if (from.has_min_items()) {
      set_min_items(from.min_items());
    }
    if (from.has_max_items()) {
      set_max_items(from.max_items());
    }
    if (from.has_min_total_count()) {
      set_min_total_count(from.min_total_count());
    }
    if (from.has_min_one_item_count()) {
      set_min_one_item_count(from.min_one_item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitializeModelArgs_Filter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitializeModelArgs_Filter::CopyFrom(const InitializeModelArgs_Filter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeModelArgs_Filter::IsInitialized() const {

  return true;
}

void InitializeModelArgs_Filter::Swap(InitializeModelArgs_Filter* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(min_percentage_, other->min_percentage_);
    std::swap(max_percentage_, other->max_percentage_);
    std::swap(min_items_, other->min_items_);
    std::swap(max_items_, other->max_items_);
    std::swap(min_total_count_, other->min_total_count_);
    std::swap(min_one_item_count_, other->min_one_item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitializeModelArgs_Filter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitializeModelArgs_Filter_descriptor_;
  metadata.reflection = InitializeModelArgs_Filter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InitializeModelArgs::kModelNameFieldNumber;
const int InitializeModelArgs::kDictionaryNameFieldNumber;
const int InitializeModelArgs::kTopicsCountFieldNumber;
const int InitializeModelArgs::kTopicNameFieldNumber;
const int InitializeModelArgs::kSeedFieldNumber;
const int InitializeModelArgs::kSourceTypeFieldNumber;
const int InitializeModelArgs::kDiskPathFieldNumber;
const int InitializeModelArgs::kFilterFieldNumber;
const int InitializeModelArgs::kBatchFilenameFieldNumber;
#endif  // !_MSC_VER

InitializeModelArgs::InitializeModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitializeModelArgs::InitAsDefaultInstance() {
}

InitializeModelArgs::InitializeModelArgs(const InitializeModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitializeModelArgs::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  topics_count_ = 0;
  seed_ = -1;
  source_type_ = 0;
  disk_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitializeModelArgs::~InitializeModelArgs() {
  SharedDtor();
}

void InitializeModelArgs::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (disk_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete disk_path_;
  }
  if (this != default_instance_) {
  }
}

void InitializeModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitializeModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitializeModelArgs_descriptor_;
}

const InitializeModelArgs& InitializeModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

InitializeModelArgs* InitializeModelArgs::default_instance_ = NULL;

InitializeModelArgs* InitializeModelArgs::New() const {
  return new InitializeModelArgs;
}

void InitializeModelArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_name_->clear();
      }
    }
    topics_count_ = 0;
    seed_ = -1;
    source_type_ = 0;
    if (has_disk_path()) {
      if (disk_path_ != &::google::protobuf::internal::GetEmptyString()) {
        disk_path_->clear();
      }
    }
  }
  topic_name_.Clear();
  filter_.Clear();
  batch_filename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitializeModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_topics_count;
        break;
      }

      // optional int32 topics_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topics_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topics_count_)));
          set_has_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        if (input->ExpectTag(40)) goto parse_seed;
        break;
      }

      // optional int32 seed = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_source_type;
        break;
      }

      // optional .artm.InitializeModelArgs.SourceType source_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::InitializeModelArgs_SourceType_IsValid(value)) {
            set_source_type(static_cast< ::artm::InitializeModelArgs_SourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_disk_path;
        break;
      }

      // optional string disk_path = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_path().data(), this->disk_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_filter;
        break;
      }

      // repeated .artm.InitializeModelArgs.Filter filter = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_filter;
        if (input->ExpectTag(74)) goto parse_batch_filename;
        break;
      }

      // repeated string batch_filename = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_filename(this->batch_filename_size() - 1).data(),
            this->batch_filename(this->batch_filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_batch_filename;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitializeModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_name(), output);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dictionary_name(), output);
  }

  // optional int32 topics_count = 3;
  if (has_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->topics_count(), output);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topic_name(i), output);
  }

  // optional int32 seed = 5 [default = -1];
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seed(), output);
  }

  // optional .artm.InitializeModelArgs.SourceType source_type = 6;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->source_type(), output);
  }

  // optional string disk_path = 7;
  if (has_disk_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_path().data(), this->disk_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->disk_path(), output);
  }

  // repeated .artm.InitializeModelArgs.Filter filter = 8;
  for (int i = 0; i < this->filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->filter(i), output);
  }

  // repeated string batch_filename = 9;
  for (int i = 0; i < this->batch_filename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->batch_filename(i).data(), this->batch_filename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->batch_filename(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitializeModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dictionary_name(), target);
  }

  // optional int32 topics_count = 3;
  if (has_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->topics_count(), target);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topic_name(i), target);
  }

  // optional int32 seed = 5 [default = -1];
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seed(), target);
  }

  // optional .artm.InitializeModelArgs.SourceType source_type = 6;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->source_type(), target);
  }

  // optional string disk_path = 7;
  if (has_disk_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_path().data(), this->disk_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->disk_path(), target);
  }

  // repeated .artm.InitializeModelArgs.Filter filter = 8;
  for (int i = 0; i < this->filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->filter(i), target);
  }

  // repeated string batch_filename = 9;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->batch_filename(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitializeModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string dictionary_name = 2;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

    // optional int32 topics_count = 3;
    if (has_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topics_count());
    }

    // optional int32 seed = 5 [default = -1];
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seed());
    }

    // optional .artm.InitializeModelArgs.SourceType source_type = 6;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_type());
    }

    // optional string disk_path = 7;
    if (has_disk_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_path());
    }

  }
  // repeated string topic_name = 4;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated .artm.InitializeModelArgs.Filter filter = 8;
  total_size += 1 * this->filter_size();
  for (int i = 0; i < this->filter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filter(i));
  }

  // repeated string batch_filename = 9;
  total_size += 1 * this->batch_filename_size();
  for (int i = 0; i < this->batch_filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_filename(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitializeModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitializeModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitializeModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitializeModelArgs::MergeFrom(const InitializeModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  filter_.MergeFrom(from.filter_);
  batch_filename_.MergeFrom(from.batch_filename_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
    if (from.has_topics_count()) {
      set_topics_count(from.topics_count());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_disk_path()) {
      set_disk_path(from.disk_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitializeModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitializeModelArgs::CopyFrom(const InitializeModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeModelArgs::IsInitialized() const {

  return true;
}

void InitializeModelArgs::Swap(InitializeModelArgs* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(topics_count_, other->topics_count_);
    topic_name_.Swap(&other->topic_name_);
    std::swap(seed_, other->seed_);
    std::swap(source_type_, other->source_type_);
    std::swap(disk_path_, other->disk_path_);
    filter_.Swap(&other->filter_);
    batch_filename_.Swap(&other->batch_filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitializeModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitializeModelArgs_descriptor_;
  metadata.reflection = InitializeModelArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DictionaryData::kNameFieldNumber;
const int DictionaryData::kTokenFieldNumber;
const int DictionaryData::kClassIdFieldNumber;
const int DictionaryData::kTokenValueFieldNumber;
const int DictionaryData::kTokenTfFieldNumber;
const int DictionaryData::kTokenDfFieldNumber;
const int DictionaryData::kCoocFirstIndexFieldNumber;
const int DictionaryData::kCoocSecondIndexFieldNumber;
const int DictionaryData::kCoocValueFieldNumber;
#endif  // !_MSC_VER

DictionaryData::DictionaryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DictionaryData::InitAsDefaultInstance() {
}

DictionaryData::DictionaryData(const DictionaryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DictionaryData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DictionaryData::~DictionaryData() {
  SharedDtor();
}

void DictionaryData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DictionaryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DictionaryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DictionaryData_descriptor_;
}

const DictionaryData& DictionaryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DictionaryData* DictionaryData::default_instance_ = NULL;

DictionaryData* DictionaryData::New() const {
  return new DictionaryData;
}

void DictionaryData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
  }
  token_.Clear();
  class_id_.Clear();
  token_value_.Clear();
  token_tf_.Clear();
  token_df_.Clear();
  cooc_first_index_.Clear();
  cooc_second_index_.Clear();
  cooc_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DictionaryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // repeated string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        if (input->ExpectTag(26)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_class_id;
        if (input->ExpectTag(37)) goto parse_token_value;
        break;
      }

      // repeated float token_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_token_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_token_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_token_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_token_value;
        if (input->ExpectTag(45)) goto parse_token_tf;
        break;
      }

      // repeated float token_tf = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_token_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_token_tf())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_token_tf())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_token_tf;
        if (input->ExpectTag(53)) goto parse_token_df;
        break;
      }

      // repeated float token_df = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_token_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_token_df())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_token_df())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_token_df;
        if (input->ExpectTag(56)) goto parse_cooc_first_index;
        break;
      }

      // repeated int32 cooc_first_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cooc_first_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_cooc_first_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cooc_first_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cooc_first_index;
        if (input->ExpectTag(64)) goto parse_cooc_second_index;
        break;
      }

      // repeated int32 cooc_second_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cooc_second_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_cooc_second_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cooc_second_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cooc_second_index;
        if (input->ExpectTag(77)) goto parse_cooc_value;
        break;
      }

      // repeated float cooc_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cooc_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_cooc_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cooc_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_cooc_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DictionaryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated string token = 2;
  for (int i = 0; i < this->token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->token(i).data(), this->token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(i), output);
  }

  // repeated string class_id = 3;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->class_id(i), output);
  }

  // repeated float token_value = 4;
  for (int i = 0; i < this->token_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->token_value(i), output);
  }

  // repeated float token_tf = 5;
  for (int i = 0; i < this->token_tf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->token_tf(i), output);
  }

  // repeated float token_df = 6;
  for (int i = 0; i < this->token_df_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->token_df(i), output);
  }

  // repeated int32 cooc_first_index = 7;
  for (int i = 0; i < this->cooc_first_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->cooc_first_index(i), output);
  }

  // repeated int32 cooc_second_index = 8;
  for (int i = 0; i < this->cooc_second_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->cooc_second_index(i), output);
  }

  // repeated float cooc_value = 9;
  for (int i = 0; i < this->cooc_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->cooc_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DictionaryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string token = 2;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->token(i), target);
  }

  // repeated string class_id = 3;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->class_id(i), target);
  }

  // repeated float token_value = 4;
  for (int i = 0; i < this->token_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->token_value(i), target);
  }

  // repeated float token_tf = 5;
  for (int i = 0; i < this->token_tf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->token_tf(i), target);
  }

  // repeated float token_df = 6;
  for (int i = 0; i < this->token_df_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->token_df(i), target);
  }

  // repeated int32 cooc_first_index = 7;
  for (int i = 0; i < this->cooc_first_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->cooc_first_index(i), target);
  }

  // repeated int32 cooc_second_index = 8;
  for (int i = 0; i < this->cooc_second_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->cooc_second_index(i), target);
  }

  // repeated float cooc_value = 9;
  for (int i = 0; i < this->cooc_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->cooc_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DictionaryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated string token = 2;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated string class_id = 3;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated float token_value = 4;
  {
    int data_size = 0;
    data_size = 4 * this->token_value_size();
    total_size += 1 * this->token_value_size() + data_size;
  }

  // repeated float token_tf = 5;
  {
    int data_size = 0;
    data_size = 4 * this->token_tf_size();
    total_size += 1 * this->token_tf_size() + data_size;
  }

  // repeated float token_df = 6;
  {
    int data_size = 0;
    data_size = 4 * this->token_df_size();
    total_size += 1 * this->token_df_size() + data_size;
  }

  // repeated int32 cooc_first_index = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->cooc_first_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cooc_first_index(i));
    }
    total_size += 1 * this->cooc_first_index_size() + data_size;
  }

  // repeated int32 cooc_second_index = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->cooc_second_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cooc_second_index(i));
    }
    total_size += 1 * this->cooc_second_index_size() + data_size;
  }

  // repeated float cooc_value = 9;
  {
    int data_size = 0;
    data_size = 4 * this->cooc_value_size();
    total_size += 1 * this->cooc_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictionaryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DictionaryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DictionaryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DictionaryData::MergeFrom(const DictionaryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_.MergeFrom(from.token_);
  class_id_.MergeFrom(from.class_id_);
  token_value_.MergeFrom(from.token_value_);
  token_tf_.MergeFrom(from.token_tf_);
  token_df_.MergeFrom(from.token_df_);
  cooc_first_index_.MergeFrom(from.cooc_first_index_);
  cooc_second_index_.MergeFrom(from.cooc_second_index_);
  cooc_value_.MergeFrom(from.cooc_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DictionaryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictionaryData::CopyFrom(const DictionaryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryData::IsInitialized() const {

  return true;
}

void DictionaryData::Swap(DictionaryData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    token_.Swap(&other->token_);
    class_id_.Swap(&other->class_id_);
    token_value_.Swap(&other->token_value_);
    token_tf_.Swap(&other->token_tf_);
    token_df_.Swap(&other->token_df_);
    cooc_first_index_.Swap(&other->cooc_first_index_);
    cooc_second_index_.Swap(&other->cooc_second_index_);
    cooc_value_.Swap(&other->cooc_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DictionaryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DictionaryData_descriptor_;
  metadata.reflection = DictionaryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FilterDictionaryArgs::kDictionaryNameFieldNumber;
const int FilterDictionaryArgs::kDictionaryTargetNameFieldNumber;
const int FilterDictionaryArgs::kClassIdFieldNumber;
const int FilterDictionaryArgs::kMinDfFieldNumber;
const int FilterDictionaryArgs::kMaxDfFieldNumber;
const int FilterDictionaryArgs::kMinDfRateFieldNumber;
const int FilterDictionaryArgs::kMaxDfRateFieldNumber;
const int FilterDictionaryArgs::kMinTfFieldNumber;
const int FilterDictionaryArgs::kMaxTfFieldNumber;
#endif  // !_MSC_VER

FilterDictionaryArgs::FilterDictionaryArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FilterDictionaryArgs::InitAsDefaultInstance() {
}

FilterDictionaryArgs::FilterDictionaryArgs(const FilterDictionaryArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FilterDictionaryArgs::SharedCtor() {
  _cached_size_ = 0;
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  dictionary_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  min_df_ = 0;
  max_df_ = 0;
  min_df_rate_ = 0;
  max_df_rate_ = 0;
  min_tf_ = 0;
  max_tf_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterDictionaryArgs::~FilterDictionaryArgs() {
  SharedDtor();
}

void FilterDictionaryArgs::SharedDtor() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (dictionary_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_target_name_;
  }
  if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete class_id_;
  }
  if (this != default_instance_) {
  }
}

void FilterDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FilterDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FilterDictionaryArgs_descriptor_;
}

const FilterDictionaryArgs& FilterDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

FilterDictionaryArgs* FilterDictionaryArgs::default_instance_ = NULL;

FilterDictionaryArgs* FilterDictionaryArgs::New() const {
  return new FilterDictionaryArgs;
}

void FilterDictionaryArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_name_->clear();
      }
    }
    if (has_dictionary_target_name()) {
      if (dictionary_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_target_name_->clear();
      }
    }
    if (has_class_id()) {
      if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
        class_id_->clear();
      }
    }
    min_df_ = 0;
    max_df_ = 0;
    min_df_rate_ = 0;
    max_df_rate_ = 0;
    min_tf_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    max_tf_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FilterDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dictionary_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dictionary_target_name;
        break;
      }

      // optional string dictionary_target_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_target_name().data(), this->dictionary_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_class_id;
        break;
      }

      // optional string class_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id().data(), this->class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_min_df;
        break;
      }

      // optional float min_df = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_df_)));
          set_has_min_df();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_max_df;
        break;
      }

      // optional float max_df = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_df_)));
          set_has_max_df();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_min_df_rate;
        break;
      }

      // optional float min_df_rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_df_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_df_rate_)));
          set_has_min_df_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_max_df_rate;
        break;
      }

      // optional float max_df_rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_df_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_df_rate_)));
          set_has_max_df_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_min_tf;
        break;
      }

      // optional float min_tf = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_tf_)));
          set_has_min_tf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_max_tf;
        break;
      }

      // optional float max_tf = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_tf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_tf_)));
          set_has_max_tf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilterDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dictionary_name = 1;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dictionary_name(), output);
  }

  // optional string dictionary_target_name = 2;
  if (has_dictionary_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_target_name().data(), this->dictionary_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dictionary_target_name(), output);
  }

  // optional string class_id = 3;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->class_id(), output);
  }

  // optional float min_df = 4;
  if (has_min_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_df(), output);
  }

  // optional float max_df = 5;
  if (has_max_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_df(), output);
  }

  // optional float min_df_rate = 6;
  if (has_min_df_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->min_df_rate(), output);
  }

  // optional float max_df_rate = 7;
  if (has_max_df_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max_df_rate(), output);
  }

  // optional float min_tf = 8;
  if (has_min_tf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->min_tf(), output);
  }

  // optional float max_tf = 9;
  if (has_max_tf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->max_tf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FilterDictionaryArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dictionary_name = 1;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dictionary_name(), target);
  }

  // optional string dictionary_target_name = 2;
  if (has_dictionary_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_target_name().data(), this->dictionary_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dictionary_target_name(), target);
  }

  // optional string class_id = 3;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id().data(), this->class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->class_id(), target);
  }

  // optional float min_df = 4;
  if (has_min_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_df(), target);
  }

  // optional float max_df = 5;
  if (has_max_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_df(), target);
  }

  // optional float min_df_rate = 6;
  if (has_min_df_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->min_df_rate(), target);
  }

  // optional float max_df_rate = 7;
  if (has_max_df_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->max_df_rate(), target);
  }

  // optional float min_tf = 8;
  if (has_min_tf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->min_tf(), target);
  }

  // optional float max_tf = 9;
  if (has_max_tf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->max_tf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FilterDictionaryArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dictionary_name = 1;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

    // optional string dictionary_target_name = 2;
    if (has_dictionary_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_target_name());
    }

    // optional string class_id = 3;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_id());
    }

    // optional float min_df = 4;
    if (has_min_df()) {
      total_size += 1 + 4;
    }

    // optional float max_df = 5;
    if (has_max_df()) {
      total_size += 1 + 4;
    }

    // optional float min_df_rate = 6;
    if (has_min_df_rate()) {
      total_size += 1 + 4;
    }

    // optional float max_df_rate = 7;
    if (has_max_df_rate()) {
      total_size += 1 + 4;
    }

    // optional float min_tf = 8;
    if (has_min_tf()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float max_tf = 9;
    if (has_max_tf()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FilterDictionaryArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FilterDictionaryArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FilterDictionaryArgs::MergeFrom(const FilterDictionaryArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
    if (from.has_dictionary_target_name()) {
      set_dictionary_target_name(from.dictionary_target_name());
    }
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_min_df()) {
      set_min_df(from.min_df());
    }
    if (from.has_max_df()) {
      set_max_df(from.max_df());
    }
    if (from.has_min_df_rate()) {
      set_min_df_rate(from.min_df_rate());
    }
    if (from.has_max_df_rate()) {
      set_max_df_rate(from.max_df_rate());
    }
    if (from.has_min_tf()) {
      set_min_tf(from.min_tf());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_tf()) {
      set_max_tf(from.max_tf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FilterDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterDictionaryArgs::CopyFrom(const FilterDictionaryArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterDictionaryArgs::IsInitialized() const {

  return true;
}

void FilterDictionaryArgs::Swap(FilterDictionaryArgs* other) {
  if (other != this) {
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(dictionary_target_name_, other->dictionary_target_name_);
    std::swap(class_id_, other->class_id_);
    std::swap(min_df_, other->min_df_);
    std::swap(max_df_, other->max_df_);
    std::swap(min_df_rate_, other->min_df_rate_);
    std::swap(max_df_rate_, other->max_df_rate_);
    std::swap(min_tf_, other->min_tf_);
    std::swap(max_tf_, other->max_tf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FilterDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FilterDictionaryArgs_descriptor_;
  metadata.reflection = FilterDictionaryArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatherDictionaryArgs::kDictionaryTargetNameFieldNumber;
const int GatherDictionaryArgs::kDataPathFieldNumber;
const int GatherDictionaryArgs::kCoocFilePathFieldNumber;
const int GatherDictionaryArgs::kVocabFilePathFieldNumber;
const int GatherDictionaryArgs::kSymmetricCoocValuesFieldNumber;
const int GatherDictionaryArgs::kBatchPathFieldNumber;
#endif  // !_MSC_VER

GatherDictionaryArgs::GatherDictionaryArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GatherDictionaryArgs::InitAsDefaultInstance() {
}

GatherDictionaryArgs::GatherDictionaryArgs(const GatherDictionaryArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GatherDictionaryArgs::SharedCtor() {
  _cached_size_ = 0;
  dictionary_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  cooc_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  vocab_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  symmetric_cooc_values_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatherDictionaryArgs::~GatherDictionaryArgs() {
  SharedDtor();
}

void GatherDictionaryArgs::SharedDtor() {
  if (dictionary_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_target_name_;
  }
  if (data_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete data_path_;
  }
  if (cooc_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete cooc_file_path_;
  }
  if (vocab_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete vocab_file_path_;
  }
  if (this != default_instance_) {
  }
}

void GatherDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatherDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatherDictionaryArgs_descriptor_;
}

const GatherDictionaryArgs& GatherDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GatherDictionaryArgs* GatherDictionaryArgs::default_instance_ = NULL;

GatherDictionaryArgs* GatherDictionaryArgs::New() const {
  return new GatherDictionaryArgs;
}

void GatherDictionaryArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dictionary_target_name()) {
      if (dictionary_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_target_name_->clear();
      }
    }
    if (has_data_path()) {
      if (data_path_ != &::google::protobuf::internal::GetEmptyString()) {
        data_path_->clear();
      }
    }
    if (has_cooc_file_path()) {
      if (cooc_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
        cooc_file_path_->clear();
      }
    }
    if (has_vocab_file_path()) {
      if (vocab_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
        vocab_file_path_->clear();
      }
    }
    symmetric_cooc_values_ = false;
  }
  batch_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatherDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dictionary_target_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_target_name().data(), this->dictionary_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_path;
        break;
      }

      // optional string data_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_path().data(), this->data_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cooc_file_path;
        break;
      }

      // optional string cooc_file_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cooc_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cooc_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cooc_file_path().data(), this->cooc_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_vocab_file_path;
        break;
      }

      // optional string vocab_file_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vocab_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vocab_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vocab_file_path().data(), this->vocab_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_symmetric_cooc_values;
        break;
      }

      // optional bool symmetric_cooc_values = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_symmetric_cooc_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &symmetric_cooc_values_)));
          set_has_symmetric_cooc_values();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_batch_path;
        break;
      }

      // repeated string batch_path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_path(this->batch_path_size() - 1).data(),
            this->batch_path(this->batch_path_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_batch_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GatherDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dictionary_target_name = 1;
  if (has_dictionary_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_target_name().data(), this->dictionary_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dictionary_target_name(), output);
  }

  // optional string data_path = 2;
  if (has_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_path().data(), this->data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data_path(), output);
  }

  // optional string cooc_file_path = 3;
  if (has_cooc_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cooc_file_path().data(), this->cooc_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cooc_file_path(), output);
  }

  // optional string vocab_file_path = 4;
  if (has_vocab_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vocab_file_path().data(), this->vocab_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->vocab_file_path(), output);
  }

  // optional bool symmetric_cooc_values = 5 [default = false];
  if (has_symmetric_cooc_values()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->symmetric_cooc_values(), output);
  }

  // repeated string batch_path = 6;
  for (int i = 0; i < this->batch_path_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->batch_path(i).data(), this->batch_path(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->batch_path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GatherDictionaryArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dictionary_target_name = 1;
  if (has_dictionary_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_target_name().data(), this->dictionary_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dictionary_target_name(), target);
  }

  // optional string data_path = 2;
  if (has_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_path().data(), this->data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_path(), target);
  }

  // optional string cooc_file_path = 3;
  if (has_cooc_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cooc_file_path().data(), this->cooc_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cooc_file_path(), target);
  }

  // optional string vocab_file_path = 4;
  if (has_vocab_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vocab_file_path().data(), this->vocab_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vocab_file_path(), target);
  }

  // optional bool symmetric_cooc_values = 5 [default = false];
  if (has_symmetric_cooc_values()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->symmetric_cooc_values(), target);
  }

  // repeated string batch_path = 6;
  for (int i = 0; i < this->batch_path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_path(i).data(), this->batch_path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->batch_path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GatherDictionaryArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dictionary_target_name = 1;
    if (has_dictionary_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_target_name());
    }

    // optional string data_path = 2;
    if (has_data_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_path());
    }

    // optional string cooc_file_path = 3;
    if (has_cooc_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cooc_file_path());
    }

    // optional string vocab_file_path = 4;
    if (has_vocab_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vocab_file_path());
    }

    // optional bool symmetric_cooc_values = 5 [default = false];
    if (has_symmetric_cooc_values()) {
      total_size += 1 + 1;
    }

  }
  // repeated string batch_path = 6;
  total_size += 1 * this->batch_path_size();
  for (int i = 0; i < this->batch_path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatherDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatherDictionaryArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatherDictionaryArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatherDictionaryArgs::MergeFrom(const GatherDictionaryArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  batch_path_.MergeFrom(from.batch_path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dictionary_target_name()) {
      set_dictionary_target_name(from.dictionary_target_name());
    }
    if (from.has_data_path()) {
      set_data_path(from.data_path());
    }
    if (from.has_cooc_file_path()) {
      set_cooc_file_path(from.cooc_file_path());
    }
    if (from.has_vocab_file_path()) {
      set_vocab_file_path(from.vocab_file_path());
    }
    if (from.has_symmetric_cooc_values()) {
      set_symmetric_cooc_values(from.symmetric_cooc_values());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatherDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatherDictionaryArgs::CopyFrom(const GatherDictionaryArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatherDictionaryArgs::IsInitialized() const {

  return true;
}

void GatherDictionaryArgs::Swap(GatherDictionaryArgs* other) {
  if (other != this) {
    std::swap(dictionary_target_name_, other->dictionary_target_name_);
    std::swap(data_path_, other->data_path_);
    std::swap(cooc_file_path_, other->cooc_file_path_);
    std::swap(vocab_file_path_, other->vocab_file_path_);
    std::swap(symmetric_cooc_values_, other->symmetric_cooc_values_);
    batch_path_.Swap(&other->batch_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatherDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatherDictionaryArgs_descriptor_;
  metadata.reflection = GatherDictionaryArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDictionaryArgs::kDictionaryNameFieldNumber;
#endif  // !_MSC_VER

GetDictionaryArgs::GetDictionaryArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDictionaryArgs::InitAsDefaultInstance() {
}

GetDictionaryArgs::GetDictionaryArgs(const GetDictionaryArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDictionaryArgs::SharedCtor() {
  _cached_size_ = 0;
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDictionaryArgs::~GetDictionaryArgs() {
  SharedDtor();
}

void GetDictionaryArgs::SharedDtor() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (this != default_instance_) {
  }
}

void GetDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDictionaryArgs_descriptor_;
}

const GetDictionaryArgs& GetDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetDictionaryArgs* GetDictionaryArgs::default_instance_ = NULL;

GetDictionaryArgs* GetDictionaryArgs::New() const {
  return new GetDictionaryArgs;
}

void GetDictionaryArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dictionary_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dictionary_name = 1;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dictionary_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDictionaryArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dictionary_name = 1;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dictionary_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDictionaryArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dictionary_name = 1;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDictionaryArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDictionaryArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDictionaryArgs::MergeFrom(const GetDictionaryArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDictionaryArgs::CopyFrom(const GetDictionaryArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDictionaryArgs::IsInitialized() const {

  return true;
}

void GetDictionaryArgs::Swap(GetDictionaryArgs* other) {
  if (other != this) {
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDictionaryArgs_descriptor_;
  metadata.reflection = GetDictionaryArgs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetTopicModelArgs_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTopicModelArgs_RequestType_descriptor_;
}
bool GetTopicModelArgs_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetTopicModelArgs_RequestType GetTopicModelArgs::Pwt;
const GetTopicModelArgs_RequestType GetTopicModelArgs::Nwt;
const GetTopicModelArgs_RequestType GetTopicModelArgs::TopicNames;
const GetTopicModelArgs_RequestType GetTopicModelArgs::Tokens;
const GetTopicModelArgs_RequestType GetTopicModelArgs::RequestType_MIN;
const GetTopicModelArgs_RequestType GetTopicModelArgs::RequestType_MAX;
const int GetTopicModelArgs::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GetTopicModelArgs_MatrixLayout_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTopicModelArgs_MatrixLayout_descriptor_;
}
bool GetTopicModelArgs_MatrixLayout_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetTopicModelArgs_MatrixLayout GetTopicModelArgs::Dense;
const GetTopicModelArgs_MatrixLayout GetTopicModelArgs::Sparse;
const GetTopicModelArgs_MatrixLayout GetTopicModelArgs::MatrixLayout_MIN;
const GetTopicModelArgs_MatrixLayout GetTopicModelArgs::MatrixLayout_MAX;
const int GetTopicModelArgs::MatrixLayout_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetTopicModelArgs::kModelNameFieldNumber;
const int GetTopicModelArgs::kTopicNameFieldNumber;
const int GetTopicModelArgs::kTokenFieldNumber;
const int GetTopicModelArgs::kClassIdFieldNumber;
const int GetTopicModelArgs::kUseSparseFormatFieldNumber;
const int GetTopicModelArgs::kEpsFieldNumber;
const int GetTopicModelArgs::kRequestTypeFieldNumber;
const int GetTopicModelArgs::kMatrixLayoutFieldNumber;
#endif  // !_MSC_VER

GetTopicModelArgs::GetTopicModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTopicModelArgs::InitAsDefaultInstance() {
}

GetTopicModelArgs::GetTopicModelArgs(const GetTopicModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTopicModelArgs::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  use_sparse_format_ = false;
  eps_ = 1e-037f;
  request_type_ = 0;
  matrix_layout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTopicModelArgs::~GetTopicModelArgs() {
  SharedDtor();
}

void GetTopicModelArgs::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (this != default_instance_) {
  }
}

void GetTopicModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTopicModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTopicModelArgs_descriptor_;
}

const GetTopicModelArgs& GetTopicModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetTopicModelArgs* GetTopicModelArgs::default_instance_ = NULL;

GetTopicModelArgs* GetTopicModelArgs::New() const {
  return new GetTopicModelArgs;
}

void GetTopicModelArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
    use_sparse_format_ = false;
    eps_ = 1e-037f;
    request_type_ = 0;
    matrix_layout_ = 0;
  }
  topic_name_.Clear();
  token_.Clear();
  class_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTopicModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_topic_name;
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // repeated string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        if (input->ExpectTag(34)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_class_id;
        if (input->ExpectTag(40)) goto parse_use_sparse_format;
        break;
      }

      // optional bool use_sparse_format = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_sparse_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sparse_format_)));
          set_has_use_sparse_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_eps;
        break;
      }

      // optional float eps = 6 [default = 1e-037];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_request_type;
        break;
      }

      // optional .artm.GetTopicModelArgs.RequestType request_type = 7 [default = Pwt];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::GetTopicModelArgs_RequestType_IsValid(value)) {
            set_request_type(static_cast< ::artm::GetTopicModelArgs_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_matrix_layout;
        break;
      }

      // optional .artm.GetTopicModelArgs.MatrixLayout matrix_layout = 8 [default = Dense];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matrix_layout:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::GetTopicModelArgs_MatrixLayout_IsValid(value)) {
            set_matrix_layout(static_cast< ::artm::GetTopicModelArgs_MatrixLayout >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTopicModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_name(), output);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->topic_name(i), output);
  }

  // repeated string token = 3;
  for (int i = 0; i < this->token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->token(i).data(), this->token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(i), output);
  }

  // repeated string class_id = 4;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->class_id(i), output);
  }

  // optional bool use_sparse_format = 5;
  if (has_use_sparse_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_sparse_format(), output);
  }

  // optional float eps = 6 [default = 1e-037];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->eps(), output);
  }

  // optional .artm.GetTopicModelArgs.RequestType request_type = 7 [default = Pwt];
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->request_type(), output);
  }

  // optional .artm.GetTopicModelArgs.MatrixLayout matrix_layout = 8 [default = Dense];
  if (has_matrix_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->matrix_layout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTopicModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // repeated string topic_name = 2;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->topic_name(i), target);
  }

  // repeated string token = 3;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->token(i), target);
  }

  // repeated string class_id = 4;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->class_id(i), target);
  }

  // optional bool use_sparse_format = 5;
  if (has_use_sparse_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_sparse_format(), target);
  }

  // optional float eps = 6 [default = 1e-037];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->eps(), target);
  }

  // optional .artm.GetTopicModelArgs.RequestType request_type = 7 [default = Pwt];
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->request_type(), target);
  }

  // optional .artm.GetTopicModelArgs.MatrixLayout matrix_layout = 8 [default = Dense];
  if (has_matrix_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->matrix_layout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTopicModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional bool use_sparse_format = 5;
    if (has_use_sparse_format()) {
      total_size += 1 + 1;
    }

    // optional float eps = 6 [default = 1e-037];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional .artm.GetTopicModelArgs.RequestType request_type = 7 [default = Pwt];
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }

    // optional .artm.GetTopicModelArgs.MatrixLayout matrix_layout = 8 [default = Dense];
    if (has_matrix_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->matrix_layout());
    }

  }
  // repeated string topic_name = 2;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string token = 3;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated string class_id = 4;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTopicModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTopicModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTopicModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTopicModelArgs::MergeFrom(const GetTopicModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  token_.MergeFrom(from.token_);
  class_id_.MergeFrom(from.class_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_use_sparse_format()) {
      set_use_sparse_format(from.use_sparse_format());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_matrix_layout()) {
      set_matrix_layout(from.matrix_layout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTopicModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTopicModelArgs::CopyFrom(const GetTopicModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopicModelArgs::IsInitialized() const {

  return true;
}

void GetTopicModelArgs::Swap(GetTopicModelArgs* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    topic_name_.Swap(&other->topic_name_);
    token_.Swap(&other->token_);
    class_id_.Swap(&other->class_id_);
    std::swap(use_sparse_format_, other->use_sparse_format_);
    std::swap(eps_, other->eps_);
    std::swap(request_type_, other->request_type_);
    std::swap(matrix_layout_, other->matrix_layout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTopicModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTopicModelArgs_descriptor_;
  metadata.reflection = GetTopicModelArgs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetThetaMatrixArgs_MatrixLayout_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetThetaMatrixArgs_MatrixLayout_descriptor_;
}
bool GetThetaMatrixArgs_MatrixLayout_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetThetaMatrixArgs_MatrixLayout GetThetaMatrixArgs::Dense;
const GetThetaMatrixArgs_MatrixLayout GetThetaMatrixArgs::Sparse;
const GetThetaMatrixArgs_MatrixLayout GetThetaMatrixArgs::MatrixLayout_MIN;
const GetThetaMatrixArgs_MatrixLayout GetThetaMatrixArgs::MatrixLayout_MAX;
const int GetThetaMatrixArgs::MatrixLayout_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetThetaMatrixArgs::kTopicNameFieldNumber;
const int GetThetaMatrixArgs::kTopicIndexFieldNumber;
const int GetThetaMatrixArgs::kUseSparseFormatFieldNumber;
const int GetThetaMatrixArgs::kEpsFieldNumber;
const int GetThetaMatrixArgs::kMatrixLayoutFieldNumber;
#endif  // !_MSC_VER

GetThetaMatrixArgs::GetThetaMatrixArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetThetaMatrixArgs::InitAsDefaultInstance() {
}

GetThetaMatrixArgs::GetThetaMatrixArgs(const GetThetaMatrixArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetThetaMatrixArgs::SharedCtor() {
  _cached_size_ = 0;
  use_sparse_format_ = false;
  eps_ = 1e-037f;
  matrix_layout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetThetaMatrixArgs::~GetThetaMatrixArgs() {
  SharedDtor();
}

void GetThetaMatrixArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetThetaMatrixArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetThetaMatrixArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetThetaMatrixArgs_descriptor_;
}

const GetThetaMatrixArgs& GetThetaMatrixArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetThetaMatrixArgs* GetThetaMatrixArgs::default_instance_ = NULL;

GetThetaMatrixArgs* GetThetaMatrixArgs::New() const {
  return new GetThetaMatrixArgs;
}

void GetThetaMatrixArgs::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    use_sparse_format_ = false;
    eps_ = 1e-037f;
    matrix_layout_ = 0;
  }
  topic_name_.Clear();
  topic_index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetThetaMatrixArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic_name;
        if (input->ExpectTag(32)) goto parse_topic_index;
        break;
      }

      // repeated int32 topic_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topic_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_topic_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_topic_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_topic_index;
        if (input->ExpectTag(48)) goto parse_use_sparse_format;
        break;
      }

      // optional bool use_sparse_format = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_sparse_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_sparse_format_)));
          set_has_use_sparse_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_eps;
        break;
      }

      // optional float eps = 7 [default = 1e-037];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_matrix_layout;
        break;
      }

      // optional .artm.GetThetaMatrixArgs.MatrixLayout matrix_layout = 8 [default = Dense];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matrix_layout:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::GetThetaMatrixArgs_MatrixLayout_IsValid(value)) {
            set_matrix_layout(static_cast< ::artm::GetThetaMatrixArgs_MatrixLayout >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetThetaMatrixArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic_name(i), output);
  }

  // repeated int32 topic_index = 4;
  for (int i = 0; i < this->topic_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->topic_index(i), output);
  }

  // optional bool use_sparse_format = 6;
  if (has_use_sparse_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_sparse_format(), output);
  }

  // optional float eps = 7 [default = 1e-037];
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->eps(), output);
  }

  // optional .artm.GetThetaMatrixArgs.MatrixLayout matrix_layout = 8 [default = Dense];
  if (has_matrix_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->matrix_layout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetThetaMatrixArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string topic_name = 3;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic_name(i), target);
  }

  // repeated int32 topic_index = 4;
  for (int i = 0; i < this->topic_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->topic_index(i), target);
  }

  // optional bool use_sparse_format = 6;
  if (has_use_sparse_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_sparse_format(), target);
  }

  // optional float eps = 7 [default = 1e-037];
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->eps(), target);
  }

  // optional .artm.GetThetaMatrixArgs.MatrixLayout matrix_layout = 8 [default = Dense];
  if (has_matrix_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->matrix_layout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetThetaMatrixArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool use_sparse_format = 6;
    if (has_use_sparse_format()) {
      total_size += 1 + 1;
    }

    // optional float eps = 7 [default = 1e-037];
    if (has_eps()) {
      total_size += 1 + 4;
    }

    // optional .artm.GetThetaMatrixArgs.MatrixLayout matrix_layout = 8 [default = Dense];
    if (has_matrix_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->matrix_layout());
    }

  }
  // repeated string topic_name = 3;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated int32 topic_index = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->topic_index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->topic_index(i));
    }
    total_size += 1 * this->topic_index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetThetaMatrixArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetThetaMatrixArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetThetaMatrixArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetThetaMatrixArgs::MergeFrom(const GetThetaMatrixArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  topic_index_.MergeFrom(from.topic_index_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_use_sparse_format()) {
      set_use_sparse_format(from.use_sparse_format());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
    if (from.has_matrix_layout()) {
      set_matrix_layout(from.matrix_layout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetThetaMatrixArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetThetaMatrixArgs::CopyFrom(const GetThetaMatrixArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetThetaMatrixArgs::IsInitialized() const {

  return true;
}

void GetThetaMatrixArgs::Swap(GetThetaMatrixArgs* other) {
  if (other != this) {
    topic_name_.Swap(&other->topic_name_);
    topic_index_.Swap(&other->topic_index_);
    std::swap(use_sparse_format_, other->use_sparse_format_);
    std::swap(eps_, other->eps_);
    std::swap(matrix_layout_, other->matrix_layout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetThetaMatrixArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetThetaMatrixArgs_descriptor_;
  metadata.reflection = GetThetaMatrixArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetScoreValueArgs::kModelNameFieldNumber;
const int GetScoreValueArgs::kScoreNameFieldNumber;
#endif  // !_MSC_VER

GetScoreValueArgs::GetScoreValueArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetScoreValueArgs::InitAsDefaultInstance() {
}

GetScoreValueArgs::GetScoreValueArgs(const GetScoreValueArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetScoreValueArgs::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  score_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetScoreValueArgs::~GetScoreValueArgs() {
  SharedDtor();
}

void GetScoreValueArgs::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete score_name_;
  }
  if (this != default_instance_) {
  }
}

void GetScoreValueArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetScoreValueArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetScoreValueArgs_descriptor_;
}

const GetScoreValueArgs& GetScoreValueArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetScoreValueArgs* GetScoreValueArgs::default_instance_ = NULL;

GetScoreValueArgs* GetScoreValueArgs::New() const {
  return new GetScoreValueArgs;
}

void GetScoreValueArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
    if (has_score_name()) {
      if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
        score_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetScoreValueArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_score_name;
        break;
      }

      // optional string score_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_score_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->score_name().data(), this->score_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetScoreValueArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_name(), output);
  }

  // optional string score_name = 2;
  if (has_score_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score_name().data(), this->score_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->score_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetScoreValueArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string score_name = 2;
  if (has_score_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score_name().data(), this->score_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->score_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetScoreValueArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string score_name = 2;
    if (has_score_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->score_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetScoreValueArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetScoreValueArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetScoreValueArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetScoreValueArgs::MergeFrom(const GetScoreValueArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
    if (from.has_score_name()) {
      set_score_name(from.score_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetScoreValueArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScoreValueArgs::CopyFrom(const GetScoreValueArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScoreValueArgs::IsInitialized() const {

  return true;
}

void GetScoreValueArgs::Swap(GetScoreValueArgs* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(score_name_, other->score_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetScoreValueArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetScoreValueArgs_descriptor_;
  metadata.reflection = GetScoreValueArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetScoreArrayArgs::kScoreNameFieldNumber;
#endif  // !_MSC_VER

GetScoreArrayArgs::GetScoreArrayArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetScoreArrayArgs::InitAsDefaultInstance() {
}

GetScoreArrayArgs::GetScoreArrayArgs(const GetScoreArrayArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetScoreArrayArgs::SharedCtor() {
  _cached_size_ = 0;
  score_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetScoreArrayArgs::~GetScoreArrayArgs() {
  SharedDtor();
}

void GetScoreArrayArgs::SharedDtor() {
  if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete score_name_;
  }
  if (this != default_instance_) {
  }
}

void GetScoreArrayArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetScoreArrayArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetScoreArrayArgs_descriptor_;
}

const GetScoreArrayArgs& GetScoreArrayArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetScoreArrayArgs* GetScoreArrayArgs::default_instance_ = NULL;

GetScoreArrayArgs* GetScoreArrayArgs::New() const {
  return new GetScoreArrayArgs;
}

void GetScoreArrayArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_score_name()) {
      if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
        score_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetScoreArrayArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string score_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_score_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->score_name().data(), this->score_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetScoreArrayArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string score_name = 2;
  if (has_score_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score_name().data(), this->score_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->score_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetScoreArrayArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string score_name = 2;
  if (has_score_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->score_name().data(), this->score_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->score_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetScoreArrayArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string score_name = 2;
    if (has_score_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->score_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetScoreArrayArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetScoreArrayArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetScoreArrayArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetScoreArrayArgs::MergeFrom(const GetScoreArrayArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score_name()) {
      set_score_name(from.score_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetScoreArrayArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScoreArrayArgs::CopyFrom(const GetScoreArrayArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScoreArrayArgs::IsInitialized() const {

  return true;
}

void GetScoreArrayArgs::Swap(GetScoreArrayArgs* other) {
  if (other != this) {
    std::swap(score_name_, other->score_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetScoreArrayArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetScoreArrayArgs_descriptor_;
  metadata.reflection = GetScoreArrayArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExportModelArgs::kFileNameFieldNumber;
const int ExportModelArgs::kModelNameFieldNumber;
#endif  // !_MSC_VER

ExportModelArgs::ExportModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExportModelArgs::InitAsDefaultInstance() {
}

ExportModelArgs::ExportModelArgs(const ExportModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExportModelArgs::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExportModelArgs::~ExportModelArgs() {
  SharedDtor();
}

void ExportModelArgs::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete file_name_;
  }
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (this != default_instance_) {
  }
}

void ExportModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportModelArgs_descriptor_;
}

const ExportModelArgs& ExportModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ExportModelArgs* ExportModelArgs::default_instance_ = NULL;

ExportModelArgs* ExportModelArgs::New() const {
  return new ExportModelArgs;
}

void ExportModelArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
        file_name_->clear();
      }
    }
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExportModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_model_name;
        break;
      }

      // optional string model_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExportModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_name(), output);
  }

  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->model_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExportModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExportModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string model_name = 2;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExportModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExportModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExportModelArgs::MergeFrom(const ExportModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExportModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportModelArgs::CopyFrom(const ExportModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportModelArgs::IsInitialized() const {

  return true;
}

void ExportModelArgs::Swap(ExportModelArgs* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(model_name_, other->model_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExportModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExportModelArgs_descriptor_;
  metadata.reflection = ExportModelArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImportModelArgs::kFileNameFieldNumber;
const int ImportModelArgs::kModelNameFieldNumber;
#endif  // !_MSC_VER

ImportModelArgs::ImportModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImportModelArgs::InitAsDefaultInstance() {
}

ImportModelArgs::ImportModelArgs(const ImportModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImportModelArgs::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportModelArgs::~ImportModelArgs() {
  SharedDtor();
}

void ImportModelArgs::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete file_name_;
  }
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (this != default_instance_) {
  }
}

void ImportModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportModelArgs_descriptor_;
}

const ImportModelArgs& ImportModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ImportModelArgs* ImportModelArgs::default_instance_ = NULL;

ImportModelArgs* ImportModelArgs::New() const {
  return new ImportModelArgs;
}

void ImportModelArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
        file_name_->clear();
      }
    }
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImportModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_model_name;
        break;
      }

      // optional string model_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImportModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_name(), output);
  }

  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->model_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImportModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional string model_name = 2;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImportModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string model_name = 2;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImportModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImportModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImportModelArgs::MergeFrom(const ImportModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImportModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportModelArgs::CopyFrom(const ImportModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportModelArgs::IsInitialized() const {

  return true;
}

void ImportModelArgs::Swap(ImportModelArgs* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(model_name_, other->model_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImportModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportModelArgs_descriptor_;
  metadata.reflection = ImportModelArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttachModelArgs::kModelNameFieldNumber;
#endif  // !_MSC_VER

AttachModelArgs::AttachModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttachModelArgs::InitAsDefaultInstance() {
}

AttachModelArgs::AttachModelArgs(const AttachModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttachModelArgs::SharedCtor() {
  _cached_size_ = 0;
  model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttachModelArgs::~AttachModelArgs() {
  SharedDtor();
}

void AttachModelArgs::SharedDtor() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (this != default_instance_) {
  }
}

void AttachModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttachModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttachModelArgs_descriptor_;
}

const AttachModelArgs& AttachModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

AttachModelArgs* AttachModelArgs::default_instance_ = NULL;

AttachModelArgs* AttachModelArgs::New() const {
  return new AttachModelArgs;
}

void AttachModelArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_model_name()) {
      if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
        model_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttachModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttachModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->model_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttachModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttachModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttachModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttachModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttachModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttachModelArgs::MergeFrom(const AttachModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_model_name(from.model_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttachModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttachModelArgs::CopyFrom(const AttachModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachModelArgs::IsInitialized() const {

  return true;
}

void AttachModelArgs::Swap(AttachModelArgs* other) {
  if (other != this) {
    std::swap(model_name_, other->model_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttachModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttachModelArgs_descriptor_;
  metadata.reflection = AttachModelArgs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProcessBatchesArgs_ThetaMatrixType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessBatchesArgs_ThetaMatrixType_descriptor_;
}
bool ProcessBatchesArgs_ThetaMatrixType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProcessBatchesArgs_ThetaMatrixType ProcessBatchesArgs::None;
const ProcessBatchesArgs_ThetaMatrixType ProcessBatchesArgs::Dense;
const ProcessBatchesArgs_ThetaMatrixType ProcessBatchesArgs::Sparse;
const ProcessBatchesArgs_ThetaMatrixType ProcessBatchesArgs::Cache;
const ProcessBatchesArgs_ThetaMatrixType ProcessBatchesArgs::DensePtdw;
const ProcessBatchesArgs_ThetaMatrixType ProcessBatchesArgs::SparsePtdw;
const ProcessBatchesArgs_ThetaMatrixType ProcessBatchesArgs::ThetaMatrixType_MIN;
const ProcessBatchesArgs_ThetaMatrixType ProcessBatchesArgs::ThetaMatrixType_MAX;
const int ProcessBatchesArgs::ThetaMatrixType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProcessBatchesArgs::kNwtTargetNameFieldNumber;
const int ProcessBatchesArgs::kBatchFilenameFieldNumber;
const int ProcessBatchesArgs::kPwtSourceNameFieldNumber;
const int ProcessBatchesArgs::kInnerIterationsCountFieldNumber;
const int ProcessBatchesArgs::kRegularizerNameFieldNumber;
const int ProcessBatchesArgs::kRegularizerTauFieldNumber;
const int ProcessBatchesArgs::kClassIdFieldNumber;
const int ProcessBatchesArgs::kClassWeightFieldNumber;
const int ProcessBatchesArgs::kReuseThetaFieldNumber;
const int ProcessBatchesArgs::kOptForAvxFieldNumber;
const int ProcessBatchesArgs::kThetaMatrixTypeFieldNumber;
const int ProcessBatchesArgs::kBatchWeightFieldNumber;
const int ProcessBatchesArgs::kPredictClassIdFieldNumber;
const int ProcessBatchesArgs::kBatchFieldNumber;
const int ProcessBatchesArgs::kUseRandomThetaFieldNumber;
const int ProcessBatchesArgs::kTopicNameFieldNumber;
#endif  // !_MSC_VER

ProcessBatchesArgs::ProcessBatchesArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessBatchesArgs::InitAsDefaultInstance() {
}

ProcessBatchesArgs::ProcessBatchesArgs(const ProcessBatchesArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessBatchesArgs::SharedCtor() {
  _cached_size_ = 0;
  nwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  pwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  inner_iterations_count_ = 10;
  reuse_theta_ = false;
  opt_for_avx_ = true;
  theta_matrix_type_ = 3;
  predict_class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  use_random_theta_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessBatchesArgs::~ProcessBatchesArgs() {
  SharedDtor();
}

void ProcessBatchesArgs::SharedDtor() {
  if (nwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete nwt_target_name_;
  }
  if (pwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pwt_source_name_;
  }
  if (predict_class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete predict_class_id_;
  }
  if (this != default_instance_) {
  }
}

void ProcessBatchesArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessBatchesArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessBatchesArgs_descriptor_;
}

const ProcessBatchesArgs& ProcessBatchesArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ProcessBatchesArgs* ProcessBatchesArgs::default_instance_ = NULL;

ProcessBatchesArgs* ProcessBatchesArgs::New() const {
  return new ProcessBatchesArgs;
}

void ProcessBatchesArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nwt_target_name()) {
      if (nwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
        nwt_target_name_->clear();
      }
    }
    if (has_pwt_source_name()) {
      if (pwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
        pwt_source_name_->clear();
      }
    }
    inner_iterations_count_ = 10;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reuse_theta_ = false;
    opt_for_avx_ = true;
    theta_matrix_type_ = 3;
    if (has_predict_class_id()) {
      if (predict_class_id_ != &::google::protobuf::internal::GetEmptyString()) {
        predict_class_id_->clear();
      }
    }
    use_random_theta_ = false;
  }
  batch_filename_.Clear();
  regularizer_name_.Clear();
  regularizer_tau_.Clear();
  class_id_.Clear();
  class_weight_.Clear();
  batch_weight_.Clear();
  batch_.Clear();
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessBatchesArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nwt_target_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwt_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nwt_target_name().data(), this->nwt_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_batch_filename;
        break;
      }

      // repeated string batch_filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_filename(this->batch_filename_size() - 1).data(),
            this->batch_filename(this->batch_filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_batch_filename;
        if (input->ExpectTag(26)) goto parse_pwt_source_name;
        break;
      }

      // optional string pwt_source_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwt_source_name().data(), this->pwt_source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inner_iterations_count;
        break;
      }

      // optional int32 inner_iterations_count = 4 [default = 10];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inner_iterations_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_iterations_count_)));
          set_has_inner_iterations_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_regularizer_name;
        break;
      }

      // repeated string regularizer_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regularizer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_regularizer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regularizer_name(this->regularizer_name_size() - 1).data(),
            this->regularizer_name(this->regularizer_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_regularizer_name;
        if (input->ExpectTag(57)) goto parse_regularizer_tau;
        break;
      }

      // repeated double regularizer_tau = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_regularizer_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_regularizer_tau())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_regularizer_tau())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_regularizer_tau;
        if (input->ExpectTag(66)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_class_id;
        if (input->ExpectTag(77)) goto parse_class_weight;
        break;
      }

      // repeated float class_weight = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_class_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_class_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_class_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_class_weight;
        if (input->ExpectTag(80)) goto parse_reuse_theta;
        break;
      }

      // optional bool reuse_theta = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reuse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reuse_theta_)));
          set_has_reuse_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_opt_for_avx;
        break;
      }

      // optional bool opt_for_avx = 11 [default = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_for_avx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opt_for_avx_)));
          set_has_opt_for_avx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_theta_matrix_type;
        break;
      }

      // optional .artm.ProcessBatchesArgs.ThetaMatrixType theta_matrix_type = 14 [default = Cache];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_theta_matrix_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::ProcessBatchesArgs_ThetaMatrixType_IsValid(value)) {
            set_theta_matrix_type(static_cast< ::artm::ProcessBatchesArgs_ThetaMatrixType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_batch_weight;
        break;
      }

      // repeated float batch_weight = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_batch_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 125, input, this->mutable_batch_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_batch_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_batch_weight;
        if (input->ExpectTag(138)) goto parse_predict_class_id;
        break;
      }

      // optional string predict_class_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_predict_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->predict_class_id().data(), this->predict_class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_batch;
        break;
      }

      // repeated .artm.Batch batch = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_batch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_batch;
        if (input->ExpectTag(152)) goto parse_use_random_theta;
        break;
      }

      // optional bool use_random_theta = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_random_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_random_theta_)));
          set_has_use_random_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_topic_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessBatchesArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nwt_target_name = 1;
  if (has_nwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwt_target_name().data(), this->nwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nwt_target_name(), output);
  }

  // repeated string batch_filename = 2;
  for (int i = 0; i < this->batch_filename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->batch_filename(i).data(), this->batch_filename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->batch_filename(i), output);
  }

  // optional string pwt_source_name = 3;
  if (has_pwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwt_source_name().data(), this->pwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwt_source_name(), output);
  }

  // optional int32 inner_iterations_count = 4 [default = 10];
  if (has_inner_iterations_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inner_iterations_count(), output);
  }

  // repeated string regularizer_name = 6;
  for (int i = 0; i < this->regularizer_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->regularizer_name(i).data(), this->regularizer_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->regularizer_name(i), output);
  }

  // repeated double regularizer_tau = 7;
  for (int i = 0; i < this->regularizer_tau_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->regularizer_tau(i), output);
  }

  // repeated string class_id = 8;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->class_id(i), output);
  }

  // repeated float class_weight = 9;
  for (int i = 0; i < this->class_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->class_weight(i), output);
  }

  // optional bool reuse_theta = 10 [default = false];
  if (has_reuse_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->reuse_theta(), output);
  }

  // optional bool opt_for_avx = 11 [default = true];
  if (has_opt_for_avx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->opt_for_avx(), output);
  }

  // optional .artm.ProcessBatchesArgs.ThetaMatrixType theta_matrix_type = 14 [default = Cache];
  if (has_theta_matrix_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->theta_matrix_type(), output);
  }

  // repeated float batch_weight = 15;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      15, this->batch_weight(i), output);
  }

  // optional string predict_class_id = 17;
  if (has_predict_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predict_class_id().data(), this->predict_class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->predict_class_id(), output);
  }

  // repeated .artm.Batch batch = 18;
  for (int i = 0; i < this->batch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->batch(i), output);
  }

  // optional bool use_random_theta = 19 [default = false];
  if (has_use_random_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->use_random_theta(), output);
  }

  // repeated string topic_name = 20;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->topic_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessBatchesArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nwt_target_name = 1;
  if (has_nwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwt_target_name().data(), this->nwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nwt_target_name(), target);
  }

  // repeated string batch_filename = 2;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->batch_filename(i), target);
  }

  // optional string pwt_source_name = 3;
  if (has_pwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwt_source_name().data(), this->pwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwt_source_name(), target);
  }

  // optional int32 inner_iterations_count = 4 [default = 10];
  if (has_inner_iterations_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inner_iterations_count(), target);
  }

  // repeated string regularizer_name = 6;
  for (int i = 0; i < this->regularizer_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regularizer_name(i).data(), this->regularizer_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->regularizer_name(i), target);
  }

  // repeated double regularizer_tau = 7;
  for (int i = 0; i < this->regularizer_tau_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->regularizer_tau(i), target);
  }

  // repeated string class_id = 8;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->class_id(i), target);
  }

  // repeated float class_weight = 9;
  for (int i = 0; i < this->class_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->class_weight(i), target);
  }

  // optional bool reuse_theta = 10 [default = false];
  if (has_reuse_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->reuse_theta(), target);
  }

  // optional bool opt_for_avx = 11 [default = true];
  if (has_opt_for_avx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->opt_for_avx(), target);
  }

  // optional .artm.ProcessBatchesArgs.ThetaMatrixType theta_matrix_type = 14 [default = Cache];
  if (has_theta_matrix_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->theta_matrix_type(), target);
  }

  // repeated float batch_weight = 15;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(15, this->batch_weight(i), target);
  }

  // optional string predict_class_id = 17;
  if (has_predict_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predict_class_id().data(), this->predict_class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->predict_class_id(), target);
  }

  // repeated .artm.Batch batch = 18;
  for (int i = 0; i < this->batch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->batch(i), target);
  }

  // optional bool use_random_theta = 19 [default = false];
  if (has_use_random_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->use_random_theta(), target);
  }

  // repeated string topic_name = 20;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->topic_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessBatchesArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nwt_target_name = 1;
    if (has_nwt_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwt_target_name());
    }

    // optional string pwt_source_name = 3;
    if (has_pwt_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwt_source_name());
    }

    // optional int32 inner_iterations_count = 4 [default = 10];
    if (has_inner_iterations_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inner_iterations_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool reuse_theta = 10 [default = false];
    if (has_reuse_theta()) {
      total_size += 1 + 1;
    }

    // optional bool opt_for_avx = 11 [default = true];
    if (has_opt_for_avx()) {
      total_size += 1 + 1;
    }

    // optional .artm.ProcessBatchesArgs.ThetaMatrixType theta_matrix_type = 14 [default = Cache];
    if (has_theta_matrix_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->theta_matrix_type());
    }

    // optional string predict_class_id = 17;
    if (has_predict_class_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_class_id());
    }

    // optional bool use_random_theta = 19 [default = false];
    if (has_use_random_theta()) {
      total_size += 2 + 1;
    }

  }
  // repeated string batch_filename = 2;
  total_size += 1 * this->batch_filename_size();
  for (int i = 0; i < this->batch_filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_filename(i));
  }

  // repeated string regularizer_name = 6;
  total_size += 1 * this->regularizer_name_size();
  for (int i = 0; i < this->regularizer_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->regularizer_name(i));
  }

  // repeated double regularizer_tau = 7;
  {
    int data_size = 0;
    data_size = 8 * this->regularizer_tau_size();
    total_size += 1 * this->regularizer_tau_size() + data_size;
  }

  // repeated string class_id = 8;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated float class_weight = 9;
  {
    int data_size = 0;
    data_size = 4 * this->class_weight_size();
    total_size += 1 * this->class_weight_size() + data_size;
  }

  // repeated float batch_weight = 15;
  {
    int data_size = 0;
    data_size = 4 * this->batch_weight_size();
    total_size += 1 * this->batch_weight_size() + data_size;
  }

  // repeated .artm.Batch batch = 18;
  total_size += 2 * this->batch_size();
  for (int i = 0; i < this->batch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch(i));
  }

  // repeated string topic_name = 20;
  total_size += 2 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessBatchesArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessBatchesArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessBatchesArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessBatchesArgs::MergeFrom(const ProcessBatchesArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  batch_filename_.MergeFrom(from.batch_filename_);
  regularizer_name_.MergeFrom(from.regularizer_name_);
  regularizer_tau_.MergeFrom(from.regularizer_tau_);
  class_id_.MergeFrom(from.class_id_);
  class_weight_.MergeFrom(from.class_weight_);
  batch_weight_.MergeFrom(from.batch_weight_);
  batch_.MergeFrom(from.batch_);
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nwt_target_name()) {
      set_nwt_target_name(from.nwt_target_name());
    }
    if (from.has_pwt_source_name()) {
      set_pwt_source_name(from.pwt_source_name());
    }
    if (from.has_inner_iterations_count()) {
      set_inner_iterations_count(from.inner_iterations_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reuse_theta()) {
      set_reuse_theta(from.reuse_theta());
    }
    if (from.has_opt_for_avx()) {
      set_opt_for_avx(from.opt_for_avx());
    }
    if (from.has_theta_matrix_type()) {
      set_theta_matrix_type(from.theta_matrix_type());
    }
    if (from.has_predict_class_id()) {
      set_predict_class_id(from.predict_class_id());
    }
    if (from.has_use_random_theta()) {
      set_use_random_theta(from.use_random_theta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessBatchesArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessBatchesArgs::CopyFrom(const ProcessBatchesArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchesArgs::IsInitialized() const {

  return true;
}

void ProcessBatchesArgs::Swap(ProcessBatchesArgs* other) {
  if (other != this) {
    std::swap(nwt_target_name_, other->nwt_target_name_);
    batch_filename_.Swap(&other->batch_filename_);
    std::swap(pwt_source_name_, other->pwt_source_name_);
    std::swap(inner_iterations_count_, other->inner_iterations_count_);
    regularizer_name_.Swap(&other->regularizer_name_);
    regularizer_tau_.Swap(&other->regularizer_tau_);
    class_id_.Swap(&other->class_id_);
    class_weight_.Swap(&other->class_weight_);
    std::swap(reuse_theta_, other->reuse_theta_);
    std::swap(opt_for_avx_, other->opt_for_avx_);
    std::swap(theta_matrix_type_, other->theta_matrix_type_);
    batch_weight_.Swap(&other->batch_weight_);
    std::swap(predict_class_id_, other->predict_class_id_);
    batch_.Swap(&other->batch_);
    std::swap(use_random_theta_, other->use_random_theta_);
    topic_name_.Swap(&other->topic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessBatchesArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessBatchesArgs_descriptor_;
  metadata.reflection = ProcessBatchesArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessBatchesResult::kScoreDataFieldNumber;
const int ProcessBatchesResult::kThetaMatrixFieldNumber;
#endif  // !_MSC_VER

ProcessBatchesResult::ProcessBatchesResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessBatchesResult::InitAsDefaultInstance() {
  theta_matrix_ = const_cast< ::artm::ThetaMatrix*>(&::artm::ThetaMatrix::default_instance());
}

ProcessBatchesResult::ProcessBatchesResult(const ProcessBatchesResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessBatchesResult::SharedCtor() {
  _cached_size_ = 0;
  theta_matrix_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessBatchesResult::~ProcessBatchesResult() {
  SharedDtor();
}

void ProcessBatchesResult::SharedDtor() {
  if (this != default_instance_) {
    delete theta_matrix_;
  }
}

void ProcessBatchesResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessBatchesResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessBatchesResult_descriptor_;
}

const ProcessBatchesResult& ProcessBatchesResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ProcessBatchesResult* ProcessBatchesResult::default_instance_ = NULL;

ProcessBatchesResult* ProcessBatchesResult::New() const {
  return new ProcessBatchesResult;
}

void ProcessBatchesResult::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_theta_matrix()) {
      if (theta_matrix_ != NULL) theta_matrix_->::artm::ThetaMatrix::Clear();
    }
  }
  score_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessBatchesResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.ScoreData score_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_score_data;
        if (input->ExpectTag(18)) goto parse_theta_matrix;
        break;
      }

      // optional .artm.ThetaMatrix theta_matrix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theta_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_theta_matrix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessBatchesResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .artm.ScoreData score_data = 1;
  for (int i = 0; i < this->score_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score_data(i), output);
  }

  // optional .artm.ThetaMatrix theta_matrix = 2;
  if (has_theta_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->theta_matrix(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessBatchesResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .artm.ScoreData score_data = 1;
  for (int i = 0; i < this->score_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->score_data(i), target);
  }

  // optional .artm.ThetaMatrix theta_matrix = 2;
  if (has_theta_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->theta_matrix(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessBatchesResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .artm.ThetaMatrix theta_matrix = 2;
    if (has_theta_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->theta_matrix());
    }

  }
  // repeated .artm.ScoreData score_data = 1;
  total_size += 1 * this->score_data_size();
  for (int i = 0; i < this->score_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessBatchesResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessBatchesResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessBatchesResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessBatchesResult::MergeFrom(const ProcessBatchesResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_data_.MergeFrom(from.score_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_theta_matrix()) {
      mutable_theta_matrix()->::artm::ThetaMatrix::MergeFrom(from.theta_matrix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessBatchesResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessBatchesResult::CopyFrom(const ProcessBatchesResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchesResult::IsInitialized() const {

  return true;
}

void ProcessBatchesResult::Swap(ProcessBatchesResult* other) {
  if (other != this) {
    score_data_.Swap(&other->score_data_);
    std::swap(theta_matrix_, other->theta_matrix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessBatchesResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessBatchesResult_descriptor_;
  metadata.reflection = ProcessBatchesResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MergeModelArgs::kNwtTargetNameFieldNumber;
const int MergeModelArgs::kNwtSourceNameFieldNumber;
const int MergeModelArgs::kSourceWeightFieldNumber;
const int MergeModelArgs::kTopicNameFieldNumber;
#endif  // !_MSC_VER

MergeModelArgs::MergeModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MergeModelArgs::InitAsDefaultInstance() {
}

MergeModelArgs::MergeModelArgs(const MergeModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MergeModelArgs::SharedCtor() {
  _cached_size_ = 0;
  nwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeModelArgs::~MergeModelArgs() {
  SharedDtor();
}

void MergeModelArgs::SharedDtor() {
  if (nwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete nwt_target_name_;
  }
  if (this != default_instance_) {
  }
}

void MergeModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeModelArgs_descriptor_;
}

const MergeModelArgs& MergeModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MergeModelArgs* MergeModelArgs::default_instance_ = NULL;

MergeModelArgs* MergeModelArgs::New() const {
  return new MergeModelArgs;
}

void MergeModelArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nwt_target_name()) {
      if (nwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
        nwt_target_name_->clear();
      }
    }
  }
  nwt_source_name_.Clear();
  source_weight_.Clear();
  topic_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MergeModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nwt_target_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwt_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nwt_target_name().data(), this->nwt_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nwt_source_name;
        break;
      }

      // repeated string nwt_source_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nwt_source_name(this->nwt_source_name_size() - 1).data(),
            this->nwt_source_name(this->nwt_source_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nwt_source_name;
        if (input->ExpectTag(29)) goto parse_source_weight;
        break;
      }

      // repeated float source_weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_source_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_source_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_source_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_source_weight;
        if (input->ExpectTag(34)) goto parse_topic_name;
        break;
      }

      // repeated string topic_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_topic_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MergeModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nwt_target_name = 1;
  if (has_nwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwt_target_name().data(), this->nwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nwt_target_name(), output);
  }

  // repeated string nwt_source_name = 2;
  for (int i = 0; i < this->nwt_source_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nwt_source_name(i).data(), this->nwt_source_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nwt_source_name(i), output);
  }

  // repeated float source_weight = 3;
  for (int i = 0; i < this->source_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->source_weight(i), output);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topic_name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MergeModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nwt_target_name = 1;
  if (has_nwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwt_target_name().data(), this->nwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nwt_target_name(), target);
  }

  // repeated string nwt_source_name = 2;
  for (int i = 0; i < this->nwt_source_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwt_source_name(i).data(), this->nwt_source_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->nwt_source_name(i), target);
  }

  // repeated float source_weight = 3;
  for (int i = 0; i < this->source_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->source_weight(i), target);
  }

  // repeated string topic_name = 4;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topic_name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MergeModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nwt_target_name = 1;
    if (has_nwt_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwt_target_name());
    }

  }
  // repeated string nwt_source_name = 2;
  total_size += 1 * this->nwt_source_name_size();
  for (int i = 0; i < this->nwt_source_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nwt_source_name(i));
  }

  // repeated float source_weight = 3;
  {
    int data_size = 0;
    data_size = 4 * this->source_weight_size();
    total_size += 1 * this->source_weight_size() + data_size;
  }

  // repeated string topic_name = 4;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MergeModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MergeModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MergeModelArgs::MergeFrom(const MergeModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  nwt_source_name_.MergeFrom(from.nwt_source_name_);
  source_weight_.MergeFrom(from.source_weight_);
  topic_name_.MergeFrom(from.topic_name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nwt_target_name()) {
      set_nwt_target_name(from.nwt_target_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MergeModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeModelArgs::CopyFrom(const MergeModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeModelArgs::IsInitialized() const {

  return true;
}

void MergeModelArgs::Swap(MergeModelArgs* other) {
  if (other != this) {
    std::swap(nwt_target_name_, other->nwt_target_name_);
    nwt_source_name_.Swap(&other->nwt_source_name_);
    source_weight_.Swap(&other->source_weight_);
    topic_name_.Swap(&other->topic_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MergeModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeModelArgs_descriptor_;
  metadata.reflection = MergeModelArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegularizeModelArgs::kRwtTargetNameFieldNumber;
const int RegularizeModelArgs::kPwtSourceNameFieldNumber;
const int RegularizeModelArgs::kNwtSourceNameFieldNumber;
const int RegularizeModelArgs::kRegularizerSettingsFieldNumber;
#endif  // !_MSC_VER

RegularizeModelArgs::RegularizeModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegularizeModelArgs::InitAsDefaultInstance() {
}

RegularizeModelArgs::RegularizeModelArgs(const RegularizeModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegularizeModelArgs::SharedCtor() {
  _cached_size_ = 0;
  rwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  pwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  nwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegularizeModelArgs::~RegularizeModelArgs() {
  SharedDtor();
}

void RegularizeModelArgs::SharedDtor() {
  if (rwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete rwt_target_name_;
  }
  if (pwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pwt_source_name_;
  }
  if (nwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete nwt_source_name_;
  }
  if (this != default_instance_) {
  }
}

void RegularizeModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegularizeModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularizeModelArgs_descriptor_;
}

const RegularizeModelArgs& RegularizeModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

RegularizeModelArgs* RegularizeModelArgs::default_instance_ = NULL;

RegularizeModelArgs* RegularizeModelArgs::New() const {
  return new RegularizeModelArgs;
}

void RegularizeModelArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rwt_target_name()) {
      if (rwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
        rwt_target_name_->clear();
      }
    }
    if (has_pwt_source_name()) {
      if (pwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
        pwt_source_name_->clear();
      }
    }
    if (has_nwt_source_name()) {
      if (nwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
        nwt_source_name_->clear();
      }
    }
  }
  regularizer_settings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegularizeModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rwt_target_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rwt_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rwt_target_name().data(), this->rwt_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pwt_source_name;
        break;
      }

      // optional string pwt_source_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwt_source_name().data(), this->pwt_source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nwt_source_name;
        break;
      }

      // optional string nwt_source_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nwt_source_name().data(), this->nwt_source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_regularizer_settings;
        break;
      }

      // repeated .artm.RegularizerSettings regularizer_settings = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regularizer_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regularizer_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_regularizer_settings;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegularizeModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string rwt_target_name = 1;
  if (has_rwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rwt_target_name().data(), this->rwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rwt_target_name(), output);
  }

  // optional string pwt_source_name = 2;
  if (has_pwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwt_source_name().data(), this->pwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwt_source_name(), output);
  }

  // optional string nwt_source_name = 3;
  if (has_nwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwt_source_name().data(), this->nwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nwt_source_name(), output);
  }

  // repeated .artm.RegularizerSettings regularizer_settings = 4;
  for (int i = 0; i < this->regularizer_settings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->regularizer_settings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegularizeModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string rwt_target_name = 1;
  if (has_rwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rwt_target_name().data(), this->rwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rwt_target_name(), target);
  }

  // optional string pwt_source_name = 2;
  if (has_pwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwt_source_name().data(), this->pwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwt_source_name(), target);
  }

  // optional string nwt_source_name = 3;
  if (has_nwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwt_source_name().data(), this->nwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nwt_source_name(), target);
  }

  // repeated .artm.RegularizerSettings regularizer_settings = 4;
  for (int i = 0; i < this->regularizer_settings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->regularizer_settings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegularizeModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string rwt_target_name = 1;
    if (has_rwt_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rwt_target_name());
    }

    // optional string pwt_source_name = 2;
    if (has_pwt_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwt_source_name());
    }

    // optional string nwt_source_name = 3;
    if (has_nwt_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwt_source_name());
    }

  }
  // repeated .artm.RegularizerSettings regularizer_settings = 4;
  total_size += 1 * this->regularizer_settings_size();
  for (int i = 0; i < this->regularizer_settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regularizer_settings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegularizeModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegularizeModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegularizeModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegularizeModelArgs::MergeFrom(const RegularizeModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  regularizer_settings_.MergeFrom(from.regularizer_settings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rwt_target_name()) {
      set_rwt_target_name(from.rwt_target_name());
    }
    if (from.has_pwt_source_name()) {
      set_pwt_source_name(from.pwt_source_name());
    }
    if (from.has_nwt_source_name()) {
      set_nwt_source_name(from.nwt_source_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegularizeModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegularizeModelArgs::CopyFrom(const RegularizeModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegularizeModelArgs::IsInitialized() const {

  return true;
}

void RegularizeModelArgs::Swap(RegularizeModelArgs* other) {
  if (other != this) {
    std::swap(rwt_target_name_, other->rwt_target_name_);
    std::swap(pwt_source_name_, other->pwt_source_name_);
    std::swap(nwt_source_name_, other->nwt_source_name_);
    regularizer_settings_.Swap(&other->regularizer_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegularizeModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegularizeModelArgs_descriptor_;
  metadata.reflection = RegularizeModelArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NormalizeModelArgs::kPwtTargetNameFieldNumber;
const int NormalizeModelArgs::kNwtSourceNameFieldNumber;
const int NormalizeModelArgs::kRwtSourceNameFieldNumber;
#endif  // !_MSC_VER

NormalizeModelArgs::NormalizeModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NormalizeModelArgs::InitAsDefaultInstance() {
}

NormalizeModelArgs::NormalizeModelArgs(const NormalizeModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NormalizeModelArgs::SharedCtor() {
  _cached_size_ = 0;
  pwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  nwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  rwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalizeModelArgs::~NormalizeModelArgs() {
  SharedDtor();
}

void NormalizeModelArgs::SharedDtor() {
  if (pwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pwt_target_name_;
  }
  if (nwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete nwt_source_name_;
  }
  if (rwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete rwt_source_name_;
  }
  if (this != default_instance_) {
  }
}

void NormalizeModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalizeModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalizeModelArgs_descriptor_;
}

const NormalizeModelArgs& NormalizeModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

NormalizeModelArgs* NormalizeModelArgs::default_instance_ = NULL;

NormalizeModelArgs* NormalizeModelArgs::New() const {
  return new NormalizeModelArgs;
}

void NormalizeModelArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pwt_target_name()) {
      if (pwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
        pwt_target_name_->clear();
      }
    }
    if (has_nwt_source_name()) {
      if (nwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
        nwt_source_name_->clear();
      }
    }
    if (has_rwt_source_name()) {
      if (rwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
        rwt_source_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NormalizeModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pwt_target_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwt_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwt_target_name().data(), this->pwt_target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nwt_source_name;
        break;
      }

      // optional string nwt_source_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nwt_source_name().data(), this->nwt_source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rwt_source_name;
        break;
      }

      // optional string rwt_source_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rwt_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rwt_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rwt_source_name().data(), this->rwt_source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NormalizeModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pwt_target_name = 1;
  if (has_pwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwt_target_name().data(), this->pwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pwt_target_name(), output);
  }

  // optional string nwt_source_name = 2;
  if (has_nwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwt_source_name().data(), this->nwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nwt_source_name(), output);
  }

  // optional string rwt_source_name = 3;
  if (has_rwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rwt_source_name().data(), this->rwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rwt_source_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NormalizeModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pwt_target_name = 1;
  if (has_pwt_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwt_target_name().data(), this->pwt_target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pwt_target_name(), target);
  }

  // optional string nwt_source_name = 2;
  if (has_nwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwt_source_name().data(), this->nwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nwt_source_name(), target);
  }

  // optional string rwt_source_name = 3;
  if (has_rwt_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rwt_source_name().data(), this->rwt_source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rwt_source_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NormalizeModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pwt_target_name = 1;
    if (has_pwt_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwt_target_name());
    }

    // optional string nwt_source_name = 2;
    if (has_nwt_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwt_source_name());
    }

    // optional string rwt_source_name = 3;
    if (has_rwt_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rwt_source_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalizeModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NormalizeModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NormalizeModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NormalizeModelArgs::MergeFrom(const NormalizeModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pwt_target_name()) {
      set_pwt_target_name(from.pwt_target_name());
    }
    if (from.has_nwt_source_name()) {
      set_nwt_source_name(from.nwt_source_name());
    }
    if (from.has_rwt_source_name()) {
      set_rwt_source_name(from.rwt_source_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NormalizeModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizeModelArgs::CopyFrom(const NormalizeModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizeModelArgs::IsInitialized() const {

  return true;
}

void NormalizeModelArgs::Swap(NormalizeModelArgs* other) {
  if (other != this) {
    std::swap(pwt_target_name_, other->pwt_target_name_);
    std::swap(nwt_source_name_, other->nwt_source_name_);
    std::swap(rwt_source_name_, other->rwt_source_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NormalizeModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalizeModelArgs_descriptor_;
  metadata.reflection = NormalizeModelArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImportDictionaryArgs::kFileNameFieldNumber;
const int ImportDictionaryArgs::kDictionaryNameFieldNumber;
#endif  // !_MSC_VER

ImportDictionaryArgs::ImportDictionaryArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImportDictionaryArgs::InitAsDefaultInstance() {
}

ImportDictionaryArgs::ImportDictionaryArgs(const ImportDictionaryArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImportDictionaryArgs::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportDictionaryArgs::~ImportDictionaryArgs() {
  SharedDtor();
}

void ImportDictionaryArgs::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete file_name_;
  }
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (this != default_instance_) {
  }
}

void ImportDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportDictionaryArgs_descriptor_;
}

const ImportDictionaryArgs& ImportDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ImportDictionaryArgs* ImportDictionaryArgs::default_instance_ = NULL;

ImportDictionaryArgs* ImportDictionaryArgs::New() const {
  return new ImportDictionaryArgs;
}

void ImportDictionaryArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
        file_name_->clear();
      }
    }
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImportDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImportDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_name(), output);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dictionary_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImportDictionaryArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dictionary_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImportDictionaryArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string dictionary_name = 2;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImportDictionaryArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImportDictionaryArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImportDictionaryArgs::MergeFrom(const ImportDictionaryArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImportDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportDictionaryArgs::CopyFrom(const ImportDictionaryArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportDictionaryArgs::IsInitialized() const {

  return true;
}

void ImportDictionaryArgs::Swap(ImportDictionaryArgs* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImportDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportDictionaryArgs_descriptor_;
  metadata.reflection = ImportDictionaryArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExportDictionaryArgs::kFileNameFieldNumber;
const int ExportDictionaryArgs::kDictionaryNameFieldNumber;
#endif  // !_MSC_VER

ExportDictionaryArgs::ExportDictionaryArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExportDictionaryArgs::InitAsDefaultInstance() {
}

ExportDictionaryArgs::ExportDictionaryArgs(const ExportDictionaryArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExportDictionaryArgs::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExportDictionaryArgs::~ExportDictionaryArgs() {
  SharedDtor();
}

void ExportDictionaryArgs::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete file_name_;
  }
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (this != default_instance_) {
  }
}

void ExportDictionaryArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExportDictionaryArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExportDictionaryArgs_descriptor_;
}

const ExportDictionaryArgs& ExportDictionaryArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ExportDictionaryArgs* ExportDictionaryArgs::default_instance_ = NULL;

ExportDictionaryArgs* ExportDictionaryArgs::New() const {
  return new ExportDictionaryArgs;
}

void ExportDictionaryArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
        file_name_->clear();
      }
    }
    if (has_dictionary_name()) {
      if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
        dictionary_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExportDictionaryArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dictionary_name;
        break;
      }

      // optional string dictionary_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dictionary_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dictionary_name().data(), this->dictionary_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExportDictionaryArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_name(), output);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dictionary_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExportDictionaryArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional string dictionary_name = 2;
  if (has_dictionary_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dictionary_name().data(), this->dictionary_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dictionary_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExportDictionaryArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string dictionary_name = 2;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dictionary_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExportDictionaryArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExportDictionaryArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExportDictionaryArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExportDictionaryArgs::MergeFrom(const ExportDictionaryArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_dictionary_name()) {
      set_dictionary_name(from.dictionary_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExportDictionaryArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportDictionaryArgs::CopyFrom(const ExportDictionaryArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportDictionaryArgs::IsInitialized() const {

  return true;
}

void ExportDictionaryArgs::Swap(ExportDictionaryArgs* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(dictionary_name_, other->dictionary_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExportDictionaryArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExportDictionaryArgs_descriptor_;
  metadata.reflection = ExportDictionaryArgs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CopyRequestResultArgs_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CopyRequestResultArgs_RequestType_descriptor_;
}
bool CopyRequestResultArgs_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CopyRequestResultArgs_RequestType CopyRequestResultArgs::DefaultRequestType;
const CopyRequestResultArgs_RequestType CopyRequestResultArgs::GetThetaSecondPass;
const CopyRequestResultArgs_RequestType CopyRequestResultArgs::GetModelSecondPass;
const CopyRequestResultArgs_RequestType CopyRequestResultArgs::RequestType_MIN;
const CopyRequestResultArgs_RequestType CopyRequestResultArgs::RequestType_MAX;
const int CopyRequestResultArgs::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CopyRequestResultArgs::kRequestTypeFieldNumber;
#endif  // !_MSC_VER

CopyRequestResultArgs::CopyRequestResultArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CopyRequestResultArgs::InitAsDefaultInstance() {
}

CopyRequestResultArgs::CopyRequestResultArgs(const CopyRequestResultArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CopyRequestResultArgs::SharedCtor() {
  _cached_size_ = 0;
  request_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CopyRequestResultArgs::~CopyRequestResultArgs() {
  SharedDtor();
}

void CopyRequestResultArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CopyRequestResultArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CopyRequestResultArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CopyRequestResultArgs_descriptor_;
}

const CopyRequestResultArgs& CopyRequestResultArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

CopyRequestResultArgs* CopyRequestResultArgs::default_instance_ = NULL;

CopyRequestResultArgs* CopyRequestResultArgs::New() const {
  return new CopyRequestResultArgs;
}

void CopyRequestResultArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CopyRequestResultArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .artm.CopyRequestResultArgs.RequestType request_type = 1 [default = DefaultRequestType];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::CopyRequestResultArgs_RequestType_IsValid(value)) {
            set_request_type(static_cast< ::artm::CopyRequestResultArgs_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CopyRequestResultArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .artm.CopyRequestResultArgs.RequestType request_type = 1 [default = DefaultRequestType];
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CopyRequestResultArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .artm.CopyRequestResultArgs.RequestType request_type = 1 [default = DefaultRequestType];
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->request_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CopyRequestResultArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .artm.CopyRequestResultArgs.RequestType request_type = 1 [default = DefaultRequestType];
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CopyRequestResultArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CopyRequestResultArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CopyRequestResultArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CopyRequestResultArgs::MergeFrom(const CopyRequestResultArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CopyRequestResultArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyRequestResultArgs::CopyFrom(const CopyRequestResultArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyRequestResultArgs::IsInitialized() const {

  return true;
}

void CopyRequestResultArgs::Swap(CopyRequestResultArgs* other) {
  if (other != this) {
    std::swap(request_type_, other->request_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CopyRequestResultArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CopyRequestResultArgs_descriptor_;
  metadata.reflection = CopyRequestResultArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DuplicateMasterComponentArgs::DuplicateMasterComponentArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuplicateMasterComponentArgs::InitAsDefaultInstance() {
}

DuplicateMasterComponentArgs::DuplicateMasterComponentArgs(const DuplicateMasterComponentArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuplicateMasterComponentArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplicateMasterComponentArgs::~DuplicateMasterComponentArgs() {
  SharedDtor();
}

void DuplicateMasterComponentArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuplicateMasterComponentArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplicateMasterComponentArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplicateMasterComponentArgs_descriptor_;
}

const DuplicateMasterComponentArgs& DuplicateMasterComponentArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

DuplicateMasterComponentArgs* DuplicateMasterComponentArgs::default_instance_ = NULL;

DuplicateMasterComponentArgs* DuplicateMasterComponentArgs::New() const {
  return new DuplicateMasterComponentArgs;
}

void DuplicateMasterComponentArgs::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuplicateMasterComponentArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DuplicateMasterComponentArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuplicateMasterComponentArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuplicateMasterComponentArgs::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplicateMasterComponentArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuplicateMasterComponentArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuplicateMasterComponentArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuplicateMasterComponentArgs::MergeFrom(const DuplicateMasterComponentArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuplicateMasterComponentArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplicateMasterComponentArgs::CopyFrom(const DuplicateMasterComponentArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateMasterComponentArgs::IsInitialized() const {

  return true;
}

void DuplicateMasterComponentArgs::Swap(DuplicateMasterComponentArgs* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuplicateMasterComponentArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplicateMasterComponentArgs_descriptor_;
  metadata.reflection = DuplicateMasterComponentArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetMasterComponentInfoArgs::GetMasterComponentInfoArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMasterComponentInfoArgs::InitAsDefaultInstance() {
}

GetMasterComponentInfoArgs::GetMasterComponentInfoArgs(const GetMasterComponentInfoArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMasterComponentInfoArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMasterComponentInfoArgs::~GetMasterComponentInfoArgs() {
  SharedDtor();
}

void GetMasterComponentInfoArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMasterComponentInfoArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMasterComponentInfoArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMasterComponentInfoArgs_descriptor_;
}

const GetMasterComponentInfoArgs& GetMasterComponentInfoArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

GetMasterComponentInfoArgs* GetMasterComponentInfoArgs::default_instance_ = NULL;

GetMasterComponentInfoArgs* GetMasterComponentInfoArgs::New() const {
  return new GetMasterComponentInfoArgs;
}

void GetMasterComponentInfoArgs::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMasterComponentInfoArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetMasterComponentInfoArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMasterComponentInfoArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMasterComponentInfoArgs::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMasterComponentInfoArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMasterComponentInfoArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMasterComponentInfoArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMasterComponentInfoArgs::MergeFrom(const GetMasterComponentInfoArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMasterComponentInfoArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMasterComponentInfoArgs::CopyFrom(const GetMasterComponentInfoArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMasterComponentInfoArgs::IsInitialized() const {

  return true;
}

void GetMasterComponentInfoArgs::Swap(GetMasterComponentInfoArgs* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMasterComponentInfoArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMasterComponentInfoArgs_descriptor_;
  metadata.reflection = GetMasterComponentInfoArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MasterComponentInfo_RegularizerInfo::kNameFieldNumber;
const int MasterComponentInfo_RegularizerInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

MasterComponentInfo_RegularizerInfo::MasterComponentInfo_RegularizerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterComponentInfo_RegularizerInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_RegularizerInfo::MasterComponentInfo_RegularizerInfo(const MasterComponentInfo_RegularizerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterComponentInfo_RegularizerInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_RegularizerInfo::~MasterComponentInfo_RegularizerInfo() {
  SharedDtor();
}

void MasterComponentInfo_RegularizerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyString()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_RegularizerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_RegularizerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_RegularizerInfo_descriptor_;
}

const MasterComponentInfo_RegularizerInfo& MasterComponentInfo_RegularizerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_RegularizerInfo* MasterComponentInfo_RegularizerInfo::default_instance_ = NULL;

MasterComponentInfo_RegularizerInfo* MasterComponentInfo_RegularizerInfo::New() const {
  return new MasterComponentInfo_RegularizerInfo;
}

void MasterComponentInfo_RegularizerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyString()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterComponentInfo_RegularizerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterComponentInfo_RegularizerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterComponentInfo_RegularizerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterComponentInfo_RegularizerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_RegularizerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterComponentInfo_RegularizerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterComponentInfo_RegularizerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterComponentInfo_RegularizerInfo::MergeFrom(const MasterComponentInfo_RegularizerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterComponentInfo_RegularizerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_RegularizerInfo::CopyFrom(const MasterComponentInfo_RegularizerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_RegularizerInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_RegularizerInfo::Swap(MasterComponentInfo_RegularizerInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterComponentInfo_RegularizerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_RegularizerInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_RegularizerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MasterComponentInfo_ScoreInfo::kNameFieldNumber;
const int MasterComponentInfo_ScoreInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

MasterComponentInfo_ScoreInfo::MasterComponentInfo_ScoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterComponentInfo_ScoreInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_ScoreInfo::MasterComponentInfo_ScoreInfo(const MasterComponentInfo_ScoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterComponentInfo_ScoreInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_ScoreInfo::~MasterComponentInfo_ScoreInfo() {
  SharedDtor();
}

void MasterComponentInfo_ScoreInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyString()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_ScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_ScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_ScoreInfo_descriptor_;
}

const MasterComponentInfo_ScoreInfo& MasterComponentInfo_ScoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_ScoreInfo* MasterComponentInfo_ScoreInfo::default_instance_ = NULL;

MasterComponentInfo_ScoreInfo* MasterComponentInfo_ScoreInfo::New() const {
  return new MasterComponentInfo_ScoreInfo;
}

void MasterComponentInfo_ScoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyString()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterComponentInfo_ScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterComponentInfo_ScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterComponentInfo_ScoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterComponentInfo_ScoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_ScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterComponentInfo_ScoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterComponentInfo_ScoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterComponentInfo_ScoreInfo::MergeFrom(const MasterComponentInfo_ScoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterComponentInfo_ScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_ScoreInfo::CopyFrom(const MasterComponentInfo_ScoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_ScoreInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_ScoreInfo::Swap(MasterComponentInfo_ScoreInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterComponentInfo_ScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_ScoreInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_ScoreInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MasterComponentInfo_DictionaryInfo::kNameFieldNumber;
const int MasterComponentInfo_DictionaryInfo::kEntriesCountFieldNumber;
#endif  // !_MSC_VER

MasterComponentInfo_DictionaryInfo::MasterComponentInfo_DictionaryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterComponentInfo_DictionaryInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_DictionaryInfo::MasterComponentInfo_DictionaryInfo(const MasterComponentInfo_DictionaryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterComponentInfo_DictionaryInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  entries_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_DictionaryInfo::~MasterComponentInfo_DictionaryInfo() {
  SharedDtor();
}

void MasterComponentInfo_DictionaryInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_DictionaryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_DictionaryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_DictionaryInfo_descriptor_;
}

const MasterComponentInfo_DictionaryInfo& MasterComponentInfo_DictionaryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_DictionaryInfo* MasterComponentInfo_DictionaryInfo::default_instance_ = NULL;

MasterComponentInfo_DictionaryInfo* MasterComponentInfo_DictionaryInfo::New() const {
  return new MasterComponentInfo_DictionaryInfo;
}

void MasterComponentInfo_DictionaryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    entries_count_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterComponentInfo_DictionaryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entries_count;
        break;
      }

      // optional int64 entries_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entries_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &entries_count_)));
          set_has_entries_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterComponentInfo_DictionaryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int64 entries_count = 2;
  if (has_entries_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->entries_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterComponentInfo_DictionaryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 entries_count = 2;
  if (has_entries_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->entries_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterComponentInfo_DictionaryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 entries_count = 2;
    if (has_entries_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->entries_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_DictionaryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterComponentInfo_DictionaryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterComponentInfo_DictionaryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterComponentInfo_DictionaryInfo::MergeFrom(const MasterComponentInfo_DictionaryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_entries_count()) {
      set_entries_count(from.entries_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterComponentInfo_DictionaryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_DictionaryInfo::CopyFrom(const MasterComponentInfo_DictionaryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_DictionaryInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_DictionaryInfo::Swap(MasterComponentInfo_DictionaryInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(entries_count_, other->entries_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterComponentInfo_DictionaryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_DictionaryInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_DictionaryInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MasterComponentInfo_BatchInfo::kNameFieldNumber;
const int MasterComponentInfo_BatchInfo::kItemsCountFieldNumber;
const int MasterComponentInfo_BatchInfo::kTokenCountFieldNumber;
#endif  // !_MSC_VER

MasterComponentInfo_BatchInfo::MasterComponentInfo_BatchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterComponentInfo_BatchInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_BatchInfo::MasterComponentInfo_BatchInfo(const MasterComponentInfo_BatchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterComponentInfo_BatchInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  items_count_ = 0;
  token_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_BatchInfo::~MasterComponentInfo_BatchInfo() {
  SharedDtor();
}

void MasterComponentInfo_BatchInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_BatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_BatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_BatchInfo_descriptor_;
}

const MasterComponentInfo_BatchInfo& MasterComponentInfo_BatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_BatchInfo* MasterComponentInfo_BatchInfo::default_instance_ = NULL;

MasterComponentInfo_BatchInfo* MasterComponentInfo_BatchInfo::New() const {
  return new MasterComponentInfo_BatchInfo;
}

void MasterComponentInfo_BatchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    items_count_ = 0;
    token_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterComponentInfo_BatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_items_count;
        break;
      }

      // optional int32 items_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_items_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &items_count_)));
          set_has_items_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_token_count;
        break;
      }

      // optional int32 token_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_count_)));
          set_has_token_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterComponentInfo_BatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 items_count = 2;
  if (has_items_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->items_count(), output);
  }

  // optional int32 token_count = 3;
  if (has_token_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->token_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterComponentInfo_BatchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 items_count = 2;
  if (has_items_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->items_count(), target);
  }

  // optional int32 token_count = 3;
  if (has_token_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->token_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterComponentInfo_BatchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 items_count = 2;
    if (has_items_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->items_count());
    }

    // optional int32 token_count = 3;
    if (has_token_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_BatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterComponentInfo_BatchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterComponentInfo_BatchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterComponentInfo_BatchInfo::MergeFrom(const MasterComponentInfo_BatchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_items_count()) {
      set_items_count(from.items_count());
    }
    if (from.has_token_count()) {
      set_token_count(from.token_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterComponentInfo_BatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_BatchInfo::CopyFrom(const MasterComponentInfo_BatchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_BatchInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_BatchInfo::Swap(MasterComponentInfo_BatchInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(items_count_, other->items_count_);
    std::swap(token_count_, other->token_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterComponentInfo_BatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_BatchInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_BatchInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MasterComponentInfo_ModelInfo::kNameFieldNumber;
const int MasterComponentInfo_ModelInfo::kTypeFieldNumber;
const int MasterComponentInfo_ModelInfo::kTopicsCountFieldNumber;
const int MasterComponentInfo_ModelInfo::kTokenCountFieldNumber;
#endif  // !_MSC_VER

MasterComponentInfo_ModelInfo::MasterComponentInfo_ModelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterComponentInfo_ModelInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_ModelInfo::MasterComponentInfo_ModelInfo(const MasterComponentInfo_ModelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterComponentInfo_ModelInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  topics_count_ = 0;
  token_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_ModelInfo::~MasterComponentInfo_ModelInfo() {
  SharedDtor();
}

void MasterComponentInfo_ModelInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyString()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_ModelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_ModelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_ModelInfo_descriptor_;
}

const MasterComponentInfo_ModelInfo& MasterComponentInfo_ModelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_ModelInfo* MasterComponentInfo_ModelInfo::default_instance_ = NULL;

MasterComponentInfo_ModelInfo* MasterComponentInfo_ModelInfo::New() const {
  return new MasterComponentInfo_ModelInfo;
}

void MasterComponentInfo_ModelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyString()) {
        type_->clear();
      }
    }
    topics_count_ = 0;
    token_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterComponentInfo_ModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_topics_count;
        break;
      }

      // optional int32 topics_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topics_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topics_count_)));
          set_has_topics_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_token_count;
        break;
      }

      // optional int32 token_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_count_)));
          set_has_token_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterComponentInfo_ModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional int32 topics_count = 3;
  if (has_topics_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->topics_count(), output);
  }

  // optional int32 token_count = 4;
  if (has_token_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->token_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterComponentInfo_ModelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional int32 topics_count = 3;
  if (has_topics_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->topics_count(), target);
  }

  // optional int32 token_count = 4;
  if (has_token_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->token_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterComponentInfo_ModelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 topics_count = 3;
    if (has_topics_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topics_count());
    }

    // optional int32 token_count = 4;
    if (has_token_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_ModelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterComponentInfo_ModelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterComponentInfo_ModelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterComponentInfo_ModelInfo::MergeFrom(const MasterComponentInfo_ModelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_topics_count()) {
      set_topics_count(from.topics_count());
    }
    if (from.has_token_count()) {
      set_token_count(from.token_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterComponentInfo_ModelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_ModelInfo::CopyFrom(const MasterComponentInfo_ModelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_ModelInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_ModelInfo::Swap(MasterComponentInfo_ModelInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(topics_count_, other->topics_count_);
    std::swap(token_count_, other->token_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterComponentInfo_ModelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_ModelInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_ModelInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MasterComponentInfo_CacheEntryInfo::kKeyFieldNumber;
const int MasterComponentInfo_CacheEntryInfo::kByteSizeFieldNumber;
#endif  // !_MSC_VER

MasterComponentInfo_CacheEntryInfo::MasterComponentInfo_CacheEntryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterComponentInfo_CacheEntryInfo::InitAsDefaultInstance() {
}

MasterComponentInfo_CacheEntryInfo::MasterComponentInfo_CacheEntryInfo(const MasterComponentInfo_CacheEntryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterComponentInfo_CacheEntryInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  byte_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo_CacheEntryInfo::~MasterComponentInfo_CacheEntryInfo() {
  SharedDtor();
}

void MasterComponentInfo_CacheEntryInfo::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void MasterComponentInfo_CacheEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo_CacheEntryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_CacheEntryInfo_descriptor_;
}

const MasterComponentInfo_CacheEntryInfo& MasterComponentInfo_CacheEntryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo_CacheEntryInfo* MasterComponentInfo_CacheEntryInfo::default_instance_ = NULL;

MasterComponentInfo_CacheEntryInfo* MasterComponentInfo_CacheEntryInfo::New() const {
  return new MasterComponentInfo_CacheEntryInfo;
}

void MasterComponentInfo_CacheEntryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyString()) {
        key_->clear();
      }
    }
    byte_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterComponentInfo_CacheEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_byte_size;
        break;
      }

      // optional int32 byte_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byte_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byte_size_)));
          set_has_byte_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterComponentInfo_CacheEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional int32 byte_size = 2;
  if (has_byte_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->byte_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterComponentInfo_CacheEntryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional int32 byte_size = 2;
  if (has_byte_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->byte_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterComponentInfo_CacheEntryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 byte_size = 2;
    if (has_byte_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byte_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo_CacheEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterComponentInfo_CacheEntryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterComponentInfo_CacheEntryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterComponentInfo_CacheEntryInfo::MergeFrom(const MasterComponentInfo_CacheEntryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_byte_size()) {
      set_byte_size(from.byte_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterComponentInfo_CacheEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo_CacheEntryInfo::CopyFrom(const MasterComponentInfo_CacheEntryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo_CacheEntryInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo_CacheEntryInfo::Swap(MasterComponentInfo_CacheEntryInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(byte_size_, other->byte_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterComponentInfo_CacheEntryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_CacheEntryInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_CacheEntryInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MasterComponentInfo::kMasterIdFieldNumber;
const int MasterComponentInfo::kConfigFieldNumber;
const int MasterComponentInfo::kRegularizerFieldNumber;
const int MasterComponentInfo::kScoreFieldNumber;
const int MasterComponentInfo::kDictionaryFieldNumber;
const int MasterComponentInfo::kModelFieldNumber;
const int MasterComponentInfo::kCacheEntryFieldNumber;
const int MasterComponentInfo::kProcessorQueueSizeFieldNumber;
const int MasterComponentInfo::kBatchFieldNumber;
#endif  // !_MSC_VER

MasterComponentInfo::MasterComponentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterComponentInfo::InitAsDefaultInstance() {
  config_ = const_cast< ::artm::MasterModelConfig*>(&::artm::MasterModelConfig::default_instance());
}

MasterComponentInfo::MasterComponentInfo(const MasterComponentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterComponentInfo::SharedCtor() {
  _cached_size_ = 0;
  master_id_ = 0;
  config_ = NULL;
  processor_queue_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterComponentInfo::~MasterComponentInfo() {
  SharedDtor();
}

void MasterComponentInfo::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void MasterComponentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterComponentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterComponentInfo_descriptor_;
}

const MasterComponentInfo& MasterComponentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterComponentInfo* MasterComponentInfo::default_instance_ = NULL;

MasterComponentInfo* MasterComponentInfo::New() const {
  return new MasterComponentInfo;
}

void MasterComponentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    master_id_ = 0;
    if (has_config()) {
      if (config_ != NULL) config_->::artm::MasterModelConfig::Clear();
    }
    processor_queue_size_ = 0;
  }
  regularizer_.Clear();
  score_.Clear();
  dictionary_.Clear();
  model_.Clear();
  cache_entry_.Clear();
  batch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterComponentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 master_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_id_)));
          set_has_master_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // optional .artm.MasterModelConfig config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_regularizer;
        break;
      }

      // repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regularizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regularizer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_regularizer;
        if (input->ExpectTag(34)) goto parse_score;
        break;
      }

      // repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_score;
        if (input->ExpectTag(42)) goto parse_dictionary;
        break;
      }

      // repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dictionary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dictionary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dictionary;
        if (input->ExpectTag(50)) goto parse_model;
        break;
      }

      // repeated .artm.MasterComponentInfo.ModelInfo model = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_model;
        if (input->ExpectTag(58)) goto parse_cache_entry;
        break;
      }

      // repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cache_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cache_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cache_entry;
        if (input->ExpectTag(72)) goto parse_processor_queue_size;
        break;
      }

      // optional int32 processor_queue_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processor_queue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processor_queue_size_)));
          set_has_processor_queue_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_batch;
        break;
      }

      // repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_batch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_batch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterComponentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->master_id(), output);
  }

  // optional .artm.MasterModelConfig config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->config(), output);
  }

  // repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
  for (int i = 0; i < this->regularizer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->regularizer(i), output);
  }

  // repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->score(i), output);
  }

  // repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
  for (int i = 0; i < this->dictionary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dictionary(i), output);
  }

  // repeated .artm.MasterComponentInfo.ModelInfo model = 6;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->model(i), output);
  }

  // repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
  for (int i = 0; i < this->cache_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->cache_entry(i), output);
  }

  // optional int32 processor_queue_size = 9;
  if (has_processor_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->processor_queue_size(), output);
  }

  // repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
  for (int i = 0; i < this->batch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->batch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterComponentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 master_id = 1;
  if (has_master_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->master_id(), target);
  }

  // optional .artm.MasterModelConfig config = 2;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->config(), target);
  }

  // repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
  for (int i = 0; i < this->regularizer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->regularizer(i), target);
  }

  // repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->score(i), target);
  }

  // repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
  for (int i = 0; i < this->dictionary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dictionary(i), target);
  }

  // repeated .artm.MasterComponentInfo.ModelInfo model = 6;
  for (int i = 0; i < this->model_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->model(i), target);
  }

  // repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
  for (int i = 0; i < this->cache_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->cache_entry(i), target);
  }

  // optional int32 processor_queue_size = 9;
  if (has_processor_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->processor_queue_size(), target);
  }

  // repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
  for (int i = 0; i < this->batch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->batch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterComponentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 master_id = 1;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_id());
    }

    // optional .artm.MasterModelConfig config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // optional int32 processor_queue_size = 9;
    if (has_processor_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processor_queue_size());
    }

  }
  // repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
  total_size += 1 * this->regularizer_size();
  for (int i = 0; i < this->regularizer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regularizer(i));
  }

  // repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
  total_size += 1 * this->score_size();
  for (int i = 0; i < this->score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score(i));
  }

  // repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
  total_size += 1 * this->dictionary_size();
  for (int i = 0; i < this->dictionary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dictionary(i));
  }

  // repeated .artm.MasterComponentInfo.ModelInfo model = 6;
  total_size += 1 * this->model_size();
  for (int i = 0; i < this->model_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model(i));
  }

  // repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
  total_size += 1 * this->cache_entry_size();
  for (int i = 0; i < this->cache_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cache_entry(i));
  }

  // repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
  total_size += 1 * this->batch_size();
  for (int i = 0; i < this->batch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterComponentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterComponentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterComponentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterComponentInfo::MergeFrom(const MasterComponentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  regularizer_.MergeFrom(from.regularizer_);
  score_.MergeFrom(from.score_);
  dictionary_.MergeFrom(from.dictionary_);
  model_.MergeFrom(from.model_);
  cache_entry_.MergeFrom(from.cache_entry_);
  batch_.MergeFrom(from.batch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
    if (from.has_config()) {
      mutable_config()->::artm::MasterModelConfig::MergeFrom(from.config());
    }
    if (from.has_processor_queue_size()) {
      set_processor_queue_size(from.processor_queue_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterComponentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterComponentInfo::CopyFrom(const MasterComponentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterComponentInfo::IsInitialized() const {

  return true;
}

void MasterComponentInfo::Swap(MasterComponentInfo* other) {
  if (other != this) {
    std::swap(master_id_, other->master_id_);
    std::swap(config_, other->config_);
    regularizer_.Swap(&other->regularizer_);
    score_.Swap(&other->score_);
    dictionary_.Swap(&other->dictionary_);
    model_.Swap(&other->model_);
    cache_entry_.Swap(&other->cache_entry_);
    std::swap(processor_queue_size_, other->processor_queue_size_);
    batch_.Swap(&other->batch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterComponentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterComponentInfo_descriptor_;
  metadata.reflection = MasterComponentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImportBatchesArgs::kBatchNameFieldNumber;
const int ImportBatchesArgs::kBatchFieldNumber;
#endif  // !_MSC_VER

ImportBatchesArgs::ImportBatchesArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImportBatchesArgs::InitAsDefaultInstance() {
}

ImportBatchesArgs::ImportBatchesArgs(const ImportBatchesArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImportBatchesArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportBatchesArgs::~ImportBatchesArgs() {
  SharedDtor();
}

void ImportBatchesArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImportBatchesArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportBatchesArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportBatchesArgs_descriptor_;
}

const ImportBatchesArgs& ImportBatchesArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ImportBatchesArgs* ImportBatchesArgs::default_instance_ = NULL;

ImportBatchesArgs* ImportBatchesArgs::New() const {
  return new ImportBatchesArgs;
}

void ImportBatchesArgs::Clear() {
  batch_name_.Clear();
  batch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImportBatchesArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string batch_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_name(this->batch_name_size() - 1).data(),
            this->batch_name(this->batch_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_batch_name;
        if (input->ExpectTag(26)) goto parse_batch;
        break;
      }

      // repeated .artm.Batch batch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_batch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_batch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImportBatchesArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string batch_name = 1;
  for (int i = 0; i < this->batch_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->batch_name(i).data(), this->batch_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->batch_name(i), output);
  }

  // repeated .artm.Batch batch = 3;
  for (int i = 0; i < this->batch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->batch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImportBatchesArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string batch_name = 1;
  for (int i = 0; i < this->batch_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_name(i).data(), this->batch_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->batch_name(i), target);
  }

  // repeated .artm.Batch batch = 3;
  for (int i = 0; i < this->batch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->batch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImportBatchesArgs::ByteSize() const {
  int total_size = 0;

  // repeated string batch_name = 1;
  total_size += 1 * this->batch_name_size();
  for (int i = 0; i < this->batch_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_name(i));
  }

  // repeated .artm.Batch batch = 3;
  total_size += 1 * this->batch_size();
  for (int i = 0; i < this->batch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportBatchesArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImportBatchesArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImportBatchesArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImportBatchesArgs::MergeFrom(const ImportBatchesArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  batch_name_.MergeFrom(from.batch_name_);
  batch_.MergeFrom(from.batch_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImportBatchesArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportBatchesArgs::CopyFrom(const ImportBatchesArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportBatchesArgs::IsInitialized() const {

  return true;
}

void ImportBatchesArgs::Swap(ImportBatchesArgs* other) {
  if (other != this) {
    batch_name_.Swap(&other->batch_name_);
    batch_.Swap(&other->batch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImportBatchesArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportBatchesArgs_descriptor_;
  metadata.reflection = ImportBatchesArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AwaitOperationArgs::kTimeoutMillisecondsFieldNumber;
#endif  // !_MSC_VER

AwaitOperationArgs::AwaitOperationArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AwaitOperationArgs::InitAsDefaultInstance() {
}

AwaitOperationArgs::AwaitOperationArgs(const AwaitOperationArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AwaitOperationArgs::SharedCtor() {
  _cached_size_ = 0;
  timeout_milliseconds_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AwaitOperationArgs::~AwaitOperationArgs() {
  SharedDtor();
}

void AwaitOperationArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AwaitOperationArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AwaitOperationArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AwaitOperationArgs_descriptor_;
}

const AwaitOperationArgs& AwaitOperationArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

AwaitOperationArgs* AwaitOperationArgs::default_instance_ = NULL;

AwaitOperationArgs* AwaitOperationArgs::New() const {
  return new AwaitOperationArgs;
}

void AwaitOperationArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeout_milliseconds_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AwaitOperationArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timeout_milliseconds = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_milliseconds_)));
          set_has_timeout_milliseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AwaitOperationArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 timeout_milliseconds = 1 [default = -1];
  if (has_timeout_milliseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timeout_milliseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AwaitOperationArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 timeout_milliseconds = 1 [default = -1];
  if (has_timeout_milliseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timeout_milliseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AwaitOperationArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 timeout_milliseconds = 1 [default = -1];
    if (has_timeout_milliseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout_milliseconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AwaitOperationArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AwaitOperationArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AwaitOperationArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AwaitOperationArgs::MergeFrom(const AwaitOperationArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout_milliseconds()) {
      set_timeout_milliseconds(from.timeout_milliseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AwaitOperationArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwaitOperationArgs::CopyFrom(const AwaitOperationArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwaitOperationArgs::IsInitialized() const {

  return true;
}

void AwaitOperationArgs::Swap(AwaitOperationArgs* other) {
  if (other != this) {
    std::swap(timeout_milliseconds_, other->timeout_milliseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AwaitOperationArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AwaitOperationArgs_descriptor_;
  metadata.reflection = AwaitOperationArgs_reflection_;
  return metadata;
}


// ===================================================================

::std::string* MasterModelConfig::_default_pwt_name_ = NULL;
::std::string* MasterModelConfig::_default_nwt_name_ = NULL;
#ifndef _MSC_VER
const int MasterModelConfig::kTopicNameFieldNumber;
const int MasterModelConfig::kClassIdFieldNumber;
const int MasterModelConfig::kClassWeightFieldNumber;
const int MasterModelConfig::kScoreConfigFieldNumber;
const int MasterModelConfig::kRegularizerConfigFieldNumber;
const int MasterModelConfig::kThreadsFieldNumber;
const int MasterModelConfig::kPwtNameFieldNumber;
const int MasterModelConfig::kNwtNameFieldNumber;
const int MasterModelConfig::kInnerIterationsCountFieldNumber;
const int MasterModelConfig::kReuseThetaFieldNumber;
const int MasterModelConfig::kOptForAvxFieldNumber;
const int MasterModelConfig::kDiskCachePathFieldNumber;
const int MasterModelConfig::kCacheThetaFieldNumber;
#endif  // !_MSC_VER

MasterModelConfig::MasterModelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterModelConfig::InitAsDefaultInstance() {
}

MasterModelConfig::MasterModelConfig(const MasterModelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterModelConfig::SharedCtor() {
  _cached_size_ = 0;
  threads_ = 0;
  pwt_name_ = const_cast< ::std::string*>(_default_pwt_name_);
  nwt_name_ = const_cast< ::std::string*>(_default_nwt_name_);
  inner_iterations_count_ = 0;
  reuse_theta_ = false;
  opt_for_avx_ = true;
  disk_cache_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  cache_theta_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterModelConfig::~MasterModelConfig() {
  SharedDtor();
}

void MasterModelConfig::SharedDtor() {
  if (pwt_name_ != _default_pwt_name_) {
    delete pwt_name_;
  }
  if (nwt_name_ != _default_nwt_name_) {
    delete nwt_name_;
  }
  if (disk_cache_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete disk_cache_path_;
  }
  if (this != default_instance_) {
  }
}

void MasterModelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterModelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterModelConfig_descriptor_;
}

const MasterModelConfig& MasterModelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

MasterModelConfig* MasterModelConfig::default_instance_ = NULL;

MasterModelConfig* MasterModelConfig::New() const {
  return new MasterModelConfig;
}

void MasterModelConfig::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    threads_ = 0;
    if (has_pwt_name()) {
      if (pwt_name_ != _default_pwt_name_) {
        pwt_name_->assign(*_default_pwt_name_);
      }
    }
    if (has_nwt_name()) {
      if (nwt_name_ != _default_nwt_name_) {
        nwt_name_->assign(*_default_nwt_name_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    inner_iterations_count_ = 0;
    reuse_theta_ = false;
    opt_for_avx_ = true;
    if (has_disk_cache_path()) {
      if (disk_cache_path_ != &::google::protobuf::internal::GetEmptyString()) {
        disk_cache_path_->clear();
      }
    }
    cache_theta_ = false;
  }
  topic_name_.Clear();
  class_id_.Clear();
  class_weight_.Clear();
  score_config_.Clear();
  regularizer_config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterModelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string topic_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic_name(this->topic_name_size() - 1).data(),
            this->topic_name(this->topic_name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_topic_name;
        if (input->ExpectTag(18)) goto parse_class_id;
        break;
      }

      // repeated string class_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_id(this->class_id_size() - 1).data(),
            this->class_id(this->class_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_class_id;
        if (input->ExpectTag(29)) goto parse_class_weight;
        break;
      }

      // repeated float class_weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_class_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_class_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_class_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_class_weight;
        if (input->ExpectTag(34)) goto parse_score_config;
        break;
      }

      // repeated .artm.ScoreConfig score_config = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_score_config;
        if (input->ExpectTag(42)) goto parse_regularizer_config;
        break;
      }

      // repeated .artm.RegularizerConfig regularizer_config = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regularizer_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regularizer_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_regularizer_config;
        if (input->ExpectTag(48)) goto parse_threads;
        break;
      }

      // optional int32 threads = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threads_)));
          set_has_threads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pwt_name;
        break;
      }

      // optional string pwt_name = 7 [default = "pwt"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwt_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwt_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwt_name().data(), this->pwt_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nwt_name;
        break;
      }

      // optional string nwt_name = 8 [default = "nwt"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nwt_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nwt_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nwt_name().data(), this->nwt_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_inner_iterations_count;
        break;
      }

      // optional int32 inner_iterations_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inner_iterations_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inner_iterations_count_)));
          set_has_inner_iterations_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_reuse_theta;
        break;
      }

      // optional bool reuse_theta = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reuse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reuse_theta_)));
          set_has_reuse_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_opt_for_avx;
        break;
      }

      // optional bool opt_for_avx = 11 [default = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_for_avx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opt_for_avx_)));
          set_has_opt_for_avx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_disk_cache_path;
        break;
      }

      // optional string disk_cache_path = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_cache_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_cache_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_cache_path().data(), this->disk_cache_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cache_theta;
        break;
      }

      // optional bool cache_theta = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_theta_)));
          set_has_cache_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterModelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic_name(i).data(), this->topic_name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->topic_name(i), output);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->class_id(i).data(), this->class_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->class_id(i), output);
  }

  // repeated float class_weight = 3;
  for (int i = 0; i < this->class_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->class_weight(i), output);
  }

  // repeated .artm.ScoreConfig score_config = 4;
  for (int i = 0; i < this->score_config_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->score_config(i), output);
  }

  // repeated .artm.RegularizerConfig regularizer_config = 5;
  for (int i = 0; i < this->regularizer_config_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->regularizer_config(i), output);
  }

  // optional int32 threads = 6;
  if (has_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->threads(), output);
  }

  // optional string pwt_name = 7 [default = "pwt"];
  if (has_pwt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwt_name().data(), this->pwt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->pwt_name(), output);
  }

  // optional string nwt_name = 8 [default = "nwt"];
  if (has_nwt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwt_name().data(), this->nwt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->nwt_name(), output);
  }

  // optional int32 inner_iterations_count = 9;
  if (has_inner_iterations_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->inner_iterations_count(), output);
  }

  // optional bool reuse_theta = 10 [default = false];
  if (has_reuse_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->reuse_theta(), output);
  }

  // optional bool opt_for_avx = 11 [default = true];
  if (has_opt_for_avx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->opt_for_avx(), output);
  }

  // optional string disk_cache_path = 13;
  if (has_disk_cache_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_cache_path().data(), this->disk_cache_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->disk_cache_path(), output);
  }

  // optional bool cache_theta = 15 [default = false];
  if (has_cache_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->cache_theta(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterModelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string topic_name = 1;
  for (int i = 0; i < this->topic_name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic_name(i).data(), this->topic_name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->topic_name(i), target);
  }

  // repeated string class_id = 2;
  for (int i = 0; i < this->class_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_id(i).data(), this->class_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->class_id(i), target);
  }

  // repeated float class_weight = 3;
  for (int i = 0; i < this->class_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->class_weight(i), target);
  }

  // repeated .artm.ScoreConfig score_config = 4;
  for (int i = 0; i < this->score_config_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->score_config(i), target);
  }

  // repeated .artm.RegularizerConfig regularizer_config = 5;
  for (int i = 0; i < this->regularizer_config_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->regularizer_config(i), target);
  }

  // optional int32 threads = 6;
  if (has_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->threads(), target);
  }

  // optional string pwt_name = 7 [default = "pwt"];
  if (has_pwt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwt_name().data(), this->pwt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pwt_name(), target);
  }

  // optional string nwt_name = 8 [default = "nwt"];
  if (has_nwt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nwt_name().data(), this->nwt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->nwt_name(), target);
  }

  // optional int32 inner_iterations_count = 9;
  if (has_inner_iterations_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->inner_iterations_count(), target);
  }

  // optional bool reuse_theta = 10 [default = false];
  if (has_reuse_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->reuse_theta(), target);
  }

  // optional bool opt_for_avx = 11 [default = true];
  if (has_opt_for_avx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->opt_for_avx(), target);
  }

  // optional string disk_cache_path = 13;
  if (has_disk_cache_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_cache_path().data(), this->disk_cache_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->disk_cache_path(), target);
  }

  // optional bool cache_theta = 15 [default = false];
  if (has_cache_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->cache_theta(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterModelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional int32 threads = 6;
    if (has_threads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threads());
    }

    // optional string pwt_name = 7 [default = "pwt"];
    if (has_pwt_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwt_name());
    }

    // optional string nwt_name = 8 [default = "nwt"];
    if (has_nwt_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nwt_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 inner_iterations_count = 9;
    if (has_inner_iterations_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inner_iterations_count());
    }

    // optional bool reuse_theta = 10 [default = false];
    if (has_reuse_theta()) {
      total_size += 1 + 1;
    }

    // optional bool opt_for_avx = 11 [default = true];
    if (has_opt_for_avx()) {
      total_size += 1 + 1;
    }

    // optional string disk_cache_path = 13;
    if (has_disk_cache_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_cache_path());
    }

    // optional bool cache_theta = 15 [default = false];
    if (has_cache_theta()) {
      total_size += 1 + 1;
    }

  }
  // repeated string topic_name = 1;
  total_size += 1 * this->topic_name_size();
  for (int i = 0; i < this->topic_name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic_name(i));
  }

  // repeated string class_id = 2;
  total_size += 1 * this->class_id_size();
  for (int i = 0; i < this->class_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->class_id(i));
  }

  // repeated float class_weight = 3;
  {
    int data_size = 0;
    data_size = 4 * this->class_weight_size();
    total_size += 1 * this->class_weight_size() + data_size;
  }

  // repeated .artm.ScoreConfig score_config = 4;
  total_size += 1 * this->score_config_size();
  for (int i = 0; i < this->score_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_config(i));
  }

  // repeated .artm.RegularizerConfig regularizer_config = 5;
  total_size += 1 * this->regularizer_config_size();
  for (int i = 0; i < this->regularizer_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regularizer_config(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterModelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterModelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterModelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterModelConfig::MergeFrom(const MasterModelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_name_.MergeFrom(from.topic_name_);
  class_id_.MergeFrom(from.class_id_);
  class_weight_.MergeFrom(from.class_weight_);
  score_config_.MergeFrom(from.score_config_);
  regularizer_config_.MergeFrom(from.regularizer_config_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_threads()) {
      set_threads(from.threads());
    }
    if (from.has_pwt_name()) {
      set_pwt_name(from.pwt_name());
    }
    if (from.has_nwt_name()) {
      set_nwt_name(from.nwt_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inner_iterations_count()) {
      set_inner_iterations_count(from.inner_iterations_count());
    }
    if (from.has_reuse_theta()) {
      set_reuse_theta(from.reuse_theta());
    }
    if (from.has_opt_for_avx()) {
      set_opt_for_avx(from.opt_for_avx());
    }
    if (from.has_disk_cache_path()) {
      set_disk_cache_path(from.disk_cache_path());
    }
    if (from.has_cache_theta()) {
      set_cache_theta(from.cache_theta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterModelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterModelConfig::CopyFrom(const MasterModelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterModelConfig::IsInitialized() const {

  return true;
}

void MasterModelConfig::Swap(MasterModelConfig* other) {
  if (other != this) {
    topic_name_.Swap(&other->topic_name_);
    class_id_.Swap(&other->class_id_);
    class_weight_.Swap(&other->class_weight_);
    score_config_.Swap(&other->score_config_);
    regularizer_config_.Swap(&other->regularizer_config_);
    std::swap(threads_, other->threads_);
    std::swap(pwt_name_, other->pwt_name_);
    std::swap(nwt_name_, other->nwt_name_);
    std::swap(inner_iterations_count_, other->inner_iterations_count_);
    std::swap(reuse_theta_, other->reuse_theta_);
    std::swap(opt_for_avx_, other->opt_for_avx_);
    std::swap(disk_cache_path_, other->disk_cache_path_);
    std::swap(cache_theta_, other->cache_theta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterModelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterModelConfig_descriptor_;
  metadata.reflection = MasterModelConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FitOfflineMasterModelArgs::kBatchFilenameFieldNumber;
const int FitOfflineMasterModelArgs::kBatchWeightFieldNumber;
const int FitOfflineMasterModelArgs::kPassesFieldNumber;
const int FitOfflineMasterModelArgs::kBatchFolderFieldNumber;
#endif  // !_MSC_VER

FitOfflineMasterModelArgs::FitOfflineMasterModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FitOfflineMasterModelArgs::InitAsDefaultInstance() {
}

FitOfflineMasterModelArgs::FitOfflineMasterModelArgs(const FitOfflineMasterModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FitOfflineMasterModelArgs::SharedCtor() {
  _cached_size_ = 0;
  passes_ = 1;
  batch_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FitOfflineMasterModelArgs::~FitOfflineMasterModelArgs() {
  SharedDtor();
}

void FitOfflineMasterModelArgs::SharedDtor() {
  if (batch_folder_ != &::google::protobuf::internal::GetEmptyString()) {
    delete batch_folder_;
  }
  if (this != default_instance_) {
  }
}

void FitOfflineMasterModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FitOfflineMasterModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FitOfflineMasterModelArgs_descriptor_;
}

const FitOfflineMasterModelArgs& FitOfflineMasterModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

FitOfflineMasterModelArgs* FitOfflineMasterModelArgs::default_instance_ = NULL;

FitOfflineMasterModelArgs* FitOfflineMasterModelArgs::New() const {
  return new FitOfflineMasterModelArgs;
}

void FitOfflineMasterModelArgs::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    passes_ = 1;
    if (has_batch_folder()) {
      if (batch_folder_ != &::google::protobuf::internal::GetEmptyString()) {
        batch_folder_->clear();
      }
    }
  }
  batch_filename_.Clear();
  batch_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FitOfflineMasterModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string batch_filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_filename(this->batch_filename_size() - 1).data(),
            this->batch_filename(this->batch_filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_batch_filename;
        if (input->ExpectTag(21)) goto parse_batch_weight;
        break;
      }

      // repeated float batch_weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_batch_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_batch_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_batch_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_batch_weight;
        if (input->ExpectTag(24)) goto parse_passes;
        break;
      }

      // optional int32 passes = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passes_)));
          set_has_passes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_batch_folder;
        break;
      }

      // optional string batch_folder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_batch_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_folder().data(), this->batch_folder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FitOfflineMasterModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string batch_filename = 1;
  for (int i = 0; i < this->batch_filename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->batch_filename(i).data(), this->batch_filename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->batch_filename(i), output);
  }

  // repeated float batch_weight = 2;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->batch_weight(i), output);
  }

  // optional int32 passes = 3 [default = 1];
  if (has_passes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->passes(), output);
  }

  // optional string batch_folder = 4;
  if (has_batch_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_folder().data(), this->batch_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->batch_folder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FitOfflineMasterModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string batch_filename = 1;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->batch_filename(i), target);
  }

  // repeated float batch_weight = 2;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->batch_weight(i), target);
  }

  // optional int32 passes = 3 [default = 1];
  if (has_passes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->passes(), target);
  }

  // optional string batch_folder = 4;
  if (has_batch_folder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_folder().data(), this->batch_folder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->batch_folder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FitOfflineMasterModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 passes = 3 [default = 1];
    if (has_passes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passes());
    }

    // optional string batch_folder = 4;
    if (has_batch_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->batch_folder());
    }

  }
  // repeated string batch_filename = 1;
  total_size += 1 * this->batch_filename_size();
  for (int i = 0; i < this->batch_filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_filename(i));
  }

  // repeated float batch_weight = 2;
  {
    int data_size = 0;
    data_size = 4 * this->batch_weight_size();
    total_size += 1 * this->batch_weight_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FitOfflineMasterModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FitOfflineMasterModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FitOfflineMasterModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FitOfflineMasterModelArgs::MergeFrom(const FitOfflineMasterModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  batch_filename_.MergeFrom(from.batch_filename_);
  batch_weight_.MergeFrom(from.batch_weight_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_passes()) {
      set_passes(from.passes());
    }
    if (from.has_batch_folder()) {
      set_batch_folder(from.batch_folder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FitOfflineMasterModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FitOfflineMasterModelArgs::CopyFrom(const FitOfflineMasterModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitOfflineMasterModelArgs::IsInitialized() const {

  return true;
}

void FitOfflineMasterModelArgs::Swap(FitOfflineMasterModelArgs* other) {
  if (other != this) {
    batch_filename_.Swap(&other->batch_filename_);
    batch_weight_.Swap(&other->batch_weight_);
    std::swap(passes_, other->passes_);
    std::swap(batch_folder_, other->batch_folder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FitOfflineMasterModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FitOfflineMasterModelArgs_descriptor_;
  metadata.reflection = FitOfflineMasterModelArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FitOnlineMasterModelArgs::kBatchFilenameFieldNumber;
const int FitOnlineMasterModelArgs::kBatchWeightFieldNumber;
const int FitOnlineMasterModelArgs::kUpdateAfterFieldNumber;
const int FitOnlineMasterModelArgs::kApplyWeightFieldNumber;
const int FitOnlineMasterModelArgs::kDecayWeightFieldNumber;
const int FitOnlineMasterModelArgs::kAsyncFieldNumber;
#endif  // !_MSC_VER

FitOnlineMasterModelArgs::FitOnlineMasterModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FitOnlineMasterModelArgs::InitAsDefaultInstance() {
}

FitOnlineMasterModelArgs::FitOnlineMasterModelArgs(const FitOnlineMasterModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FitOnlineMasterModelArgs::SharedCtor() {
  _cached_size_ = 0;
  async_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FitOnlineMasterModelArgs::~FitOnlineMasterModelArgs() {
  SharedDtor();
}

void FitOnlineMasterModelArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FitOnlineMasterModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FitOnlineMasterModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FitOnlineMasterModelArgs_descriptor_;
}

const FitOnlineMasterModelArgs& FitOnlineMasterModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

FitOnlineMasterModelArgs* FitOnlineMasterModelArgs::default_instance_ = NULL;

FitOnlineMasterModelArgs* FitOnlineMasterModelArgs::New() const {
  return new FitOnlineMasterModelArgs;
}

void FitOnlineMasterModelArgs::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    async_ = false;
  }
  batch_filename_.Clear();
  batch_weight_.Clear();
  update_after_.Clear();
  apply_weight_.Clear();
  decay_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FitOnlineMasterModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string batch_filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_filename(this->batch_filename_size() - 1).data(),
            this->batch_filename(this->batch_filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_batch_filename;
        if (input->ExpectTag(21)) goto parse_batch_weight;
        break;
      }

      // repeated float batch_weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_batch_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_batch_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_batch_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_batch_weight;
        if (input->ExpectTag(24)) goto parse_update_after;
        break;
      }

      // repeated int32 update_after = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_update_after())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_update_after())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_update_after;
        if (input->ExpectTag(37)) goto parse_apply_weight;
        break;
      }

      // repeated float apply_weight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_apply_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_apply_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_apply_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_apply_weight;
        if (input->ExpectTag(45)) goto parse_decay_weight;
        break;
      }

      // repeated float decay_weight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_decay_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_decay_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_decay_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_decay_weight;
        if (input->ExpectTag(48)) goto parse_async;
        break;
      }

      // optional bool async = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_async:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &async_)));
          set_has_async();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FitOnlineMasterModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string batch_filename = 1;
  for (int i = 0; i < this->batch_filename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->batch_filename(i).data(), this->batch_filename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->batch_filename(i), output);
  }

  // repeated float batch_weight = 2;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->batch_weight(i), output);
  }

  // repeated int32 update_after = 3;
  for (int i = 0; i < this->update_after_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->update_after(i), output);
  }

  // repeated float apply_weight = 4;
  for (int i = 0; i < this->apply_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->apply_weight(i), output);
  }

  // repeated float decay_weight = 5;
  for (int i = 0; i < this->decay_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->decay_weight(i), output);
  }

  // optional bool async = 6 [default = false];
  if (has_async()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->async(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FitOnlineMasterModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string batch_filename = 1;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->batch_filename(i), target);
  }

  // repeated float batch_weight = 2;
  for (int i = 0; i < this->batch_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->batch_weight(i), target);
  }

  // repeated int32 update_after = 3;
  for (int i = 0; i < this->update_after_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->update_after(i), target);
  }

  // repeated float apply_weight = 4;
  for (int i = 0; i < this->apply_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->apply_weight(i), target);
  }

  // repeated float decay_weight = 5;
  for (int i = 0; i < this->decay_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->decay_weight(i), target);
  }

  // optional bool async = 6 [default = false];
  if (has_async()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->async(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FitOnlineMasterModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // optional bool async = 6 [default = false];
    if (has_async()) {
      total_size += 1 + 1;
    }

  }
  // repeated string batch_filename = 1;
  total_size += 1 * this->batch_filename_size();
  for (int i = 0; i < this->batch_filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_filename(i));
  }

  // repeated float batch_weight = 2;
  {
    int data_size = 0;
    data_size = 4 * this->batch_weight_size();
    total_size += 1 * this->batch_weight_size() + data_size;
  }

  // repeated int32 update_after = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->update_after_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->update_after(i));
    }
    total_size += 1 * this->update_after_size() + data_size;
  }

  // repeated float apply_weight = 4;
  {
    int data_size = 0;
    data_size = 4 * this->apply_weight_size();
    total_size += 1 * this->apply_weight_size() + data_size;
  }

  // repeated float decay_weight = 5;
  {
    int data_size = 0;
    data_size = 4 * this->decay_weight_size();
    total_size += 1 * this->decay_weight_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FitOnlineMasterModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FitOnlineMasterModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FitOnlineMasterModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FitOnlineMasterModelArgs::MergeFrom(const FitOnlineMasterModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  batch_filename_.MergeFrom(from.batch_filename_);
  batch_weight_.MergeFrom(from.batch_weight_);
  update_after_.MergeFrom(from.update_after_);
  apply_weight_.MergeFrom(from.apply_weight_);
  decay_weight_.MergeFrom(from.decay_weight_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_async()) {
      set_async(from.async());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FitOnlineMasterModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FitOnlineMasterModelArgs::CopyFrom(const FitOnlineMasterModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FitOnlineMasterModelArgs::IsInitialized() const {

  return true;
}

void FitOnlineMasterModelArgs::Swap(FitOnlineMasterModelArgs* other) {
  if (other != this) {
    batch_filename_.Swap(&other->batch_filename_);
    batch_weight_.Swap(&other->batch_weight_);
    update_after_.Swap(&other->update_after_);
    apply_weight_.Swap(&other->apply_weight_);
    decay_weight_.Swap(&other->decay_weight_);
    std::swap(async_, other->async_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FitOnlineMasterModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FitOnlineMasterModelArgs_descriptor_;
  metadata.reflection = FitOnlineMasterModelArgs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransformMasterModelArgs_ThetaMatrixType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformMasterModelArgs_ThetaMatrixType_descriptor_;
}
bool TransformMasterModelArgs_ThetaMatrixType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransformMasterModelArgs_ThetaMatrixType TransformMasterModelArgs::None;
const TransformMasterModelArgs_ThetaMatrixType TransformMasterModelArgs::Dense;
const TransformMasterModelArgs_ThetaMatrixType TransformMasterModelArgs::Sparse;
const TransformMasterModelArgs_ThetaMatrixType TransformMasterModelArgs::Cache;
const TransformMasterModelArgs_ThetaMatrixType TransformMasterModelArgs::DensePtdw;
const TransformMasterModelArgs_ThetaMatrixType TransformMasterModelArgs::SparsePtdw;
const TransformMasterModelArgs_ThetaMatrixType TransformMasterModelArgs::ThetaMatrixType_MIN;
const TransformMasterModelArgs_ThetaMatrixType TransformMasterModelArgs::ThetaMatrixType_MAX;
const int TransformMasterModelArgs::ThetaMatrixType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TransformMasterModelArgs::kBatchFieldNumber;
const int TransformMasterModelArgs::kBatchFilenameFieldNumber;
const int TransformMasterModelArgs::kThetaMatrixTypeFieldNumber;
const int TransformMasterModelArgs::kPredictClassIdFieldNumber;
#endif  // !_MSC_VER

TransformMasterModelArgs::TransformMasterModelArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransformMasterModelArgs::InitAsDefaultInstance() {
}

TransformMasterModelArgs::TransformMasterModelArgs(const TransformMasterModelArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransformMasterModelArgs::SharedCtor() {
  _cached_size_ = 0;
  theta_matrix_type_ = 1;
  predict_class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformMasterModelArgs::~TransformMasterModelArgs() {
  SharedDtor();
}

void TransformMasterModelArgs::SharedDtor() {
  if (predict_class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete predict_class_id_;
  }
  if (this != default_instance_) {
  }
}

void TransformMasterModelArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformMasterModelArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformMasterModelArgs_descriptor_;
}

const TransformMasterModelArgs& TransformMasterModelArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

TransformMasterModelArgs* TransformMasterModelArgs::default_instance_ = NULL;

TransformMasterModelArgs* TransformMasterModelArgs::New() const {
  return new TransformMasterModelArgs;
}

void TransformMasterModelArgs::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    theta_matrix_type_ = 1;
    if (has_predict_class_id()) {
      if (predict_class_id_ != &::google::protobuf::internal::GetEmptyString()) {
        predict_class_id_->clear();
      }
    }
  }
  batch_.Clear();
  batch_filename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformMasterModelArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .artm.Batch batch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_batch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_batch;
        if (input->ExpectTag(18)) goto parse_batch_filename;
        break;
      }

      // repeated string batch_filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_batch_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_batch_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->batch_filename(this->batch_filename_size() - 1).data(),
            this->batch_filename(this->batch_filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_batch_filename;
        if (input->ExpectTag(24)) goto parse_theta_matrix_type;
        break;
      }

      // optional .artm.TransformMasterModelArgs.ThetaMatrixType theta_matrix_type = 3 [default = Dense];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_theta_matrix_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::artm::TransformMasterModelArgs_ThetaMatrixType_IsValid(value)) {
            set_theta_matrix_type(static_cast< ::artm::TransformMasterModelArgs_ThetaMatrixType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_predict_class_id;
        break;
      }

      // optional string predict_class_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_predict_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_class_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->predict_class_id().data(), this->predict_class_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransformMasterModelArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .artm.Batch batch = 1;
  for (int i = 0; i < this->batch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->batch(i), output);
  }

  // repeated string batch_filename = 2;
  for (int i = 0; i < this->batch_filename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->batch_filename(i).data(), this->batch_filename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->batch_filename(i), output);
  }

  // optional .artm.TransformMasterModelArgs.ThetaMatrixType theta_matrix_type = 3 [default = Dense];
  if (has_theta_matrix_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->theta_matrix_type(), output);
  }

  // optional string predict_class_id = 4;
  if (has_predict_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predict_class_id().data(), this->predict_class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->predict_class_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransformMasterModelArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .artm.Batch batch = 1;
  for (int i = 0; i < this->batch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->batch(i), target);
  }

  // repeated string batch_filename = 2;
  for (int i = 0; i < this->batch_filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->batch_filename(i).data(), this->batch_filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->batch_filename(i), target);
  }

  // optional .artm.TransformMasterModelArgs.ThetaMatrixType theta_matrix_type = 3 [default = Dense];
  if (has_theta_matrix_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->theta_matrix_type(), target);
  }

  // optional string predict_class_id = 4;
  if (has_predict_class_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predict_class_id().data(), this->predict_class_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->predict_class_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransformMasterModelArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .artm.TransformMasterModelArgs.ThetaMatrixType theta_matrix_type = 3 [default = Dense];
    if (has_theta_matrix_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->theta_matrix_type());
    }

    // optional string predict_class_id = 4;
    if (has_predict_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_class_id());
    }

  }
  // repeated .artm.Batch batch = 1;
  total_size += 1 * this->batch_size();
  for (int i = 0; i < this->batch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->batch(i));
  }

  // repeated string batch_filename = 2;
  total_size += 1 * this->batch_filename_size();
  for (int i = 0; i < this->batch_filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->batch_filename(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformMasterModelArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformMasterModelArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformMasterModelArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformMasterModelArgs::MergeFrom(const TransformMasterModelArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  batch_.MergeFrom(from.batch_);
  batch_filename_.MergeFrom(from.batch_filename_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_theta_matrix_type()) {
      set_theta_matrix_type(from.theta_matrix_type());
    }
    if (from.has_predict_class_id()) {
      set_predict_class_id(from.predict_class_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformMasterModelArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformMasterModelArgs::CopyFrom(const TransformMasterModelArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformMasterModelArgs::IsInitialized() const {

  return true;
}

void TransformMasterModelArgs::Swap(TransformMasterModelArgs* other) {
  if (other != this) {
    batch_.Swap(&other->batch_);
    batch_filename_.Swap(&other->batch_filename_);
    std::swap(theta_matrix_type_, other->theta_matrix_type_);
    std::swap(predict_class_id_, other->predict_class_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformMasterModelArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformMasterModelArgs_descriptor_;
  metadata.reflection = TransformMasterModelArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigureLoggingArgs::kLogDirFieldNumber;
const int ConfigureLoggingArgs::kMinloglevelFieldNumber;
const int ConfigureLoggingArgs::kStderrthresholdFieldNumber;
const int ConfigureLoggingArgs::kLogtostderrFieldNumber;
const int ConfigureLoggingArgs::kColorlogtostderrFieldNumber;
const int ConfigureLoggingArgs::kAlsologtostderrFieldNumber;
const int ConfigureLoggingArgs::kLogbufsecsFieldNumber;
const int ConfigureLoggingArgs::kLogbuflevelFieldNumber;
const int ConfigureLoggingArgs::kMaxLogSizeFieldNumber;
const int ConfigureLoggingArgs::kStopLoggingIfFullDiskFieldNumber;
#endif  // !_MSC_VER

ConfigureLoggingArgs::ConfigureLoggingArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigureLoggingArgs::InitAsDefaultInstance() {
}

ConfigureLoggingArgs::ConfigureLoggingArgs(const ConfigureLoggingArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigureLoggingArgs::SharedCtor() {
  _cached_size_ = 0;
  log_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  minloglevel_ = 0;
  stderrthreshold_ = 0;
  logtostderr_ = false;
  colorlogtostderr_ = false;
  alsologtostderr_ = false;
  logbufsecs_ = 0;
  logbuflevel_ = 0;
  max_log_size_ = 0;
  stop_logging_if_full_disk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigureLoggingArgs::~ConfigureLoggingArgs() {
  SharedDtor();
}

void ConfigureLoggingArgs::SharedDtor() {
  if (log_dir_ != &::google::protobuf::internal::GetEmptyString()) {
    delete log_dir_;
  }
  if (this != default_instance_) {
  }
}

void ConfigureLoggingArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigureLoggingArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigureLoggingArgs_descriptor_;
}

const ConfigureLoggingArgs& ConfigureLoggingArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ConfigureLoggingArgs* ConfigureLoggingArgs::default_instance_ = NULL;

ConfigureLoggingArgs* ConfigureLoggingArgs::New() const {
  return new ConfigureLoggingArgs;
}

void ConfigureLoggingArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_log_dir()) {
      if (log_dir_ != &::google::protobuf::internal::GetEmptyString()) {
        log_dir_->clear();
      }
    }
    minloglevel_ = 0;
    stderrthreshold_ = 0;
    logtostderr_ = false;
    colorlogtostderr_ = false;
    alsologtostderr_ = false;
    logbufsecs_ = 0;
    logbuflevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    max_log_size_ = 0;
    stop_logging_if_full_disk_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigureLoggingArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string log_dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_dir().data(), this->log_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minloglevel;
        break;
      }

      // optional int32 minloglevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minloglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minloglevel_)));
          set_has_minloglevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stderrthreshold;
        break;
      }

      // optional int32 stderrthreshold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stderrthreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stderrthreshold_)));
          set_has_stderrthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logtostderr;
        break;
      }

      // optional bool logtostderr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logtostderr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logtostderr_)));
          set_has_logtostderr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_colorlogtostderr;
        break;
      }

      // optional bool colorlogtostderr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorlogtostderr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &colorlogtostderr_)));
          set_has_colorlogtostderr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_alsologtostderr;
        break;
      }

      // optional bool alsologtostderr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alsologtostderr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alsologtostderr_)));
          set_has_alsologtostderr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_logbufsecs;
        break;
      }

      // optional int32 logbufsecs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logbufsecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logbufsecs_)));
          set_has_logbufsecs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_logbuflevel;
        break;
      }

      // optional int32 logbuflevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logbuflevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logbuflevel_)));
          set_has_logbuflevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_max_log_size;
        break;
      }

      // optional int32 max_log_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_log_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_log_size_)));
          set_has_max_log_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_stop_logging_if_full_disk;
        break;
      }

      // optional bool stop_logging_if_full_disk = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop_logging_if_full_disk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_logging_if_full_disk_)));
          set_has_stop_logging_if_full_disk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigureLoggingArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string log_dir = 1;
  if (has_log_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->log_dir(), output);
  }

  // optional int32 minloglevel = 2;
  if (has_minloglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minloglevel(), output);
  }

  // optional int32 stderrthreshold = 3;
  if (has_stderrthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stderrthreshold(), output);
  }

  // optional bool logtostderr = 4;
  if (has_logtostderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->logtostderr(), output);
  }

  // optional bool colorlogtostderr = 5;
  if (has_colorlogtostderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->colorlogtostderr(), output);
  }

  // optional bool alsologtostderr = 6;
  if (has_alsologtostderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->alsologtostderr(), output);
  }

  // optional int32 logbufsecs = 7;
  if (has_logbufsecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->logbufsecs(), output);
  }

  // optional int32 logbuflevel = 8;
  if (has_logbuflevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->logbuflevel(), output);
  }

  // optional int32 max_log_size = 9;
  if (has_max_log_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_log_size(), output);
  }

  // optional bool stop_logging_if_full_disk = 10;
  if (has_stop_logging_if_full_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->stop_logging_if_full_disk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigureLoggingArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string log_dir = 1;
  if (has_log_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log_dir(), target);
  }

  // optional int32 minloglevel = 2;
  if (has_minloglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minloglevel(), target);
  }

  // optional int32 stderrthreshold = 3;
  if (has_stderrthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stderrthreshold(), target);
  }

  // optional bool logtostderr = 4;
  if (has_logtostderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->logtostderr(), target);
  }

  // optional bool colorlogtostderr = 5;
  if (has_colorlogtostderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->colorlogtostderr(), target);
  }

  // optional bool alsologtostderr = 6;
  if (has_alsologtostderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->alsologtostderr(), target);
  }

  // optional int32 logbufsecs = 7;
  if (has_logbufsecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->logbufsecs(), target);
  }

  // optional int32 logbuflevel = 8;
  if (has_logbuflevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->logbuflevel(), target);
  }

  // optional int32 max_log_size = 9;
  if (has_max_log_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_log_size(), target);
  }

  // optional bool stop_logging_if_full_disk = 10;
  if (has_stop_logging_if_full_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->stop_logging_if_full_disk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigureLoggingArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string log_dir = 1;
    if (has_log_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_dir());
    }

    // optional int32 minloglevel = 2;
    if (has_minloglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minloglevel());
    }

    // optional int32 stderrthreshold = 3;
    if (has_stderrthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stderrthreshold());
    }

    // optional bool logtostderr = 4;
    if (has_logtostderr()) {
      total_size += 1 + 1;
    }

    // optional bool colorlogtostderr = 5;
    if (has_colorlogtostderr()) {
      total_size += 1 + 1;
    }

    // optional bool alsologtostderr = 6;
    if (has_alsologtostderr()) {
      total_size += 1 + 1;
    }

    // optional int32 logbufsecs = 7;
    if (has_logbufsecs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logbufsecs());
    }

    // optional int32 logbuflevel = 8;
    if (has_logbuflevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logbuflevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_log_size = 9;
    if (has_max_log_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_log_size());
    }

    // optional bool stop_logging_if_full_disk = 10;
    if (has_stop_logging_if_full_disk()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigureLoggingArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigureLoggingArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigureLoggingArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigureLoggingArgs::MergeFrom(const ConfigureLoggingArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_dir()) {
      set_log_dir(from.log_dir());
    }
    if (from.has_minloglevel()) {
      set_minloglevel(from.minloglevel());
    }
    if (from.has_stderrthreshold()) {
      set_stderrthreshold(from.stderrthreshold());
    }
    if (from.has_logtostderr()) {
      set_logtostderr(from.logtostderr());
    }
    if (from.has_colorlogtostderr()) {
      set_colorlogtostderr(from.colorlogtostderr());
    }
    if (from.has_alsologtostderr()) {
      set_alsologtostderr(from.alsologtostderr());
    }
    if (from.has_logbufsecs()) {
      set_logbufsecs(from.logbufsecs());
    }
    if (from.has_logbuflevel()) {
      set_logbuflevel(from.logbuflevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_log_size()) {
      set_max_log_size(from.max_log_size());
    }
    if (from.has_stop_logging_if_full_disk()) {
      set_stop_logging_if_full_disk(from.stop_logging_if_full_disk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigureLoggingArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigureLoggingArgs::CopyFrom(const ConfigureLoggingArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigureLoggingArgs::IsInitialized() const {

  return true;
}

void ConfigureLoggingArgs::Swap(ConfigureLoggingArgs* other) {
  if (other != this) {
    std::swap(log_dir_, other->log_dir_);
    std::swap(minloglevel_, other->minloglevel_);
    std::swap(stderrthreshold_, other->stderrthreshold_);
    std::swap(logtostderr_, other->logtostderr_);
    std::swap(colorlogtostderr_, other->colorlogtostderr_);
    std::swap(alsologtostderr_, other->alsologtostderr_);
    std::swap(logbufsecs_, other->logbufsecs_);
    std::swap(logbuflevel_, other->logbuflevel_);
    std::swap(max_log_size_, other->max_log_size_);
    std::swap(stop_logging_if_full_disk_, other->stop_logging_if_full_disk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigureLoggingArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigureLoggingArgs_descriptor_;
  metadata.reflection = ConfigureLoggingArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClearThetaCacheArgs::ClearThetaCacheArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearThetaCacheArgs::InitAsDefaultInstance() {
}

ClearThetaCacheArgs::ClearThetaCacheArgs(const ClearThetaCacheArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearThetaCacheArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearThetaCacheArgs::~ClearThetaCacheArgs() {
  SharedDtor();
}

void ClearThetaCacheArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearThetaCacheArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearThetaCacheArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearThetaCacheArgs_descriptor_;
}

const ClearThetaCacheArgs& ClearThetaCacheArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ClearThetaCacheArgs* ClearThetaCacheArgs::default_instance_ = NULL;

ClearThetaCacheArgs* ClearThetaCacheArgs::New() const {
  return new ClearThetaCacheArgs;
}

void ClearThetaCacheArgs::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearThetaCacheArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClearThetaCacheArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearThetaCacheArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearThetaCacheArgs::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearThetaCacheArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearThetaCacheArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearThetaCacheArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearThetaCacheArgs::MergeFrom(const ClearThetaCacheArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearThetaCacheArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearThetaCacheArgs::CopyFrom(const ClearThetaCacheArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearThetaCacheArgs::IsInitialized() const {

  return true;
}

void ClearThetaCacheArgs::Swap(ClearThetaCacheArgs* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearThetaCacheArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearThetaCacheArgs_descriptor_;
  metadata.reflection = ClearThetaCacheArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClearScoreCacheArgs::ClearScoreCacheArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearScoreCacheArgs::InitAsDefaultInstance() {
}

ClearScoreCacheArgs::ClearScoreCacheArgs(const ClearScoreCacheArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearScoreCacheArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearScoreCacheArgs::~ClearScoreCacheArgs() {
  SharedDtor();
}

void ClearScoreCacheArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearScoreCacheArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearScoreCacheArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearScoreCacheArgs_descriptor_;
}

const ClearScoreCacheArgs& ClearScoreCacheArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ClearScoreCacheArgs* ClearScoreCacheArgs::default_instance_ = NULL;

ClearScoreCacheArgs* ClearScoreCacheArgs::New() const {
  return new ClearScoreCacheArgs;
}

void ClearScoreCacheArgs::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearScoreCacheArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClearScoreCacheArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearScoreCacheArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearScoreCacheArgs::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearScoreCacheArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearScoreCacheArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearScoreCacheArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearScoreCacheArgs::MergeFrom(const ClearScoreCacheArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearScoreCacheArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearScoreCacheArgs::CopyFrom(const ClearScoreCacheArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearScoreCacheArgs::IsInitialized() const {

  return true;
}

void ClearScoreCacheArgs::Swap(ClearScoreCacheArgs* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearScoreCacheArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearScoreCacheArgs_descriptor_;
  metadata.reflection = ClearScoreCacheArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClearScoreArrayCacheArgs::ClearScoreArrayCacheArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearScoreArrayCacheArgs::InitAsDefaultInstance() {
}

ClearScoreArrayCacheArgs::ClearScoreArrayCacheArgs(const ClearScoreArrayCacheArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearScoreArrayCacheArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearScoreArrayCacheArgs::~ClearScoreArrayCacheArgs() {
  SharedDtor();
}

void ClearScoreArrayCacheArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearScoreArrayCacheArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearScoreArrayCacheArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearScoreArrayCacheArgs_descriptor_;
}

const ClearScoreArrayCacheArgs& ClearScoreArrayCacheArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_artm_2fmessages_2eproto();
  return *default_instance_;
}

ClearScoreArrayCacheArgs* ClearScoreArrayCacheArgs::default_instance_ = NULL;

ClearScoreArrayCacheArgs* ClearScoreArrayCacheArgs::New() const {
  return new ClearScoreArrayCacheArgs;
}

void ClearScoreArrayCacheArgs::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearScoreArrayCacheArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClearScoreArrayCacheArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearScoreArrayCacheArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearScoreArrayCacheArgs::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearScoreArrayCacheArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearScoreArrayCacheArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearScoreArrayCacheArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearScoreArrayCacheArgs::MergeFrom(const ClearScoreArrayCacheArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearScoreArrayCacheArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearScoreArrayCacheArgs::CopyFrom(const ClearScoreArrayCacheArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearScoreArrayCacheArgs::IsInitialized() const {

  return true;
}

void ClearScoreArrayCacheArgs::Swap(ClearScoreArrayCacheArgs* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearScoreArrayCacheArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearScoreArrayCacheArgs_descriptor_;
  metadata.reflection = ClearScoreArrayCacheArgs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace artm

// @@protoc_insertion_point(global_scope)
