// File messages.proto defines all messages that can be transefer in or out from BigARTM library.
package artm;

// Represents an array of double-precision floating point values
message DoubleArray {
  repeated double value = 1 [packed = true];
}

// Represents an array of single-precision floating point values
message FloatArray {
  repeated float value = 1 [packed = true];
}

// Represents an array of integer values
message IntArray {
  repeated int32 value = 1 [packed = true];
}

// Represents an array of string values
message StringArray {
  repeated string value = 1;
}

// Represents a unit of textual information.
message Item {
  optional int32 id = 1;
  optional string title = 2;
  repeated int32 token_id = 3;
  repeated float token_weight = 4;
}

// Represents a set of items.
message Batch {
  repeated string token = 1;
  repeated string class_id = 2;
  repeated Item item = 3;
  optional string description = 4;
  optional string id = 5;
}

// Represents a configuration of a master component
message MasterComponentConfig {
  optional bool cache_theta = 5 [default = false];
  optional int32 processors_count = 6;
  repeated ScoreConfig score_config = 9;
  repeated RegularizerConfig regularizer_config = 10;
  optional string disk_cache_path = 15;
}

enum RegularizerType {
  SmoothSparseTheta = 0;
  SmoothSparsePhi = 1;
  DecorrelatorPhi = 2;
  MultiLanguagePhi = 3;
  LabelRegularizationPhi = 4;
  SpecifiedSparsePhi = 5;
  ImproveCoherencePhi = 6;
  SmoothPtdw = 7;
  TopicSelectionTheta = 8;
}

// Represents a configuration of a general regularizer
message RegularizerConfig {
  optional string name = 1;
  optional RegularizerType regularizer_type = 2;
  optional bytes config = 3;
  optional float tau = 4;
  optional float gamma = 5;
  repeated string topic_name = 6;
  repeated string class_id = 7;
  repeated string dictionary_name = 8;
}

// Represents a configuration of a SmoothSparse Theta regularizer
message SmoothSparseThetaConfig {
  repeated float alpha_iter = 2;
  optional TransformConfig transform_config = 3;
}

// Represents a configuration of a SmoothSparse Phi regularizer
message SmoothSparsePhiConfig {
  optional TransformConfig transform_config = 4;
}

message SpecifiedSparsePhiConfig {
  enum Mode {
    SparseTopics = 0;
    SparseTokens = 1;
  }

  optional int32 max_elements_count = 3 [default = 20];
  optional float probability_threshold = 4 [default = 0.99];
  optional Mode mode = 5 [default = SparseTopics];
}

// Represents a configuration of a Smooth Ptdw regularizer
message SmoothPtdwConfig {
  enum Type {
    MovingAverage = 1;
    MovingProduct = 2;
  }

  optional Type type = 1 [default = MovingAverage];
  optional int32 window = 3 [default = 10];
  optional double threshold = 4 [default = 1.0];
}

// Represents a configuration of a TopicSelection Theta regularizer
message TopicSelectionThetaConfig {
  repeated float topic_value = 2;  // user-counted value = n / (n_t * |T|)
  repeated float alpha_iter = 3;
}

// Represents the transform functions
message TransformConfig {
  enum TransformType {
    Logarithm = 0;  // f(x) = ln(x)
    Polynomial = 1; // f(x) = a * x^n    
    Constant = 2; // f(x) = 1
  }

  optional TransformType transform_type = 1 [default = Constant];
  optional double n = 2 [default = 1];
  optional double a = 3 [default = 1];
}

enum ScoreType {
  Perplexity = 0;
  SparsityTheta = 1;
  SparsityPhi = 2;
  TopTokens = 4;
  ThetaSnippet = 5;
  TopicKernel = 6;
  TopicMassPhi = 7;
  ClassPrecision = 8;
}

// Represents a configuration of a general score
message ScoreConfig {
  optional string name = 1;
  optional ScoreType score_type = 2;
  optional bytes config = 3;
  repeated string topic_name = 4;
  repeated string class_id = 5;
  repeated string dictionary_name = 6;
  optional float eps = 3 [default = 1e-37];
}

// Represents a result of score calculation
message ScoreData {
  optional string name = 1;
  optional ScoreType score_type = 2;
  optional bytes data = 3;
  optional double value = 4;
  optional double numerator = 5;
  optional double denominator = 6;
}

// Represents a result of calculation of a perplexity score
message PerplexityScore {
  optional int64 zero_words = 4;
}

// Represents a configuration of a top tokens score
message TopTokensScoreConfig {
  optional int32 num_tokens = 1 [default = 10];
}

// Represents a result of calculation of a top tokens score
message TopTokensScore {
  optional int32 num_entries = 1;
  repeated string topic_name = 2;
  repeated int32 topic_index = 3;
  repeated string token = 4;
  repeated float weight = 5;
  optional FloatArray coherence = 6;
  optional float average_coherence = 7;
}

// Represents a configuration of a theta snippet score
message ThetaSnippetScoreConfig {
  optional int32 item_count = 4 [default = 10];
}

// Represents a result of calculation of a theta snippet score
message ThetaSnippetScore {
  repeated int32 item_id = 1;
  repeated FloatArray values = 2;
}

// Represents a configuration of a topic kernel score
message TopicKernelScoreConfig {
  enum Type {
    Size = 0;
    Purity = 1;
    Contrast = 2;
    Coherence = 3;
  }

  optional Type type = 1 [default = Size];
  optional double probability_mass_threshold = 4 [default = 0.1];
}

// Represents a result of calculation of a topic kernel score
message TopicKernelScore {
  optional DoubleArray values = 1;
  repeated StringArray kernel_tokens = 9;
  optional StringArray topic_name = 10;
}

// Represents a result of calculation of a topic part in nwt score
message TopicMassPhiScore {
  repeated string topic_name = 2;
  repeated double topic_ratio = 3;
  repeated double topic_mass = 4;
}

// Represents a topic model (or an operation on topic model)
message TopicModel {
  optional string name = 1 [default = "@model"];
  repeated string topic_name = 3;
  repeated string token = 4;
  repeated FloatArray token_weights = 5;
  repeated string class_id = 6;

  repeated IntArray topic_index = 8;
}

// Represents a theta matrix.
message ThetaMatrix {
  optional string model_name = 1 [default = "@model"];
  repeated int32 item_id = 2;
  repeated FloatArray item_weights = 3;
  repeated string topic_name = 4;
  repeated string item_title = 6;
  repeated IntArray topic_index = 7;
}

// Represents a configuration of a collection parser.
message CollectionParserConfig {
  enum Format {
    BagOfWordsUci = 0;
    MatrixMarket = 1;
    VowpalWabbit = 2;
  }

  enum NameType {
    Guid = 0;
    Code = 1;
  }

  optional Format format = 1 [default = BagOfWordsUci];
  optional string docword_file_path = 2;
  optional string vocab_file_path = 3;
  optional string target_folder = 4;
  optional int32 num_items_per_batch = 5 [default = 1000];
  optional bool use_unity_based_indices = 6 [default = true];
  optional NameType name_type = 7 [default = Guid];
}

// Represents an argument of 'initialize model' operation
message InitializeModelArgs {
  optional string model_name = 1;
  optional string dictionary_name = 2;
  repeated string topic_name = 4;
  optional int32 seed = 5 [default = -1];
}

// Represents a static dictionary.
message DictionaryData {
  optional string name = 1;
  repeated string token = 2;
  repeated string class_id = 3;
  repeated float token_value = 4;  // for scores and regularizers
  repeated float token_tf = 5;  // token frequency
  repeated float token_df = 6;  // number of document occurences
  repeated int32 cooc_first_index = 7;
  repeated int32 cooc_second_index = 8;
  repeated float cooc_value = 9;
}

message FilterDictionaryArgs {
  optional string dictionary_name = 1;
  optional string dictionary_target_name = 2;

  optional string class_id = 3;
  optional float min_df = 4;
  optional float max_df = 5;
  optional float min_df_rate = 6;
  optional float max_df_rate = 7;
  optional float min_tf = 8;
  optional float max_tf = 9;
}

message GatherDictionaryArgs {
  optional string dictionary_target_name = 1;
  optional string data_path = 2;
  optional string cooc_file_path = 3;
  optional string vocab_file_path = 4;
  optional bool symmetric_cooc_values = 5 [default = false];
}

message GetDictionaryArgs {
  optional string dictionary_name = 1;
}

message GetTopicModelArgs {
  enum RequestType {
    Dense = 0;
    Sparse = 1;
    Metadata = 2;
  }

  optional string model_name = 1;
  repeated string topic_name = 2;
  repeated string token = 3;
  repeated string class_id = 4;
  optional float eps = 6 [default = 1e-37];
  optional RequestType request_type = 7 [default = Dense];
}

message GetThetaMatrixArgs {
  enum RequestType {
    Dense = 0;
    Sparse = 1;
  }

  optional string model_name = 1;
  repeated string topic_name = 3;
  optional float eps = 7 [default = 1e-37];
  optional MatrixLayout matrix_layout = 8 [default = Dense];
}

message GetScoreValueArgs {
  optional string model_name = 1;
  optional string score_name = 2;
}

message ExportModelArgs {
  optional string file_name = 1;
  optional string model_name = 2;
}

message ImportModelArgs {
  optional string file_name = 1;
  optional string model_name = 2;
}

message AttachModelArgs {
  optional string model_name = 1;
}

message ProcessBatchesArgs {
  enum RequestType {
    None = 0;
    Dense = 1;
    Sparse = 2;
    Cache = 3;
    DensePtdw = 4;
    SparsePtdw = 5;
  }

  optional string nwt_target_name = 1;

  repeated string batch_filename = 2;
  optional string pwt_source_name = 3;
  optional int32 inner_iterations_count = 4 [default = 10];
  repeated string regularizer_name = 6;
  repeated string class_id = 8;
  repeated float class_weight = 9;
  optional bool reuse_theta = 10 [default = false];
  optional RequestType request_type = 14 [default = Cache];
  repeated float batch_weight = 15;
  optional string model_name_cache = 16;
  optional string predict_class_id = 17;
}

message ProcessBatchesResult {
  repeated ScoreData score_data = 1;
  optional ThetaMatrix theta_matrix = 2;
}

message MergeModelArgs {
  optional string nwt_target_name = 1;
  repeated string nwt_source_name = 2;
  repeated float source_weight = 3;
  repeated string topic_name = 4;
}

message RegularizeModelArgs {
  optional string rwt_target_name = 1;
  optional string pwt_source_name = 2;
  optional string nwt_source_name = 3;
  repeated string regularizer_name = 4;
}

message NormalizeModelArgs {
  optional string pwt_target_name = 1;
  optional string nwt_source_name = 2;
  optional string rwt_source_name = 3;
}

message ImportDictionaryArgs {
  optional string file_name = 1;
  optional string dictionary_name = 2;
}

message ExportDictionaryArgs {
  optional string file_name = 1;
  optional string dictionary_name = 2;
}

message CopyRequestResultArgs {
  enum RequestType {
    DefaultRequestType = 0;
    GetThetaSecondPass = 1;
    GetModelSecondPass = 2;
  }

  optional RequestType request_type = 1 [default = DefaultRequestType];
}

message DuplicateMasterComponentArgs {
}

message GetMasterComponentInfoArgs {
}

message MasterComponentInfo {
  message RegularizerInfo {
    optional string name = 1;
    optional string type = 2;
  }

  message ScoreInfo {
    optional string name = 1;
    optional string type = 2;
  }

  message DictionaryInfo {
    optional string name = 1;
    optional int64 entries_count = 2;
  }

  message BatchInfo {
    optional string name = 1;
    optional int32 items_count = 2;
    optional int32 token_count = 3;
  }

  message ModelInfo {
    optional string name = 1;
    optional string type = 2;
    optional int32 topics_count = 3;
    optional int32 token_count = 4;
  }

  message CacheEntryInfo {
    optional string key = 1;
    optional int32 byte_size = 2;
  }

  optional MasterComponentConfig config = 2;
  repeated RegularizerInfo regularizer = 3;
  repeated ScoreInfo score = 4;
  repeated DictionaryInfo dictionary = 5;
  repeated ModelInfo model = 6;
  repeated CacheEntryInfo cache_entry = 7;
  repeated BatchInfo batch = 10;
}

message ImportBatchesArgs {
  repeated Batch batch = 3;
}

message AwaitOperationArgs {
  optional int32 timeout_milliseconds = 1 [default = -1];
}

message MasterModelConfig {
  repeated string topic_name = 1;
  repeated string class_id = 2;
  repeated float class_weight = 3;
  repeated ScoreConfig score_config = 4;
  repeated RegularizerConfig regularizer_config = 5;
  optional int32 processors_count = 6;
  optional string pwt_name = 7;
  optional string nwt_name = 8 [default = "nwt"];
  optional int32 inner_iterations_count = 9;
  optional bool reuse_theta = 10 [default = false];
  optional string disk_cache_path = 13;
}

message FitOfflineMasterModelArgs {
  repeated string batch_filename = 1;
  repeated float batch_weight = 2;
  optional int32 passes = 3 [default = 1];
}

message FitOnlineMasterModelArgs {
  repeated string batch_filename = 1;
  repeated float batch_weight = 2;
  repeated int32 update_after = 3;
  repeated float apply_weight = 4;
  repeated float decay_weight = 5;
  optional bool async = 6 [default = false];
}

message TransformMasterModelArgs {
  enum ThetaMatrixType {
    None = 0;
    Dense = 1;
    Sparse = 2;
    Cache = 3;
    DensePtdw = 4;
    SparsePtdw = 5;
  }

  repeated string batch_filename = 1;
  optional ThetaMatrixType theta_matrix_type = 2 [default = Cache];
  optional string predict_class_id = 3;
}

message ResetCacheArgs {
  optional string model_name = 1;
  optional bool reset_cache = 2 [default = true];
  optional bool reset_scores = 3 [default = true];
}
