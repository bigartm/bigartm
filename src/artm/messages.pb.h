// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artm/messages.proto

#ifndef PROTOBUF_artm_2fmessages_2eproto__INCLUDED
#define PROTOBUF_artm_2fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace artm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_artm_2fmessages_2eproto();
void protobuf_AssignDesc_artm_2fmessages_2eproto();
void protobuf_ShutdownFile_artm_2fmessages_2eproto();

class DoubleArray;
class FloatArray;
class BoolArray;
class IntArray;
class StringArray;
class Item;
class Batch;
class RegularizerSettings;
class RegularizerConfig;
class SmoothSparseThetaConfig;
class SmoothSparsePhiConfig;
class DecorrelatorPhiConfig;
class MultiLanguagePhiConfig;
class LabelRegularizationPhiConfig;
class SpecifiedSparsePhiConfig;
class ImproveCoherencePhiConfig;
class SmoothPtdwConfig;
class TopicSelectionThetaConfig;
class TransformConfig;
class ScoreConfig;
class ScoreData;
class ScoreDataArray;
class PerplexityScoreConfig;
class PerplexityScore;
class SparsityThetaScoreConfig;
class SparsityThetaScore;
class SparsityPhiScoreConfig;
class SparsityPhiScore;
class ItemsProcessedScoreConfig;
class ItemsProcessedScore;
class TopTokensScoreConfig;
class TopTokensScore;
class ThetaSnippetScoreConfig;
class ThetaSnippetScore;
class TopicKernelScoreConfig;
class TopicKernelScore;
class TopicMassPhiScoreConfig;
class TopicMassPhiScore;
class ClassPrecisionScoreConfig;
class ClassPrecisionScore;
class PeakMemoryScoreConfig;
class PeakMemoryScore;
class TopicModel;
class TopicModel_TopicModelInternals;
class ThetaMatrix;
class CollectionParserConfig;
class InitializeModelArgs;
class InitializeModelArgs_Filter;
class DictionaryData;
class FilterDictionaryArgs;
class GatherDictionaryArgs;
class GetDictionaryArgs;
class GetTopicModelArgs;
class GetThetaMatrixArgs;
class GetScoreValueArgs;
class GetScoreArrayArgs;
class ExportModelArgs;
class ImportModelArgs;
class AttachModelArgs;
class ProcessBatchesArgs;
class ProcessBatchesResult;
class MergeModelArgs;
class RegularizeModelArgs;
class NormalizeModelArgs;
class ImportDictionaryArgs;
class ExportDictionaryArgs;
class CopyRequestResultArgs;
class DuplicateMasterComponentArgs;
class GetMasterComponentInfoArgs;
class MasterComponentInfo;
class MasterComponentInfo_RegularizerInfo;
class MasterComponentInfo_ScoreInfo;
class MasterComponentInfo_DictionaryInfo;
class MasterComponentInfo_BatchInfo;
class MasterComponentInfo_ModelInfo;
class MasterComponentInfo_CacheEntryInfo;
class ImportBatchesArgs;
class AwaitOperationArgs;
class MasterModelConfig;
class FitOfflineMasterModelArgs;
class FitOnlineMasterModelArgs;
class TransformMasterModelArgs;
class ConfigureLoggingArgs;
class ClearThetaCacheArgs;
class ClearScoreCacheArgs;
class ClearScoreArrayCacheArgs;

enum RegularizerConfig_Type {
  RegularizerConfig_Type_SmoothSparseTheta = 0,
  RegularizerConfig_Type_SmoothSparsePhi = 1,
  RegularizerConfig_Type_DecorrelatorPhi = 2,
  RegularizerConfig_Type_MultiLanguagePhi = 3,
  RegularizerConfig_Type_LabelRegularizationPhi = 4,
  RegularizerConfig_Type_SpecifiedSparsePhi = 5,
  RegularizerConfig_Type_ImproveCoherencePhi = 6,
  RegularizerConfig_Type_SmoothPtdw = 7,
  RegularizerConfig_Type_TopicSelectionTheta = 8
};
bool RegularizerConfig_Type_IsValid(int value);
const RegularizerConfig_Type RegularizerConfig_Type_Type_MIN = RegularizerConfig_Type_SmoothSparseTheta;
const RegularizerConfig_Type RegularizerConfig_Type_Type_MAX = RegularizerConfig_Type_TopicSelectionTheta;
const int RegularizerConfig_Type_Type_ARRAYSIZE = RegularizerConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegularizerConfig_Type_descriptor();
inline const ::std::string& RegularizerConfig_Type_Name(RegularizerConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegularizerConfig_Type_descriptor(), value);
}
inline bool RegularizerConfig_Type_Parse(
    const ::std::string& name, RegularizerConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegularizerConfig_Type>(
    RegularizerConfig_Type_descriptor(), name, value);
}
enum SpecifiedSparsePhiConfig_Mode {
  SpecifiedSparsePhiConfig_Mode_SparseTopics = 0,
  SpecifiedSparsePhiConfig_Mode_SparseTokens = 1
};
bool SpecifiedSparsePhiConfig_Mode_IsValid(int value);
const SpecifiedSparsePhiConfig_Mode SpecifiedSparsePhiConfig_Mode_Mode_MIN = SpecifiedSparsePhiConfig_Mode_SparseTopics;
const SpecifiedSparsePhiConfig_Mode SpecifiedSparsePhiConfig_Mode_Mode_MAX = SpecifiedSparsePhiConfig_Mode_SparseTokens;
const int SpecifiedSparsePhiConfig_Mode_Mode_ARRAYSIZE = SpecifiedSparsePhiConfig_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpecifiedSparsePhiConfig_Mode_descriptor();
inline const ::std::string& SpecifiedSparsePhiConfig_Mode_Name(SpecifiedSparsePhiConfig_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpecifiedSparsePhiConfig_Mode_descriptor(), value);
}
inline bool SpecifiedSparsePhiConfig_Mode_Parse(
    const ::std::string& name, SpecifiedSparsePhiConfig_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpecifiedSparsePhiConfig_Mode>(
    SpecifiedSparsePhiConfig_Mode_descriptor(), name, value);
}
enum SmoothPtdwConfig_Type {
  SmoothPtdwConfig_Type_MovingAverage = 1,
  SmoothPtdwConfig_Type_MovingProduct = 2
};
bool SmoothPtdwConfig_Type_IsValid(int value);
const SmoothPtdwConfig_Type SmoothPtdwConfig_Type_Type_MIN = SmoothPtdwConfig_Type_MovingAverage;
const SmoothPtdwConfig_Type SmoothPtdwConfig_Type_Type_MAX = SmoothPtdwConfig_Type_MovingProduct;
const int SmoothPtdwConfig_Type_Type_ARRAYSIZE = SmoothPtdwConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SmoothPtdwConfig_Type_descriptor();
inline const ::std::string& SmoothPtdwConfig_Type_Name(SmoothPtdwConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SmoothPtdwConfig_Type_descriptor(), value);
}
inline bool SmoothPtdwConfig_Type_Parse(
    const ::std::string& name, SmoothPtdwConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SmoothPtdwConfig_Type>(
    SmoothPtdwConfig_Type_descriptor(), name, value);
}
enum TransformConfig_TransformType {
  TransformConfig_TransformType_Logarithm = 0,
  TransformConfig_TransformType_Polynomial = 1,
  TransformConfig_TransformType_Constant = 2
};
bool TransformConfig_TransformType_IsValid(int value);
const TransformConfig_TransformType TransformConfig_TransformType_TransformType_MIN = TransformConfig_TransformType_Logarithm;
const TransformConfig_TransformType TransformConfig_TransformType_TransformType_MAX = TransformConfig_TransformType_Constant;
const int TransformConfig_TransformType_TransformType_ARRAYSIZE = TransformConfig_TransformType_TransformType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransformConfig_TransformType_descriptor();
inline const ::std::string& TransformConfig_TransformType_Name(TransformConfig_TransformType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransformConfig_TransformType_descriptor(), value);
}
inline bool TransformConfig_TransformType_Parse(
    const ::std::string& name, TransformConfig_TransformType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransformConfig_TransformType>(
    TransformConfig_TransformType_descriptor(), name, value);
}
enum ScoreConfig_Type {
  ScoreConfig_Type_Perplexity = 0,
  ScoreConfig_Type_SparsityTheta = 1,
  ScoreConfig_Type_SparsityPhi = 2,
  ScoreConfig_Type_ItemsProcessed = 3,
  ScoreConfig_Type_TopTokens = 4,
  ScoreConfig_Type_ThetaSnippet = 5,
  ScoreConfig_Type_TopicKernel = 6,
  ScoreConfig_Type_TopicMassPhi = 7,
  ScoreConfig_Type_ClassPrecision = 8,
  ScoreConfig_Type_PeakMemory = 9
};
bool ScoreConfig_Type_IsValid(int value);
const ScoreConfig_Type ScoreConfig_Type_Type_MIN = ScoreConfig_Type_Perplexity;
const ScoreConfig_Type ScoreConfig_Type_Type_MAX = ScoreConfig_Type_PeakMemory;
const int ScoreConfig_Type_Type_ARRAYSIZE = ScoreConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScoreConfig_Type_descriptor();
inline const ::std::string& ScoreConfig_Type_Name(ScoreConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScoreConfig_Type_descriptor(), value);
}
inline bool ScoreConfig_Type_Parse(
    const ::std::string& name, ScoreConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScoreConfig_Type>(
    ScoreConfig_Type_descriptor(), name, value);
}
enum ScoreData_Type {
  ScoreData_Type_Perplexity = 0,
  ScoreData_Type_SparsityTheta = 1,
  ScoreData_Type_SparsityPhi = 2,
  ScoreData_Type_ItemsProcessed = 3,
  ScoreData_Type_TopTokens = 4,
  ScoreData_Type_ThetaSnippet = 5,
  ScoreData_Type_TopicKernel = 6,
  ScoreData_Type_TopicMassPhi = 7,
  ScoreData_Type_ClassPrecision = 8,
  ScoreData_Type_PeakMemory = 9
};
bool ScoreData_Type_IsValid(int value);
const ScoreData_Type ScoreData_Type_Type_MIN = ScoreData_Type_Perplexity;
const ScoreData_Type ScoreData_Type_Type_MAX = ScoreData_Type_PeakMemory;
const int ScoreData_Type_Type_ARRAYSIZE = ScoreData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScoreData_Type_descriptor();
inline const ::std::string& ScoreData_Type_Name(ScoreData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScoreData_Type_descriptor(), value);
}
inline bool ScoreData_Type_Parse(
    const ::std::string& name, ScoreData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScoreData_Type>(
    ScoreData_Type_descriptor(), name, value);
}
enum PerplexityScoreConfig_Type {
  PerplexityScoreConfig_Type_UnigramDocumentModel = 0,
  PerplexityScoreConfig_Type_UnigramCollectionModel = 1
};
bool PerplexityScoreConfig_Type_IsValid(int value);
const PerplexityScoreConfig_Type PerplexityScoreConfig_Type_Type_MIN = PerplexityScoreConfig_Type_UnigramDocumentModel;
const PerplexityScoreConfig_Type PerplexityScoreConfig_Type_Type_MAX = PerplexityScoreConfig_Type_UnigramCollectionModel;
const int PerplexityScoreConfig_Type_Type_ARRAYSIZE = PerplexityScoreConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerplexityScoreConfig_Type_descriptor();
inline const ::std::string& PerplexityScoreConfig_Type_Name(PerplexityScoreConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerplexityScoreConfig_Type_descriptor(), value);
}
inline bool PerplexityScoreConfig_Type_Parse(
    const ::std::string& name, PerplexityScoreConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerplexityScoreConfig_Type>(
    PerplexityScoreConfig_Type_descriptor(), name, value);
}
enum TopicModel_OperationType {
  TopicModel_OperationType_Initialize = 0,
  TopicModel_OperationType_Increment = 1,
  TopicModel_OperationType_Overwrite = 2,
  TopicModel_OperationType_Remove = 3,
  TopicModel_OperationType_Ignore = 4
};
bool TopicModel_OperationType_IsValid(int value);
const TopicModel_OperationType TopicModel_OperationType_OperationType_MIN = TopicModel_OperationType_Initialize;
const TopicModel_OperationType TopicModel_OperationType_OperationType_MAX = TopicModel_OperationType_Ignore;
const int TopicModel_OperationType_OperationType_ARRAYSIZE = TopicModel_OperationType_OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TopicModel_OperationType_descriptor();
inline const ::std::string& TopicModel_OperationType_Name(TopicModel_OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TopicModel_OperationType_descriptor(), value);
}
inline bool TopicModel_OperationType_Parse(
    const ::std::string& name, TopicModel_OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TopicModel_OperationType>(
    TopicModel_OperationType_descriptor(), name, value);
}
enum CollectionParserConfig_Format {
  CollectionParserConfig_Format_BagOfWordsUci = 0,
  CollectionParserConfig_Format_MatrixMarket = 1,
  CollectionParserConfig_Format_VowpalWabbit = 2
};
bool CollectionParserConfig_Format_IsValid(int value);
const CollectionParserConfig_Format CollectionParserConfig_Format_Format_MIN = CollectionParserConfig_Format_BagOfWordsUci;
const CollectionParserConfig_Format CollectionParserConfig_Format_Format_MAX = CollectionParserConfig_Format_VowpalWabbit;
const int CollectionParserConfig_Format_Format_ARRAYSIZE = CollectionParserConfig_Format_Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* CollectionParserConfig_Format_descriptor();
inline const ::std::string& CollectionParserConfig_Format_Name(CollectionParserConfig_Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    CollectionParserConfig_Format_descriptor(), value);
}
inline bool CollectionParserConfig_Format_Parse(
    const ::std::string& name, CollectionParserConfig_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CollectionParserConfig_Format>(
    CollectionParserConfig_Format_descriptor(), name, value);
}
enum CollectionParserConfig_NameType {
  CollectionParserConfig_NameType_Guid = 0,
  CollectionParserConfig_NameType_Code = 1
};
bool CollectionParserConfig_NameType_IsValid(int value);
const CollectionParserConfig_NameType CollectionParserConfig_NameType_NameType_MIN = CollectionParserConfig_NameType_Guid;
const CollectionParserConfig_NameType CollectionParserConfig_NameType_NameType_MAX = CollectionParserConfig_NameType_Code;
const int CollectionParserConfig_NameType_NameType_ARRAYSIZE = CollectionParserConfig_NameType_NameType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CollectionParserConfig_NameType_descriptor();
inline const ::std::string& CollectionParserConfig_NameType_Name(CollectionParserConfig_NameType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CollectionParserConfig_NameType_descriptor(), value);
}
inline bool CollectionParserConfig_NameType_Parse(
    const ::std::string& name, CollectionParserConfig_NameType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CollectionParserConfig_NameType>(
    CollectionParserConfig_NameType_descriptor(), name, value);
}
enum InitializeModelArgs_SourceType {
  InitializeModelArgs_SourceType_Dictionary = 0,
  InitializeModelArgs_SourceType_Batches = 1
};
bool InitializeModelArgs_SourceType_IsValid(int value);
const InitializeModelArgs_SourceType InitializeModelArgs_SourceType_SourceType_MIN = InitializeModelArgs_SourceType_Dictionary;
const InitializeModelArgs_SourceType InitializeModelArgs_SourceType_SourceType_MAX = InitializeModelArgs_SourceType_Batches;
const int InitializeModelArgs_SourceType_SourceType_ARRAYSIZE = InitializeModelArgs_SourceType_SourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InitializeModelArgs_SourceType_descriptor();
inline const ::std::string& InitializeModelArgs_SourceType_Name(InitializeModelArgs_SourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InitializeModelArgs_SourceType_descriptor(), value);
}
inline bool InitializeModelArgs_SourceType_Parse(
    const ::std::string& name, InitializeModelArgs_SourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InitializeModelArgs_SourceType>(
    InitializeModelArgs_SourceType_descriptor(), name, value);
}
enum GetTopicModelArgs_RequestType {
  GetTopicModelArgs_RequestType_Pwt = 0,
  GetTopicModelArgs_RequestType_Nwt = 1,
  GetTopicModelArgs_RequestType_TopicNames = 2,
  GetTopicModelArgs_RequestType_Tokens = 3
};
bool GetTopicModelArgs_RequestType_IsValid(int value);
const GetTopicModelArgs_RequestType GetTopicModelArgs_RequestType_RequestType_MIN = GetTopicModelArgs_RequestType_Pwt;
const GetTopicModelArgs_RequestType GetTopicModelArgs_RequestType_RequestType_MAX = GetTopicModelArgs_RequestType_Tokens;
const int GetTopicModelArgs_RequestType_RequestType_ARRAYSIZE = GetTopicModelArgs_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetTopicModelArgs_RequestType_descriptor();
inline const ::std::string& GetTopicModelArgs_RequestType_Name(GetTopicModelArgs_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetTopicModelArgs_RequestType_descriptor(), value);
}
inline bool GetTopicModelArgs_RequestType_Parse(
    const ::std::string& name, GetTopicModelArgs_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetTopicModelArgs_RequestType>(
    GetTopicModelArgs_RequestType_descriptor(), name, value);
}
enum GetTopicModelArgs_MatrixLayout {
  GetTopicModelArgs_MatrixLayout_Dense = 0,
  GetTopicModelArgs_MatrixLayout_Sparse = 1
};
bool GetTopicModelArgs_MatrixLayout_IsValid(int value);
const GetTopicModelArgs_MatrixLayout GetTopicModelArgs_MatrixLayout_MatrixLayout_MIN = GetTopicModelArgs_MatrixLayout_Dense;
const GetTopicModelArgs_MatrixLayout GetTopicModelArgs_MatrixLayout_MatrixLayout_MAX = GetTopicModelArgs_MatrixLayout_Sparse;
const int GetTopicModelArgs_MatrixLayout_MatrixLayout_ARRAYSIZE = GetTopicModelArgs_MatrixLayout_MatrixLayout_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetTopicModelArgs_MatrixLayout_descriptor();
inline const ::std::string& GetTopicModelArgs_MatrixLayout_Name(GetTopicModelArgs_MatrixLayout value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetTopicModelArgs_MatrixLayout_descriptor(), value);
}
inline bool GetTopicModelArgs_MatrixLayout_Parse(
    const ::std::string& name, GetTopicModelArgs_MatrixLayout* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetTopicModelArgs_MatrixLayout>(
    GetTopicModelArgs_MatrixLayout_descriptor(), name, value);
}
enum GetThetaMatrixArgs_MatrixLayout {
  GetThetaMatrixArgs_MatrixLayout_Dense = 0,
  GetThetaMatrixArgs_MatrixLayout_Sparse = 1
};
bool GetThetaMatrixArgs_MatrixLayout_IsValid(int value);
const GetThetaMatrixArgs_MatrixLayout GetThetaMatrixArgs_MatrixLayout_MatrixLayout_MIN = GetThetaMatrixArgs_MatrixLayout_Dense;
const GetThetaMatrixArgs_MatrixLayout GetThetaMatrixArgs_MatrixLayout_MatrixLayout_MAX = GetThetaMatrixArgs_MatrixLayout_Sparse;
const int GetThetaMatrixArgs_MatrixLayout_MatrixLayout_ARRAYSIZE = GetThetaMatrixArgs_MatrixLayout_MatrixLayout_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetThetaMatrixArgs_MatrixLayout_descriptor();
inline const ::std::string& GetThetaMatrixArgs_MatrixLayout_Name(GetThetaMatrixArgs_MatrixLayout value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetThetaMatrixArgs_MatrixLayout_descriptor(), value);
}
inline bool GetThetaMatrixArgs_MatrixLayout_Parse(
    const ::std::string& name, GetThetaMatrixArgs_MatrixLayout* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetThetaMatrixArgs_MatrixLayout>(
    GetThetaMatrixArgs_MatrixLayout_descriptor(), name, value);
}
enum ProcessBatchesArgs_ThetaMatrixType {
  ProcessBatchesArgs_ThetaMatrixType_None = 0,
  ProcessBatchesArgs_ThetaMatrixType_Dense = 1,
  ProcessBatchesArgs_ThetaMatrixType_Sparse = 2,
  ProcessBatchesArgs_ThetaMatrixType_Cache = 3,
  ProcessBatchesArgs_ThetaMatrixType_DensePtdw = 4,
  ProcessBatchesArgs_ThetaMatrixType_SparsePtdw = 5
};
bool ProcessBatchesArgs_ThetaMatrixType_IsValid(int value);
const ProcessBatchesArgs_ThetaMatrixType ProcessBatchesArgs_ThetaMatrixType_ThetaMatrixType_MIN = ProcessBatchesArgs_ThetaMatrixType_None;
const ProcessBatchesArgs_ThetaMatrixType ProcessBatchesArgs_ThetaMatrixType_ThetaMatrixType_MAX = ProcessBatchesArgs_ThetaMatrixType_SparsePtdw;
const int ProcessBatchesArgs_ThetaMatrixType_ThetaMatrixType_ARRAYSIZE = ProcessBatchesArgs_ThetaMatrixType_ThetaMatrixType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProcessBatchesArgs_ThetaMatrixType_descriptor();
inline const ::std::string& ProcessBatchesArgs_ThetaMatrixType_Name(ProcessBatchesArgs_ThetaMatrixType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProcessBatchesArgs_ThetaMatrixType_descriptor(), value);
}
inline bool ProcessBatchesArgs_ThetaMatrixType_Parse(
    const ::std::string& name, ProcessBatchesArgs_ThetaMatrixType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProcessBatchesArgs_ThetaMatrixType>(
    ProcessBatchesArgs_ThetaMatrixType_descriptor(), name, value);
}
enum CopyRequestResultArgs_RequestType {
  CopyRequestResultArgs_RequestType_DefaultRequestType = 0,
  CopyRequestResultArgs_RequestType_GetThetaSecondPass = 1,
  CopyRequestResultArgs_RequestType_GetModelSecondPass = 2
};
bool CopyRequestResultArgs_RequestType_IsValid(int value);
const CopyRequestResultArgs_RequestType CopyRequestResultArgs_RequestType_RequestType_MIN = CopyRequestResultArgs_RequestType_DefaultRequestType;
const CopyRequestResultArgs_RequestType CopyRequestResultArgs_RequestType_RequestType_MAX = CopyRequestResultArgs_RequestType_GetModelSecondPass;
const int CopyRequestResultArgs_RequestType_RequestType_ARRAYSIZE = CopyRequestResultArgs_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CopyRequestResultArgs_RequestType_descriptor();
inline const ::std::string& CopyRequestResultArgs_RequestType_Name(CopyRequestResultArgs_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CopyRequestResultArgs_RequestType_descriptor(), value);
}
inline bool CopyRequestResultArgs_RequestType_Parse(
    const ::std::string& name, CopyRequestResultArgs_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CopyRequestResultArgs_RequestType>(
    CopyRequestResultArgs_RequestType_descriptor(), name, value);
}
enum TransformMasterModelArgs_ThetaMatrixType {
  TransformMasterModelArgs_ThetaMatrixType_None = 0,
  TransformMasterModelArgs_ThetaMatrixType_Dense = 1,
  TransformMasterModelArgs_ThetaMatrixType_Sparse = 2,
  TransformMasterModelArgs_ThetaMatrixType_Cache = 3,
  TransformMasterModelArgs_ThetaMatrixType_DensePtdw = 4,
  TransformMasterModelArgs_ThetaMatrixType_SparsePtdw = 5
};
bool TransformMasterModelArgs_ThetaMatrixType_IsValid(int value);
const TransformMasterModelArgs_ThetaMatrixType TransformMasterModelArgs_ThetaMatrixType_ThetaMatrixType_MIN = TransformMasterModelArgs_ThetaMatrixType_None;
const TransformMasterModelArgs_ThetaMatrixType TransformMasterModelArgs_ThetaMatrixType_ThetaMatrixType_MAX = TransformMasterModelArgs_ThetaMatrixType_SparsePtdw;
const int TransformMasterModelArgs_ThetaMatrixType_ThetaMatrixType_ARRAYSIZE = TransformMasterModelArgs_ThetaMatrixType_ThetaMatrixType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransformMasterModelArgs_ThetaMatrixType_descriptor();
inline const ::std::string& TransformMasterModelArgs_ThetaMatrixType_Name(TransformMasterModelArgs_ThetaMatrixType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransformMasterModelArgs_ThetaMatrixType_descriptor(), value);
}
inline bool TransformMasterModelArgs_ThetaMatrixType_Parse(
    const ::std::string& name, TransformMasterModelArgs_ThetaMatrixType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransformMasterModelArgs_ThetaMatrixType>(
    TransformMasterModelArgs_ThetaMatrixType_descriptor(), name, value);
}
// ===================================================================

class DoubleArray : public ::google::protobuf::Message {
 public:
  DoubleArray();
  virtual ~DoubleArray();

  DoubleArray(const DoubleArray& from);

  inline DoubleArray& operator=(const DoubleArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleArray& default_instance();

  void Swap(DoubleArray* other);

  // implements Message ----------------------------------------------

  DoubleArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoubleArray& from);
  void MergeFrom(const DoubleArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value = 1 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline double value(int index) const;
  inline void set_value(int index, double value);
  inline void add_value(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      value() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.DoubleArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DoubleArray* default_instance_;
};
// -------------------------------------------------------------------

class FloatArray : public ::google::protobuf::Message {
 public:
  FloatArray();
  virtual ~FloatArray();

  FloatArray(const FloatArray& from);

  inline FloatArray& operator=(const FloatArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FloatArray& default_instance();

  void Swap(FloatArray* other);

  // implements Message ----------------------------------------------

  FloatArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FloatArray& from);
  void MergeFrom(const FloatArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float value = 1 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.FloatArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static FloatArray* default_instance_;
};
// -------------------------------------------------------------------

class BoolArray : public ::google::protobuf::Message {
 public:
  BoolArray();
  virtual ~BoolArray();

  BoolArray(const BoolArray& from);

  inline BoolArray& operator=(const BoolArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoolArray& default_instance();

  void Swap(BoolArray* other);

  // implements Message ----------------------------------------------

  BoolArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoolArray& from);
  void MergeFrom(const BoolArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool value = 1 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline bool value(int index) const;
  inline void set_value(int index, bool value);
  inline void add_value(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      value() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.BoolArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static BoolArray* default_instance_;
};
// -------------------------------------------------------------------

class IntArray : public ::google::protobuf::Message {
 public:
  IntArray();
  virtual ~IntArray();

  IntArray(const IntArray& from);

  inline IntArray& operator=(const IntArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntArray& default_instance();

  void Swap(IntArray* other);

  // implements Message ----------------------------------------------

  IntArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntArray& from);
  void MergeFrom(const IntArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 value = 1 [packed = true];
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:artm.IntArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;
  mutable int _value_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static IntArray* default_instance_;
};
// -------------------------------------------------------------------

class StringArray : public ::google::protobuf::Message {
 public:
  StringArray();
  virtual ~StringArray();

  StringArray(const StringArray& from);

  inline StringArray& operator=(const StringArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringArray& default_instance();

  void Swap(StringArray* other);

  // implements Message ----------------------------------------------

  StringArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringArray& from);
  void MergeFrom(const StringArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value(int index) const;
  inline ::std::string* mutable_value(int index);
  inline void set_value(int index, const ::std::string& value);
  inline void set_value(int index, const char* value);
  inline void set_value(int index, const char* value, size_t size);
  inline ::std::string* add_value();
  inline void add_value(const ::std::string& value);
  inline void add_value(const char* value);
  inline void add_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_value();

  // @@protoc_insertion_point(class_scope:artm.StringArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static StringArray* default_instance_;
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // repeated int32 token_id = 3;
  inline int token_id_size() const;
  inline void clear_token_id();
  static const int kTokenIdFieldNumber = 3;
  inline ::google::protobuf::int32 token_id(int index) const;
  inline void set_token_id(int index, ::google::protobuf::int32 value);
  inline void add_token_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      token_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_token_id();

  // repeated float token_weight = 4;
  inline int token_weight_size() const;
  inline void clear_token_weight();
  static const int kTokenWeightFieldNumber = 4;
  inline float token_weight(int index) const;
  inline void set_token_weight(int index, float value);
  inline void add_token_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      token_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_token_weight();

  // @@protoc_insertion_point(class_scope:artm.Item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > token_id_;
  ::google::protobuf::RepeatedField< float > token_weight_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class Batch : public ::google::protobuf::Message {
 public:
  Batch();
  virtual ~Batch();

  Batch(const Batch& from);

  inline Batch& operator=(const Batch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Batch& default_instance();

  void Swap(Batch* other);

  // implements Message ----------------------------------------------

  Batch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Batch& from);
  void MergeFrom(const Batch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string token = 1;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token(int index) const;
  inline ::std::string* mutable_token(int index);
  inline void set_token(int index, const ::std::string& value);
  inline void set_token(int index, const char* value);
  inline void set_token(int index, const char* value, size_t size);
  inline ::std::string* add_token();
  inline void add_token(const ::std::string& value);
  inline void add_token(const char* value);
  inline void add_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated string class_id = 2;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated .artm.Item item = 3;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::artm::Item& item(int index) const;
  inline ::artm::Item* mutable_item(int index);
  inline ::artm::Item* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::Item >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::Item >*
      mutable_item();

  // optional string description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional string id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:artm.Batch)
 private:
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::Item > item_;
  ::std::string* description_;
  ::std::string* id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static Batch* default_instance_;
};
// -------------------------------------------------------------------

class RegularizerSettings : public ::google::protobuf::Message {
 public:
  RegularizerSettings();
  virtual ~RegularizerSettings();

  RegularizerSettings(const RegularizerSettings& from);

  inline RegularizerSettings& operator=(const RegularizerSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegularizerSettings& default_instance();

  void Swap(RegularizerSettings* other);

  // implements Message ----------------------------------------------

  RegularizerSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegularizerSettings& from);
  void MergeFrom(const RegularizerSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional double tau = 2;
  inline bool has_tau() const;
  inline void clear_tau();
  static const int kTauFieldNumber = 2;
  inline double tau() const;
  inline void set_tau(double value);

  // optional bool use_relative_regularization = 3;
  inline bool has_use_relative_regularization() const;
  inline void clear_use_relative_regularization();
  static const int kUseRelativeRegularizationFieldNumber = 3;
  inline bool use_relative_regularization() const;
  inline void set_use_relative_regularization(bool value);

  // optional double gamma = 4;
  inline bool has_gamma() const;
  inline void clear_gamma();
  static const int kGammaFieldNumber = 4;
  inline double gamma() const;
  inline void set_gamma(double value);

  // @@protoc_insertion_point(class_scope:artm.RegularizerSettings)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_tau();
  inline void clear_has_tau();
  inline void set_has_use_relative_regularization();
  inline void clear_has_use_relative_regularization();
  inline void set_has_gamma();
  inline void clear_has_gamma();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  double tau_;
  double gamma_;
  bool use_relative_regularization_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static RegularizerSettings* default_instance_;
};
// -------------------------------------------------------------------

class RegularizerConfig : public ::google::protobuf::Message {
 public:
  RegularizerConfig();
  virtual ~RegularizerConfig();

  RegularizerConfig(const RegularizerConfig& from);

  inline RegularizerConfig& operator=(const RegularizerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegularizerConfig& default_instance();

  void Swap(RegularizerConfig* other);

  // implements Message ----------------------------------------------

  RegularizerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegularizerConfig& from);
  void MergeFrom(const RegularizerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RegularizerConfig_Type Type;
  static const Type SmoothSparseTheta = RegularizerConfig_Type_SmoothSparseTheta;
  static const Type SmoothSparsePhi = RegularizerConfig_Type_SmoothSparsePhi;
  static const Type DecorrelatorPhi = RegularizerConfig_Type_DecorrelatorPhi;
  static const Type MultiLanguagePhi = RegularizerConfig_Type_MultiLanguagePhi;
  static const Type LabelRegularizationPhi = RegularizerConfig_Type_LabelRegularizationPhi;
  static const Type SpecifiedSparsePhi = RegularizerConfig_Type_SpecifiedSparsePhi;
  static const Type ImproveCoherencePhi = RegularizerConfig_Type_ImproveCoherencePhi;
  static const Type SmoothPtdw = RegularizerConfig_Type_SmoothPtdw;
  static const Type TopicSelectionTheta = RegularizerConfig_Type_TopicSelectionTheta;
  static inline bool Type_IsValid(int value) {
    return RegularizerConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    RegularizerConfig_Type_Type_MIN;
  static const Type Type_MAX =
    RegularizerConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    RegularizerConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return RegularizerConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return RegularizerConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return RegularizerConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .artm.RegularizerConfig.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::artm::RegularizerConfig_Type type() const;
  inline void set_type(::artm::RegularizerConfig_Type value);

  // optional bytes config = 3;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 3;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const void* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  inline void set_allocated_config(::std::string* config);

  // optional float tau = 4;
  inline bool has_tau() const;
  inline void clear_tau();
  static const int kTauFieldNumber = 4;
  inline float tau() const;
  inline void set_tau(float value);

  // @@protoc_insertion_point(class_scope:artm.RegularizerConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_tau();
  inline void clear_has_tau();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* config_;
  int type_;
  float tau_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static RegularizerConfig* default_instance_;
};
// -------------------------------------------------------------------

class SmoothSparseThetaConfig : public ::google::protobuf::Message {
 public:
  SmoothSparseThetaConfig();
  virtual ~SmoothSparseThetaConfig();

  SmoothSparseThetaConfig(const SmoothSparseThetaConfig& from);

  inline SmoothSparseThetaConfig& operator=(const SmoothSparseThetaConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothSparseThetaConfig& default_instance();

  void Swap(SmoothSparseThetaConfig* other);

  // implements Message ----------------------------------------------

  SmoothSparseThetaConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmoothSparseThetaConfig& from);
  void MergeFrom(const SmoothSparseThetaConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated float alpha_iter = 2;
  inline int alpha_iter_size() const;
  inline void clear_alpha_iter();
  static const int kAlphaIterFieldNumber = 2;
  inline float alpha_iter(int index) const;
  inline void set_alpha_iter(int index, float value);
  inline void add_alpha_iter(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      alpha_iter() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_alpha_iter();

  // optional .artm.TransformConfig transform_config = 3;
  inline bool has_transform_config() const;
  inline void clear_transform_config();
  static const int kTransformConfigFieldNumber = 3;
  inline const ::artm::TransformConfig& transform_config() const;
  inline ::artm::TransformConfig* mutable_transform_config();
  inline ::artm::TransformConfig* release_transform_config();
  inline void set_allocated_transform_config(::artm::TransformConfig* transform_config);

  // @@protoc_insertion_point(class_scope:artm.SmoothSparseThetaConfig)
 private:
  inline void set_has_transform_config();
  inline void clear_has_transform_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedField< float > alpha_iter_;
  ::artm::TransformConfig* transform_config_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SmoothSparseThetaConfig* default_instance_;
};
// -------------------------------------------------------------------

class SmoothSparsePhiConfig : public ::google::protobuf::Message {
 public:
  SmoothSparsePhiConfig();
  virtual ~SmoothSparsePhiConfig();

  SmoothSparsePhiConfig(const SmoothSparsePhiConfig& from);

  inline SmoothSparsePhiConfig& operator=(const SmoothSparsePhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothSparsePhiConfig& default_instance();

  void Swap(SmoothSparsePhiConfig* other);

  // implements Message ----------------------------------------------

  SmoothSparsePhiConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmoothSparsePhiConfig& from);
  void MergeFrom(const SmoothSparsePhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string class_id = 2;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional string dictionary_name = 3;
  inline bool has_dictionary_name() const;
  inline void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 3;
  inline const ::std::string& dictionary_name() const;
  inline void set_dictionary_name(const ::std::string& value);
  inline void set_dictionary_name(const char* value);
  inline void set_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_name();
  inline ::std::string* release_dictionary_name();
  inline void set_allocated_dictionary_name(::std::string* dictionary_name);

  // optional .artm.TransformConfig transform_config = 4;
  inline bool has_transform_config() const;
  inline void clear_transform_config();
  static const int kTransformConfigFieldNumber = 4;
  inline const ::artm::TransformConfig& transform_config() const;
  inline ::artm::TransformConfig* mutable_transform_config();
  inline ::artm::TransformConfig* release_transform_config();
  inline void set_allocated_transform_config(::artm::TransformConfig* transform_config);

  // @@protoc_insertion_point(class_scope:artm.SmoothSparsePhiConfig)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();
  inline void set_has_transform_config();
  inline void clear_has_transform_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::std::string* dictionary_name_;
  ::artm::TransformConfig* transform_config_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SmoothSparsePhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class DecorrelatorPhiConfig : public ::google::protobuf::Message {
 public:
  DecorrelatorPhiConfig();
  virtual ~DecorrelatorPhiConfig();

  DecorrelatorPhiConfig(const DecorrelatorPhiConfig& from);

  inline DecorrelatorPhiConfig& operator=(const DecorrelatorPhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecorrelatorPhiConfig& default_instance();

  void Swap(DecorrelatorPhiConfig* other);

  // implements Message ----------------------------------------------

  DecorrelatorPhiConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DecorrelatorPhiConfig& from);
  void MergeFrom(const DecorrelatorPhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string class_id = 2;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // @@protoc_insertion_point(class_scope:artm.DecorrelatorPhiConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DecorrelatorPhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class MultiLanguagePhiConfig : public ::google::protobuf::Message {
 public:
  MultiLanguagePhiConfig();
  virtual ~MultiLanguagePhiConfig();

  MultiLanguagePhiConfig(const MultiLanguagePhiConfig& from);

  inline MultiLanguagePhiConfig& operator=(const MultiLanguagePhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiLanguagePhiConfig& default_instance();

  void Swap(MultiLanguagePhiConfig* other);

  // implements Message ----------------------------------------------

  MultiLanguagePhiConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiLanguagePhiConfig& from);
  void MergeFrom(const MultiLanguagePhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.MultiLanguagePhiConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MultiLanguagePhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class LabelRegularizationPhiConfig : public ::google::protobuf::Message {
 public:
  LabelRegularizationPhiConfig();
  virtual ~LabelRegularizationPhiConfig();

  LabelRegularizationPhiConfig(const LabelRegularizationPhiConfig& from);

  inline LabelRegularizationPhiConfig& operator=(const LabelRegularizationPhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelRegularizationPhiConfig& default_instance();

  void Swap(LabelRegularizationPhiConfig* other);

  // implements Message ----------------------------------------------

  LabelRegularizationPhiConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelRegularizationPhiConfig& from);
  void MergeFrom(const LabelRegularizationPhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string class_id = 2;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional string dictionary_name = 3;
  inline bool has_dictionary_name() const;
  inline void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 3;
  inline const ::std::string& dictionary_name() const;
  inline void set_dictionary_name(const ::std::string& value);
  inline void set_dictionary_name(const char* value);
  inline void set_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_name();
  inline ::std::string* release_dictionary_name();
  inline void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.LabelRegularizationPhiConfig)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::std::string* dictionary_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static LabelRegularizationPhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class SpecifiedSparsePhiConfig : public ::google::protobuf::Message {
 public:
  SpecifiedSparsePhiConfig();
  virtual ~SpecifiedSparsePhiConfig();

  SpecifiedSparsePhiConfig(const SpecifiedSparsePhiConfig& from);

  inline SpecifiedSparsePhiConfig& operator=(const SpecifiedSparsePhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecifiedSparsePhiConfig& default_instance();

  void Swap(SpecifiedSparsePhiConfig* other);

  // implements Message ----------------------------------------------

  SpecifiedSparsePhiConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecifiedSparsePhiConfig& from);
  void MergeFrom(const SpecifiedSparsePhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SpecifiedSparsePhiConfig_Mode Mode;
  static const Mode SparseTopics = SpecifiedSparsePhiConfig_Mode_SparseTopics;
  static const Mode SparseTokens = SpecifiedSparsePhiConfig_Mode_SparseTokens;
  static inline bool Mode_IsValid(int value) {
    return SpecifiedSparsePhiConfig_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    SpecifiedSparsePhiConfig_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    SpecifiedSparsePhiConfig_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    SpecifiedSparsePhiConfig_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return SpecifiedSparsePhiConfig_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return SpecifiedSparsePhiConfig_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return SpecifiedSparsePhiConfig_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional string class_id = 2 [default = "@default_class"];
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id() const;
  inline void set_class_id(const ::std::string& value);
  inline void set_class_id(const char* value);
  inline void set_class_id(const char* value, size_t size);
  inline ::std::string* mutable_class_id();
  inline ::std::string* release_class_id();
  inline void set_allocated_class_id(::std::string* class_id);

  // optional int32 max_elements_count = 3 [default = 20];
  inline bool has_max_elements_count() const;
  inline void clear_max_elements_count();
  static const int kMaxElementsCountFieldNumber = 3;
  inline ::google::protobuf::int32 max_elements_count() const;
  inline void set_max_elements_count(::google::protobuf::int32 value);

  // optional float probability_threshold = 4 [default = 0.99];
  inline bool has_probability_threshold() const;
  inline void clear_probability_threshold();
  static const int kProbabilityThresholdFieldNumber = 4;
  inline float probability_threshold() const;
  inline void set_probability_threshold(float value);

  // optional .artm.SpecifiedSparsePhiConfig.Mode mode = 5 [default = SparseTopics];
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 5;
  inline ::artm::SpecifiedSparsePhiConfig_Mode mode() const;
  inline void set_mode(::artm::SpecifiedSparsePhiConfig_Mode value);

  // @@protoc_insertion_point(class_scope:artm.SpecifiedSparsePhiConfig)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_max_elements_count();
  inline void clear_has_max_elements_count();
  inline void set_has_probability_threshold();
  inline void clear_has_probability_threshold();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::std::string* class_id_;
  static ::std::string* _default_class_id_;
  ::google::protobuf::int32 max_elements_count_;
  float probability_threshold_;
  int mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SpecifiedSparsePhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class ImproveCoherencePhiConfig : public ::google::protobuf::Message {
 public:
  ImproveCoherencePhiConfig();
  virtual ~ImproveCoherencePhiConfig();

  ImproveCoherencePhiConfig(const ImproveCoherencePhiConfig& from);

  inline ImproveCoherencePhiConfig& operator=(const ImproveCoherencePhiConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImproveCoherencePhiConfig& default_instance();

  void Swap(ImproveCoherencePhiConfig* other);

  // implements Message ----------------------------------------------

  ImproveCoherencePhiConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImproveCoherencePhiConfig& from);
  void MergeFrom(const ImproveCoherencePhiConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string class_id = 2;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional string dictionary_name = 3;
  inline bool has_dictionary_name() const;
  inline void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 3;
  inline const ::std::string& dictionary_name() const;
  inline void set_dictionary_name(const ::std::string& value);
  inline void set_dictionary_name(const char* value);
  inline void set_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_name();
  inline ::std::string* release_dictionary_name();
  inline void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.ImproveCoherencePhiConfig)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::std::string* dictionary_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ImproveCoherencePhiConfig* default_instance_;
};
// -------------------------------------------------------------------

class SmoothPtdwConfig : public ::google::protobuf::Message {
 public:
  SmoothPtdwConfig();
  virtual ~SmoothPtdwConfig();

  SmoothPtdwConfig(const SmoothPtdwConfig& from);

  inline SmoothPtdwConfig& operator=(const SmoothPtdwConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothPtdwConfig& default_instance();

  void Swap(SmoothPtdwConfig* other);

  // implements Message ----------------------------------------------

  SmoothPtdwConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmoothPtdwConfig& from);
  void MergeFrom(const SmoothPtdwConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SmoothPtdwConfig_Type Type;
  static const Type MovingAverage = SmoothPtdwConfig_Type_MovingAverage;
  static const Type MovingProduct = SmoothPtdwConfig_Type_MovingProduct;
  static inline bool Type_IsValid(int value) {
    return SmoothPtdwConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SmoothPtdwConfig_Type_Type_MIN;
  static const Type Type_MAX =
    SmoothPtdwConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SmoothPtdwConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SmoothPtdwConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SmoothPtdwConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SmoothPtdwConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.SmoothPtdwConfig.Type type = 1 [default = MovingAverage];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::artm::SmoothPtdwConfig_Type type() const;
  inline void set_type(::artm::SmoothPtdwConfig_Type value);

  // optional int32 window = 3 [default = 10];
  inline bool has_window() const;
  inline void clear_window();
  static const int kWindowFieldNumber = 3;
  inline ::google::protobuf::int32 window() const;
  inline void set_window(::google::protobuf::int32 value);

  // optional double threshold = 4 [default = 1];
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 4;
  inline double threshold() const;
  inline void set_threshold(double value);

  // @@protoc_insertion_point(class_scope:artm.SmoothPtdwConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_window();
  inline void clear_has_window();
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 window_;
  double threshold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SmoothPtdwConfig* default_instance_;
};
// -------------------------------------------------------------------

class TopicSelectionThetaConfig : public ::google::protobuf::Message {
 public:
  TopicSelectionThetaConfig();
  virtual ~TopicSelectionThetaConfig();

  TopicSelectionThetaConfig(const TopicSelectionThetaConfig& from);

  inline TopicSelectionThetaConfig& operator=(const TopicSelectionThetaConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicSelectionThetaConfig& default_instance();

  void Swap(TopicSelectionThetaConfig* other);

  // implements Message ----------------------------------------------

  TopicSelectionThetaConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicSelectionThetaConfig& from);
  void MergeFrom(const TopicSelectionThetaConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated float topic_value = 2;
  inline int topic_value_size() const;
  inline void clear_topic_value();
  static const int kTopicValueFieldNumber = 2;
  inline float topic_value(int index) const;
  inline void set_topic_value(int index, float value);
  inline void add_topic_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      topic_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_topic_value();

  // repeated float alpha_iter = 3;
  inline int alpha_iter_size() const;
  inline void clear_alpha_iter();
  static const int kAlphaIterFieldNumber = 3;
  inline float alpha_iter(int index) const;
  inline void set_alpha_iter(int index, float value);
  inline void add_alpha_iter(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      alpha_iter() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_alpha_iter();

  // @@protoc_insertion_point(class_scope:artm.TopicSelectionThetaConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedField< float > topic_value_;
  ::google::protobuf::RepeatedField< float > alpha_iter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicSelectionThetaConfig* default_instance_;
};
// -------------------------------------------------------------------

class TransformConfig : public ::google::protobuf::Message {
 public:
  TransformConfig();
  virtual ~TransformConfig();

  TransformConfig(const TransformConfig& from);

  inline TransformConfig& operator=(const TransformConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformConfig& default_instance();

  void Swap(TransformConfig* other);

  // implements Message ----------------------------------------------

  TransformConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformConfig& from);
  void MergeFrom(const TransformConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TransformConfig_TransformType TransformType;
  static const TransformType Logarithm = TransformConfig_TransformType_Logarithm;
  static const TransformType Polynomial = TransformConfig_TransformType_Polynomial;
  static const TransformType Constant = TransformConfig_TransformType_Constant;
  static inline bool TransformType_IsValid(int value) {
    return TransformConfig_TransformType_IsValid(value);
  }
  static const TransformType TransformType_MIN =
    TransformConfig_TransformType_TransformType_MIN;
  static const TransformType TransformType_MAX =
    TransformConfig_TransformType_TransformType_MAX;
  static const int TransformType_ARRAYSIZE =
    TransformConfig_TransformType_TransformType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TransformType_descriptor() {
    return TransformConfig_TransformType_descriptor();
  }
  static inline const ::std::string& TransformType_Name(TransformType value) {
    return TransformConfig_TransformType_Name(value);
  }
  static inline bool TransformType_Parse(const ::std::string& name,
      TransformType* value) {
    return TransformConfig_TransformType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.TransformConfig.TransformType transform_type = 1 [default = Constant];
  inline bool has_transform_type() const;
  inline void clear_transform_type();
  static const int kTransformTypeFieldNumber = 1;
  inline ::artm::TransformConfig_TransformType transform_type() const;
  inline void set_transform_type(::artm::TransformConfig_TransformType value);

  // optional double n = 2 [default = 1];
  inline bool has_n() const;
  inline void clear_n();
  static const int kNFieldNumber = 2;
  inline double n() const;
  inline void set_n(double value);

  // optional double a = 3 [default = 1];
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 3;
  inline double a() const;
  inline void set_a(double value);

  // @@protoc_insertion_point(class_scope:artm.TransformConfig)
 private:
  inline void set_has_transform_type();
  inline void clear_has_transform_type();
  inline void set_has_n();
  inline void clear_has_n();
  inline void set_has_a();
  inline void clear_has_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double n_;
  double a_;
  int transform_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TransformConfig* default_instance_;
};
// -------------------------------------------------------------------

class ScoreConfig : public ::google::protobuf::Message {
 public:
  ScoreConfig();
  virtual ~ScoreConfig();

  ScoreConfig(const ScoreConfig& from);

  inline ScoreConfig& operator=(const ScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreConfig& default_instance();

  void Swap(ScoreConfig* other);

  // implements Message ----------------------------------------------

  ScoreConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreConfig& from);
  void MergeFrom(const ScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ScoreConfig_Type Type;
  static const Type Perplexity = ScoreConfig_Type_Perplexity;
  static const Type SparsityTheta = ScoreConfig_Type_SparsityTheta;
  static const Type SparsityPhi = ScoreConfig_Type_SparsityPhi;
  static const Type ItemsProcessed = ScoreConfig_Type_ItemsProcessed;
  static const Type TopTokens = ScoreConfig_Type_TopTokens;
  static const Type ThetaSnippet = ScoreConfig_Type_ThetaSnippet;
  static const Type TopicKernel = ScoreConfig_Type_TopicKernel;
  static const Type TopicMassPhi = ScoreConfig_Type_TopicMassPhi;
  static const Type ClassPrecision = ScoreConfig_Type_ClassPrecision;
  static const Type PeakMemory = ScoreConfig_Type_PeakMemory;
  static inline bool Type_IsValid(int value) {
    return ScoreConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ScoreConfig_Type_Type_MIN;
  static const Type Type_MAX =
    ScoreConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ScoreConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ScoreConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ScoreConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ScoreConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .artm.ScoreConfig.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::artm::ScoreConfig_Type type() const;
  inline void set_type(::artm::ScoreConfig_Type value);

  // optional bytes config = 3;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 3;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const void* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  inline void set_allocated_config(::std::string* config);

  // @@protoc_insertion_point(class_scope:artm.ScoreConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* config_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class ScoreData : public ::google::protobuf::Message {
 public:
  ScoreData();
  virtual ~ScoreData();

  ScoreData(const ScoreData& from);

  inline ScoreData& operator=(const ScoreData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreData& default_instance();

  void Swap(ScoreData* other);

  // implements Message ----------------------------------------------

  ScoreData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreData& from);
  void MergeFrom(const ScoreData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ScoreData_Type Type;
  static const Type Perplexity = ScoreData_Type_Perplexity;
  static const Type SparsityTheta = ScoreData_Type_SparsityTheta;
  static const Type SparsityPhi = ScoreData_Type_SparsityPhi;
  static const Type ItemsProcessed = ScoreData_Type_ItemsProcessed;
  static const Type TopTokens = ScoreData_Type_TopTokens;
  static const Type ThetaSnippet = ScoreData_Type_ThetaSnippet;
  static const Type TopicKernel = ScoreData_Type_TopicKernel;
  static const Type TopicMassPhi = ScoreData_Type_TopicMassPhi;
  static const Type ClassPrecision = ScoreData_Type_ClassPrecision;
  static const Type PeakMemory = ScoreData_Type_PeakMemory;
  static inline bool Type_IsValid(int value) {
    return ScoreData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ScoreData_Type_Type_MIN;
  static const Type Type_MAX =
    ScoreData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ScoreData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ScoreData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ScoreData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ScoreData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .artm.ScoreData.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::artm::ScoreData_Type type() const;
  inline void set_type(::artm::ScoreData_Type value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:artm.ScoreData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* data_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ScoreData* default_instance_;
};
// -------------------------------------------------------------------

class ScoreDataArray : public ::google::protobuf::Message {
 public:
  ScoreDataArray();
  virtual ~ScoreDataArray();

  ScoreDataArray(const ScoreDataArray& from);

  inline ScoreDataArray& operator=(const ScoreDataArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreDataArray& default_instance();

  void Swap(ScoreDataArray* other);

  // implements Message ----------------------------------------------

  ScoreDataArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreDataArray& from);
  void MergeFrom(const ScoreDataArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .artm.ScoreData score = 1;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline const ::artm::ScoreData& score(int index) const;
  inline ::artm::ScoreData* mutable_score(int index);
  inline ::artm::ScoreData* add_score();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >&
      score() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >*
      mutable_score();

  // @@protoc_insertion_point(class_scope:artm.ScoreDataArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::artm::ScoreData > score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ScoreDataArray* default_instance_;
};
// -------------------------------------------------------------------

class PerplexityScoreConfig : public ::google::protobuf::Message {
 public:
  PerplexityScoreConfig();
  virtual ~PerplexityScoreConfig();

  PerplexityScoreConfig(const PerplexityScoreConfig& from);

  inline PerplexityScoreConfig& operator=(const PerplexityScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerplexityScoreConfig& default_instance();

  void Swap(PerplexityScoreConfig* other);

  // implements Message ----------------------------------------------

  PerplexityScoreConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerplexityScoreConfig& from);
  void MergeFrom(const PerplexityScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PerplexityScoreConfig_Type Type;
  static const Type UnigramDocumentModel = PerplexityScoreConfig_Type_UnigramDocumentModel;
  static const Type UnigramCollectionModel = PerplexityScoreConfig_Type_UnigramCollectionModel;
  static inline bool Type_IsValid(int value) {
    return PerplexityScoreConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PerplexityScoreConfig_Type_Type_MIN;
  static const Type Type_MAX =
    PerplexityScoreConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PerplexityScoreConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PerplexityScoreConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PerplexityScoreConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PerplexityScoreConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.PerplexityScoreConfig.Type model_type = 3 [default = UnigramDocumentModel];
  inline bool has_model_type() const;
  inline void clear_model_type();
  static const int kModelTypeFieldNumber = 3;
  inline ::artm::PerplexityScoreConfig_Type model_type() const;
  inline void set_model_type(::artm::PerplexityScoreConfig_Type value);

  // optional string dictionary_name = 4;
  inline bool has_dictionary_name() const;
  inline void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 4;
  inline const ::std::string& dictionary_name() const;
  inline void set_dictionary_name(const ::std::string& value);
  inline void set_dictionary_name(const char* value);
  inline void set_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_name();
  inline ::std::string* release_dictionary_name();
  inline void set_allocated_dictionary_name(::std::string* dictionary_name);

  // optional float theta_sparsity_eps = 5 [default = 1e-037];
  inline bool has_theta_sparsity_eps() const;
  inline void clear_theta_sparsity_eps();
  static const int kThetaSparsityEpsFieldNumber = 5;
  inline float theta_sparsity_eps() const;
  inline void set_theta_sparsity_eps(float value);

  // repeated string theta_sparsity_topic_name = 6;
  inline int theta_sparsity_topic_name_size() const;
  inline void clear_theta_sparsity_topic_name();
  static const int kThetaSparsityTopicNameFieldNumber = 6;
  inline const ::std::string& theta_sparsity_topic_name(int index) const;
  inline ::std::string* mutable_theta_sparsity_topic_name(int index);
  inline void set_theta_sparsity_topic_name(int index, const ::std::string& value);
  inline void set_theta_sparsity_topic_name(int index, const char* value);
  inline void set_theta_sparsity_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_theta_sparsity_topic_name();
  inline void add_theta_sparsity_topic_name(const ::std::string& value);
  inline void add_theta_sparsity_topic_name(const char* value);
  inline void add_theta_sparsity_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& theta_sparsity_topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_theta_sparsity_topic_name();

  // repeated string class_id = 7;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 7;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // @@protoc_insertion_point(class_scope:artm.PerplexityScoreConfig)
 private:
  inline void set_has_model_type();
  inline void clear_has_model_type();
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();
  inline void set_has_theta_sparsity_eps();
  inline void clear_has_theta_sparsity_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dictionary_name_;
  int model_type_;
  float theta_sparsity_eps_;
  ::google::protobuf::RepeatedPtrField< ::std::string> theta_sparsity_topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static PerplexityScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class PerplexityScore : public ::google::protobuf::Message {
 public:
  PerplexityScore();
  virtual ~PerplexityScore();

  PerplexityScore(const PerplexityScore& from);

  inline PerplexityScore& operator=(const PerplexityScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerplexityScore& default_instance();

  void Swap(PerplexityScore* other);

  // implements Message ----------------------------------------------

  PerplexityScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PerplexityScore& from);
  void MergeFrom(const PerplexityScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline double value() const;
  inline void set_value(double value);

  // optional double raw = 2;
  inline bool has_raw() const;
  inline void clear_raw();
  static const int kRawFieldNumber = 2;
  inline double raw() const;
  inline void set_raw(double value);

  // optional double normalizer = 3;
  inline bool has_normalizer() const;
  inline void clear_normalizer();
  static const int kNormalizerFieldNumber = 3;
  inline double normalizer() const;
  inline void set_normalizer(double value);

  // optional int64 zero_words = 4;
  inline bool has_zero_words() const;
  inline void clear_zero_words();
  static const int kZeroWordsFieldNumber = 4;
  inline ::google::protobuf::int64 zero_words() const;
  inline void set_zero_words(::google::protobuf::int64 value);

  // optional double theta_sparsity_value = 5;
  inline bool has_theta_sparsity_value() const;
  inline void clear_theta_sparsity_value();
  static const int kThetaSparsityValueFieldNumber = 5;
  inline double theta_sparsity_value() const;
  inline void set_theta_sparsity_value(double value);

  // optional int32 theta_sparsity_zero_topics = 6;
  inline bool has_theta_sparsity_zero_topics() const;
  inline void clear_theta_sparsity_zero_topics();
  static const int kThetaSparsityZeroTopicsFieldNumber = 6;
  inline ::google::protobuf::int32 theta_sparsity_zero_topics() const;
  inline void set_theta_sparsity_zero_topics(::google::protobuf::int32 value);

  // optional int32 theta_sparsity_total_topics = 7;
  inline bool has_theta_sparsity_total_topics() const;
  inline void clear_theta_sparsity_total_topics();
  static const int kThetaSparsityTotalTopicsFieldNumber = 7;
  inline ::google::protobuf::int32 theta_sparsity_total_topics() const;
  inline void set_theta_sparsity_total_topics(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.PerplexityScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_raw();
  inline void clear_has_raw();
  inline void set_has_normalizer();
  inline void clear_has_normalizer();
  inline void set_has_zero_words();
  inline void clear_has_zero_words();
  inline void set_has_theta_sparsity_value();
  inline void clear_has_theta_sparsity_value();
  inline void set_has_theta_sparsity_zero_topics();
  inline void clear_has_theta_sparsity_zero_topics();
  inline void set_has_theta_sparsity_total_topics();
  inline void clear_has_theta_sparsity_total_topics();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double value_;
  double raw_;
  double normalizer_;
  ::google::protobuf::int64 zero_words_;
  double theta_sparsity_value_;
  ::google::protobuf::int32 theta_sparsity_zero_topics_;
  ::google::protobuf::int32 theta_sparsity_total_topics_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static PerplexityScore* default_instance_;
};
// -------------------------------------------------------------------

class SparsityThetaScoreConfig : public ::google::protobuf::Message {
 public:
  SparsityThetaScoreConfig();
  virtual ~SparsityThetaScoreConfig();

  SparsityThetaScoreConfig(const SparsityThetaScoreConfig& from);

  inline SparsityThetaScoreConfig& operator=(const SparsityThetaScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparsityThetaScoreConfig& default_instance();

  void Swap(SparsityThetaScoreConfig* other);

  // implements Message ----------------------------------------------

  SparsityThetaScoreConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparsityThetaScoreConfig& from);
  void MergeFrom(const SparsityThetaScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float eps = 3 [default = 1e-037];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 3;
  inline float eps() const;
  inline void set_eps(float value);

  // repeated string topic_name = 4;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 4;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // @@protoc_insertion_point(class_scope:artm.SparsityThetaScoreConfig)
 private:
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  float eps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SparsityThetaScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class SparsityThetaScore : public ::google::protobuf::Message {
 public:
  SparsityThetaScore();
  virtual ~SparsityThetaScore();

  SparsityThetaScore(const SparsityThetaScore& from);

  inline SparsityThetaScore& operator=(const SparsityThetaScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparsityThetaScore& default_instance();

  void Swap(SparsityThetaScore* other);

  // implements Message ----------------------------------------------

  SparsityThetaScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparsityThetaScore& from);
  void MergeFrom(const SparsityThetaScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline double value() const;
  inline void set_value(double value);

  // optional int64 zero_topics = 2;
  inline bool has_zero_topics() const;
  inline void clear_zero_topics();
  static const int kZeroTopicsFieldNumber = 2;
  inline ::google::protobuf::int64 zero_topics() const;
  inline void set_zero_topics(::google::protobuf::int64 value);

  // optional int64 total_topics = 3;
  inline bool has_total_topics() const;
  inline void clear_total_topics();
  static const int kTotalTopicsFieldNumber = 3;
  inline ::google::protobuf::int64 total_topics() const;
  inline void set_total_topics(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.SparsityThetaScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_zero_topics();
  inline void clear_has_zero_topics();
  inline void set_has_total_topics();
  inline void clear_has_total_topics();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double value_;
  ::google::protobuf::int64 zero_topics_;
  ::google::protobuf::int64 total_topics_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SparsityThetaScore* default_instance_;
};
// -------------------------------------------------------------------

class SparsityPhiScoreConfig : public ::google::protobuf::Message {
 public:
  SparsityPhiScoreConfig();
  virtual ~SparsityPhiScoreConfig();

  SparsityPhiScoreConfig(const SparsityPhiScoreConfig& from);

  inline SparsityPhiScoreConfig& operator=(const SparsityPhiScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparsityPhiScoreConfig& default_instance();

  void Swap(SparsityPhiScoreConfig* other);

  // implements Message ----------------------------------------------

  SparsityPhiScoreConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparsityPhiScoreConfig& from);
  void MergeFrom(const SparsityPhiScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float eps = 1 [default = 1e-037];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 1;
  inline float eps() const;
  inline void set_eps(float value);

  // optional string class_id = 2 [default = "@default_class"];
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id() const;
  inline void set_class_id(const ::std::string& value);
  inline void set_class_id(const char* value);
  inline void set_class_id(const char* value, size_t size);
  inline ::std::string* mutable_class_id();
  inline ::std::string* release_class_id();
  inline void set_allocated_class_id(::std::string* class_id);

  // repeated string topic_name = 3;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // @@protoc_insertion_point(class_scope:artm.SparsityPhiScoreConfig)
 private:
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* class_id_;
  static ::std::string* _default_class_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  float eps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SparsityPhiScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class SparsityPhiScore : public ::google::protobuf::Message {
 public:
  SparsityPhiScore();
  virtual ~SparsityPhiScore();

  SparsityPhiScore(const SparsityPhiScore& from);

  inline SparsityPhiScore& operator=(const SparsityPhiScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparsityPhiScore& default_instance();

  void Swap(SparsityPhiScore* other);

  // implements Message ----------------------------------------------

  SparsityPhiScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparsityPhiScore& from);
  void MergeFrom(const SparsityPhiScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline double value() const;
  inline void set_value(double value);

  // optional int64 zero_tokens = 2;
  inline bool has_zero_tokens() const;
  inline void clear_zero_tokens();
  static const int kZeroTokensFieldNumber = 2;
  inline ::google::protobuf::int64 zero_tokens() const;
  inline void set_zero_tokens(::google::protobuf::int64 value);

  // optional int64 total_tokens = 3;
  inline bool has_total_tokens() const;
  inline void clear_total_tokens();
  static const int kTotalTokensFieldNumber = 3;
  inline ::google::protobuf::int64 total_tokens() const;
  inline void set_total_tokens(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.SparsityPhiScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_zero_tokens();
  inline void clear_has_zero_tokens();
  inline void set_has_total_tokens();
  inline void clear_has_total_tokens();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double value_;
  ::google::protobuf::int64 zero_tokens_;
  ::google::protobuf::int64 total_tokens_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static SparsityPhiScore* default_instance_;
};
// -------------------------------------------------------------------

class ItemsProcessedScoreConfig : public ::google::protobuf::Message {
 public:
  ItemsProcessedScoreConfig();
  virtual ~ItemsProcessedScoreConfig();

  ItemsProcessedScoreConfig(const ItemsProcessedScoreConfig& from);

  inline ItemsProcessedScoreConfig& operator=(const ItemsProcessedScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemsProcessedScoreConfig& default_instance();

  void Swap(ItemsProcessedScoreConfig* other);

  // implements Message ----------------------------------------------

  ItemsProcessedScoreConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemsProcessedScoreConfig& from);
  void MergeFrom(const ItemsProcessedScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.ItemsProcessedScoreConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ItemsProcessedScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class ItemsProcessedScore : public ::google::protobuf::Message {
 public:
  ItemsProcessedScore();
  virtual ~ItemsProcessedScore();

  ItemsProcessedScore(const ItemsProcessedScore& from);

  inline ItemsProcessedScore& operator=(const ItemsProcessedScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemsProcessedScore& default_instance();

  void Swap(ItemsProcessedScore* other);

  // implements Message ----------------------------------------------

  ItemsProcessedScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemsProcessedScore& from);
  void MergeFrom(const ItemsProcessedScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 value = 1 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional int32 num_batches = 2 [default = 0];
  inline bool has_num_batches() const;
  inline void clear_num_batches();
  static const int kNumBatchesFieldNumber = 2;
  inline ::google::protobuf::int32 num_batches() const;
  inline void set_num_batches(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.ItemsProcessedScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_num_batches();
  inline void clear_has_num_batches();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 num_batches_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ItemsProcessedScore* default_instance_;
};
// -------------------------------------------------------------------

class TopTokensScoreConfig : public ::google::protobuf::Message {
 public:
  TopTokensScoreConfig();
  virtual ~TopTokensScoreConfig();

  TopTokensScoreConfig(const TopTokensScoreConfig& from);

  inline TopTokensScoreConfig& operator=(const TopTokensScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopTokensScoreConfig& default_instance();

  void Swap(TopTokensScoreConfig* other);

  // implements Message ----------------------------------------------

  TopTokensScoreConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopTokensScoreConfig& from);
  void MergeFrom(const TopTokensScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_tokens = 1 [default = 10];
  inline bool has_num_tokens() const;
  inline void clear_num_tokens();
  static const int kNumTokensFieldNumber = 1;
  inline ::google::protobuf::int32 num_tokens() const;
  inline void set_num_tokens(::google::protobuf::int32 value);

  // optional string class_id = 2 [default = "@default_class"];
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id() const;
  inline void set_class_id(const ::std::string& value);
  inline void set_class_id(const char* value);
  inline void set_class_id(const char* value, size_t size);
  inline ::std::string* mutable_class_id();
  inline ::std::string* release_class_id();
  inline void set_allocated_class_id(::std::string* class_id);

  // repeated string topic_name = 3;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional string cooccurrence_dictionary_name = 4;
  inline bool has_cooccurrence_dictionary_name() const;
  inline void clear_cooccurrence_dictionary_name();
  static const int kCooccurrenceDictionaryNameFieldNumber = 4;
  inline const ::std::string& cooccurrence_dictionary_name() const;
  inline void set_cooccurrence_dictionary_name(const ::std::string& value);
  inline void set_cooccurrence_dictionary_name(const char* value);
  inline void set_cooccurrence_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_cooccurrence_dictionary_name();
  inline ::std::string* release_cooccurrence_dictionary_name();
  inline void set_allocated_cooccurrence_dictionary_name(::std::string* cooccurrence_dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.TopTokensScoreConfig)
 private:
  inline void set_has_num_tokens();
  inline void clear_has_num_tokens();
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_cooccurrence_dictionary_name();
  inline void clear_has_cooccurrence_dictionary_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* class_id_;
  static ::std::string* _default_class_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::std::string* cooccurrence_dictionary_name_;
  ::google::protobuf::int32 num_tokens_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopTokensScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class TopTokensScore : public ::google::protobuf::Message {
 public:
  TopTokensScore();
  virtual ~TopTokensScore();

  TopTokensScore(const TopTokensScore& from);

  inline TopTokensScore& operator=(const TopTokensScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopTokensScore& default_instance();

  void Swap(TopTokensScore* other);

  // implements Message ----------------------------------------------

  TopTokensScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopTokensScore& from);
  void MergeFrom(const TopTokensScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_entries = 1;
  inline bool has_num_entries() const;
  inline void clear_num_entries();
  static const int kNumEntriesFieldNumber = 1;
  inline ::google::protobuf::int32 num_entries() const;
  inline void set_num_entries(::google::protobuf::int32 value);

  // repeated string topic_name = 2;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 2;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated int32 topic_index = 3;
  inline int topic_index_size() const;
  inline void clear_topic_index();
  static const int kTopicIndexFieldNumber = 3;
  inline ::google::protobuf::int32 topic_index(int index) const;
  inline void set_topic_index(int index, ::google::protobuf::int32 value);
  inline void add_topic_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      topic_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_topic_index();

  // repeated string token = 4;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token(int index) const;
  inline ::std::string* mutable_token(int index);
  inline void set_token(int index, const ::std::string& value);
  inline void set_token(int index, const char* value);
  inline void set_token(int index, const char* value, size_t size);
  inline ::std::string* add_token();
  inline void add_token(const ::std::string& value);
  inline void add_token(const char* value);
  inline void add_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated float weight = 5;
  inline int weight_size() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 5;
  inline float weight(int index) const;
  inline void set_weight(int index, float value);
  inline void add_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_weight();

  // optional .artm.FloatArray coherence = 6;
  inline bool has_coherence() const;
  inline void clear_coherence();
  static const int kCoherenceFieldNumber = 6;
  inline const ::artm::FloatArray& coherence() const;
  inline ::artm::FloatArray* mutable_coherence();
  inline ::artm::FloatArray* release_coherence();
  inline void set_allocated_coherence(::artm::FloatArray* coherence);

  // optional float average_coherence = 7;
  inline bool has_average_coherence() const;
  inline void clear_average_coherence();
  static const int kAverageCoherenceFieldNumber = 7;
  inline float average_coherence() const;
  inline void set_average_coherence(float value);

  // @@protoc_insertion_point(class_scope:artm.TopTokensScore)
 private:
  inline void set_has_num_entries();
  inline void clear_has_num_entries();
  inline void set_has_coherence();
  inline void clear_has_coherence();
  inline void set_has_average_coherence();
  inline void clear_has_average_coherence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > topic_index_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::int32 num_entries_;
  float average_coherence_;
  ::google::protobuf::RepeatedField< float > weight_;
  ::artm::FloatArray* coherence_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopTokensScore* default_instance_;
};
// -------------------------------------------------------------------

class ThetaSnippetScoreConfig : public ::google::protobuf::Message {
 public:
  ThetaSnippetScoreConfig();
  virtual ~ThetaSnippetScoreConfig();

  ThetaSnippetScoreConfig(const ThetaSnippetScoreConfig& from);

  inline ThetaSnippetScoreConfig& operator=(const ThetaSnippetScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThetaSnippetScoreConfig& default_instance();

  void Swap(ThetaSnippetScoreConfig* other);

  // implements Message ----------------------------------------------

  ThetaSnippetScoreConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThetaSnippetScoreConfig& from);
  void MergeFrom(const ThetaSnippetScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 item_id = 3 [packed = true];
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // optional int32 item_count = 4 [default = 10];
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 4;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.ThetaSnippetScoreConfig)
 private:
  inline void set_has_item_count();
  inline void clear_has_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  mutable int _item_id_cached_byte_size_;
  ::google::protobuf::int32 item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ThetaSnippetScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class ThetaSnippetScore : public ::google::protobuf::Message {
 public:
  ThetaSnippetScore();
  virtual ~ThetaSnippetScore();

  ThetaSnippetScore(const ThetaSnippetScore& from);

  inline ThetaSnippetScore& operator=(const ThetaSnippetScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThetaSnippetScore& default_instance();

  void Swap(ThetaSnippetScore* other);

  // implements Message ----------------------------------------------

  ThetaSnippetScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThetaSnippetScore& from);
  void MergeFrom(const ThetaSnippetScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 item_id = 1;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated .artm.FloatArray values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline const ::artm::FloatArray& values(int index) const;
  inline ::artm::FloatArray* mutable_values(int index);
  inline ::artm::FloatArray* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:artm.ThetaSnippetScore)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ThetaSnippetScore* default_instance_;
};
// -------------------------------------------------------------------

class TopicKernelScoreConfig : public ::google::protobuf::Message {
 public:
  TopicKernelScoreConfig();
  virtual ~TopicKernelScoreConfig();

  TopicKernelScoreConfig(const TopicKernelScoreConfig& from);

  inline TopicKernelScoreConfig& operator=(const TopicKernelScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicKernelScoreConfig& default_instance();

  void Swap(TopicKernelScoreConfig* other);

  // implements Message ----------------------------------------------

  TopicKernelScoreConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicKernelScoreConfig& from);
  void MergeFrom(const TopicKernelScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float eps = 1 [default = 1e-037];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 1;
  inline float eps() const;
  inline void set_eps(float value);

  // optional string class_id = 2 [default = "@default_class"];
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id() const;
  inline void set_class_id(const ::std::string& value);
  inline void set_class_id(const char* value);
  inline void set_class_id(const char* value, size_t size);
  inline ::std::string* mutable_class_id();
  inline ::std::string* release_class_id();
  inline void set_allocated_class_id(::std::string* class_id);

  // repeated string topic_name = 3;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional double probability_mass_threshold = 4 [default = 0.1];
  inline bool has_probability_mass_threshold() const;
  inline void clear_probability_mass_threshold();
  static const int kProbabilityMassThresholdFieldNumber = 4;
  inline double probability_mass_threshold() const;
  inline void set_probability_mass_threshold(double value);

  // optional string cooccurrence_dictionary_name = 5;
  inline bool has_cooccurrence_dictionary_name() const;
  inline void clear_cooccurrence_dictionary_name();
  static const int kCooccurrenceDictionaryNameFieldNumber = 5;
  inline const ::std::string& cooccurrence_dictionary_name() const;
  inline void set_cooccurrence_dictionary_name(const ::std::string& value);
  inline void set_cooccurrence_dictionary_name(const char* value);
  inline void set_cooccurrence_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_cooccurrence_dictionary_name();
  inline ::std::string* release_cooccurrence_dictionary_name();
  inline void set_allocated_cooccurrence_dictionary_name(::std::string* cooccurrence_dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.TopicKernelScoreConfig)
 private:
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_probability_mass_threshold();
  inline void clear_has_probability_mass_threshold();
  inline void set_has_cooccurrence_dictionary_name();
  inline void clear_has_cooccurrence_dictionary_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* class_id_;
  static ::std::string* _default_class_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  double probability_mass_threshold_;
  ::std::string* cooccurrence_dictionary_name_;
  float eps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicKernelScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class TopicKernelScore : public ::google::protobuf::Message {
 public:
  TopicKernelScore();
  virtual ~TopicKernelScore();

  TopicKernelScore(const TopicKernelScore& from);

  inline TopicKernelScore& operator=(const TopicKernelScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicKernelScore& default_instance();

  void Swap(TopicKernelScore* other);

  // implements Message ----------------------------------------------

  TopicKernelScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicKernelScore& from);
  void MergeFrom(const TopicKernelScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .artm.DoubleArray kernel_size = 1;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 1;
  inline const ::artm::DoubleArray& kernel_size() const;
  inline ::artm::DoubleArray* mutable_kernel_size();
  inline ::artm::DoubleArray* release_kernel_size();
  inline void set_allocated_kernel_size(::artm::DoubleArray* kernel_size);

  // optional .artm.DoubleArray kernel_purity = 2;
  inline bool has_kernel_purity() const;
  inline void clear_kernel_purity();
  static const int kKernelPurityFieldNumber = 2;
  inline const ::artm::DoubleArray& kernel_purity() const;
  inline ::artm::DoubleArray* mutable_kernel_purity();
  inline ::artm::DoubleArray* release_kernel_purity();
  inline void set_allocated_kernel_purity(::artm::DoubleArray* kernel_purity);

  // optional .artm.DoubleArray kernel_contrast = 3;
  inline bool has_kernel_contrast() const;
  inline void clear_kernel_contrast();
  static const int kKernelContrastFieldNumber = 3;
  inline const ::artm::DoubleArray& kernel_contrast() const;
  inline ::artm::DoubleArray* mutable_kernel_contrast();
  inline ::artm::DoubleArray* release_kernel_contrast();
  inline void set_allocated_kernel_contrast(::artm::DoubleArray* kernel_contrast);

  // optional double average_kernel_size = 4;
  inline bool has_average_kernel_size() const;
  inline void clear_average_kernel_size();
  static const int kAverageKernelSizeFieldNumber = 4;
  inline double average_kernel_size() const;
  inline void set_average_kernel_size(double value);

  // optional double average_kernel_purity = 5;
  inline bool has_average_kernel_purity() const;
  inline void clear_average_kernel_purity();
  static const int kAverageKernelPurityFieldNumber = 5;
  inline double average_kernel_purity() const;
  inline void set_average_kernel_purity(double value);

  // optional double average_kernel_contrast = 6;
  inline bool has_average_kernel_contrast() const;
  inline void clear_average_kernel_contrast();
  static const int kAverageKernelContrastFieldNumber = 6;
  inline double average_kernel_contrast() const;
  inline void set_average_kernel_contrast(double value);

  // optional .artm.DoubleArray coherence = 7;
  inline bool has_coherence() const;
  inline void clear_coherence();
  static const int kCoherenceFieldNumber = 7;
  inline const ::artm::DoubleArray& coherence() const;
  inline ::artm::DoubleArray* mutable_coherence();
  inline ::artm::DoubleArray* release_coherence();
  inline void set_allocated_coherence(::artm::DoubleArray* coherence);

  // optional float average_coherence = 8;
  inline bool has_average_coherence() const;
  inline void clear_average_coherence();
  static const int kAverageCoherenceFieldNumber = 8;
  inline float average_coherence() const;
  inline void set_average_coherence(float value);

  // repeated .artm.StringArray kernel_tokens = 9;
  inline int kernel_tokens_size() const;
  inline void clear_kernel_tokens();
  static const int kKernelTokensFieldNumber = 9;
  inline const ::artm::StringArray& kernel_tokens(int index) const;
  inline ::artm::StringArray* mutable_kernel_tokens(int index);
  inline ::artm::StringArray* add_kernel_tokens();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::StringArray >&
      kernel_tokens() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::StringArray >*
      mutable_kernel_tokens();

  // optional .artm.StringArray topic_name = 10;
  inline bool has_topic_name() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 10;
  inline const ::artm::StringArray& topic_name() const;
  inline ::artm::StringArray* mutable_topic_name();
  inline ::artm::StringArray* release_topic_name();
  inline void set_allocated_topic_name(::artm::StringArray* topic_name);

  // @@protoc_insertion_point(class_scope:artm.TopicKernelScore)
 private:
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_kernel_purity();
  inline void clear_has_kernel_purity();
  inline void set_has_kernel_contrast();
  inline void clear_has_kernel_contrast();
  inline void set_has_average_kernel_size();
  inline void clear_has_average_kernel_size();
  inline void set_has_average_kernel_purity();
  inline void clear_has_average_kernel_purity();
  inline void set_has_average_kernel_contrast();
  inline void clear_has_average_kernel_contrast();
  inline void set_has_coherence();
  inline void clear_has_coherence();
  inline void set_has_average_coherence();
  inline void clear_has_average_coherence();
  inline void set_has_topic_name();
  inline void clear_has_topic_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::artm::DoubleArray* kernel_size_;
  ::artm::DoubleArray* kernel_purity_;
  ::artm::DoubleArray* kernel_contrast_;
  double average_kernel_size_;
  double average_kernel_purity_;
  double average_kernel_contrast_;
  ::artm::DoubleArray* coherence_;
  ::google::protobuf::RepeatedPtrField< ::artm::StringArray > kernel_tokens_;
  ::artm::StringArray* topic_name_;
  float average_coherence_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicKernelScore* default_instance_;
};
// -------------------------------------------------------------------

class TopicMassPhiScoreConfig : public ::google::protobuf::Message {
 public:
  TopicMassPhiScoreConfig();
  virtual ~TopicMassPhiScoreConfig();

  TopicMassPhiScoreConfig(const TopicMassPhiScoreConfig& from);

  inline TopicMassPhiScoreConfig& operator=(const TopicMassPhiScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicMassPhiScoreConfig& default_instance();

  void Swap(TopicMassPhiScoreConfig* other);

  // implements Message ----------------------------------------------

  TopicMassPhiScoreConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicMassPhiScoreConfig& from);
  void MergeFrom(const TopicMassPhiScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float eps = 1 [default = 1e-037];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 1;
  inline float eps() const;
  inline void set_eps(float value);

  // optional string class_id = 2 [default = "@default_class"];
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id() const;
  inline void set_class_id(const ::std::string& value);
  inline void set_class_id(const char* value);
  inline void set_class_id(const char* value, size_t size);
  inline ::std::string* mutable_class_id();
  inline ::std::string* release_class_id();
  inline void set_allocated_class_id(::std::string* class_id);

  // repeated string topic_name = 3;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // @@protoc_insertion_point(class_scope:artm.TopicMassPhiScoreConfig)
 private:
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_class_id();
  inline void clear_has_class_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* class_id_;
  static ::std::string* _default_class_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  float eps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicMassPhiScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class TopicMassPhiScore : public ::google::protobuf::Message {
 public:
  TopicMassPhiScore();
  virtual ~TopicMassPhiScore();

  TopicMassPhiScore(const TopicMassPhiScore& from);

  inline TopicMassPhiScore& operator=(const TopicMassPhiScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicMassPhiScore& default_instance();

  void Swap(TopicMassPhiScore* other);

  // implements Message ----------------------------------------------

  TopicMassPhiScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicMassPhiScore& from);
  void MergeFrom(const TopicMassPhiScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline double value() const;
  inline void set_value(double value);

  // repeated string topic_name = 2;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 2;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated double topic_ratio = 3;
  inline int topic_ratio_size() const;
  inline void clear_topic_ratio();
  static const int kTopicRatioFieldNumber = 3;
  inline double topic_ratio(int index) const;
  inline void set_topic_ratio(int index, double value);
  inline void add_topic_ratio(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      topic_ratio() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_topic_ratio();

  // repeated double topic_mass = 4;
  inline int topic_mass_size() const;
  inline void clear_topic_mass();
  static const int kTopicMassFieldNumber = 4;
  inline double topic_mass(int index) const;
  inline void set_topic_mass(int index, double value);
  inline void add_topic_mass(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      topic_mass() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_topic_mass();

  // @@protoc_insertion_point(class_scope:artm.TopicMassPhiScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedField< double > topic_ratio_;
  ::google::protobuf::RepeatedField< double > topic_mass_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicMassPhiScore* default_instance_;
};
// -------------------------------------------------------------------

class ClassPrecisionScoreConfig : public ::google::protobuf::Message {
 public:
  ClassPrecisionScoreConfig();
  virtual ~ClassPrecisionScoreConfig();

  ClassPrecisionScoreConfig(const ClassPrecisionScoreConfig& from);

  inline ClassPrecisionScoreConfig& operator=(const ClassPrecisionScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassPrecisionScoreConfig& default_instance();

  void Swap(ClassPrecisionScoreConfig* other);

  // implements Message ----------------------------------------------

  ClassPrecisionScoreConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassPrecisionScoreConfig& from);
  void MergeFrom(const ClassPrecisionScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.ClassPrecisionScoreConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ClassPrecisionScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class ClassPrecisionScore : public ::google::protobuf::Message {
 public:
  ClassPrecisionScore();
  virtual ~ClassPrecisionScore();

  ClassPrecisionScore(const ClassPrecisionScore& from);

  inline ClassPrecisionScore& operator=(const ClassPrecisionScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassPrecisionScore& default_instance();

  void Swap(ClassPrecisionScore* other);

  // implements Message ----------------------------------------------

  ClassPrecisionScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassPrecisionScore& from);
  void MergeFrom(const ClassPrecisionScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline double value() const;
  inline void set_value(double value);

  // optional double error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline double error() const;
  inline void set_error(double value);

  // optional double total = 3;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 3;
  inline double total() const;
  inline void set_total(double value);

  // @@protoc_insertion_point(class_scope:artm.ClassPrecisionScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double value_;
  double error_;
  double total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ClassPrecisionScore* default_instance_;
};
// -------------------------------------------------------------------

class PeakMemoryScoreConfig : public ::google::protobuf::Message {
 public:
  PeakMemoryScoreConfig();
  virtual ~PeakMemoryScoreConfig();

  PeakMemoryScoreConfig(const PeakMemoryScoreConfig& from);

  inline PeakMemoryScoreConfig& operator=(const PeakMemoryScoreConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeakMemoryScoreConfig& default_instance();

  void Swap(PeakMemoryScoreConfig* other);

  // implements Message ----------------------------------------------

  PeakMemoryScoreConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeakMemoryScoreConfig& from);
  void MergeFrom(const PeakMemoryScoreConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.PeakMemoryScoreConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static PeakMemoryScoreConfig* default_instance_;
};
// -------------------------------------------------------------------

class PeakMemoryScore : public ::google::protobuf::Message {
 public:
  PeakMemoryScore();
  virtual ~PeakMemoryScore();

  PeakMemoryScore(const PeakMemoryScore& from);

  inline PeakMemoryScore& operator=(const PeakMemoryScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeakMemoryScore& default_instance();

  void Swap(PeakMemoryScore* other);

  // implements Message ----------------------------------------------

  PeakMemoryScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeakMemoryScore& from);
  void MergeFrom(const PeakMemoryScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.PeakMemoryScore)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static PeakMemoryScore* default_instance_;
};
// -------------------------------------------------------------------

class TopicModel_TopicModelInternals : public ::google::protobuf::Message {
 public:
  TopicModel_TopicModelInternals();
  virtual ~TopicModel_TopicModelInternals();

  TopicModel_TopicModelInternals(const TopicModel_TopicModelInternals& from);

  inline TopicModel_TopicModelInternals& operator=(const TopicModel_TopicModelInternals& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicModel_TopicModelInternals& default_instance();

  void Swap(TopicModel_TopicModelInternals* other);

  // implements Message ----------------------------------------------

  TopicModel_TopicModelInternals* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicModel_TopicModelInternals& from);
  void MergeFrom(const TopicModel_TopicModelInternals& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .artm.FloatArray n_wt = 1;
  inline int n_wt_size() const;
  inline void clear_n_wt();
  static const int kNWtFieldNumber = 1;
  inline const ::artm::FloatArray& n_wt(int index) const;
  inline ::artm::FloatArray* mutable_n_wt(int index);
  inline ::artm::FloatArray* add_n_wt();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      n_wt() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_n_wt();

  // @@protoc_insertion_point(class_scope:artm.TopicModel.TopicModelInternals)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > n_wt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicModel_TopicModelInternals* default_instance_;
};
// -------------------------------------------------------------------

class TopicModel : public ::google::protobuf::Message {
 public:
  TopicModel();
  virtual ~TopicModel();

  TopicModel(const TopicModel& from);

  inline TopicModel& operator=(const TopicModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicModel& default_instance();

  void Swap(TopicModel* other);

  // implements Message ----------------------------------------------

  TopicModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicModel& from);
  void MergeFrom(const TopicModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TopicModel_TopicModelInternals TopicModelInternals;

  typedef TopicModel_OperationType OperationType;
  static const OperationType Initialize = TopicModel_OperationType_Initialize;
  static const OperationType Increment = TopicModel_OperationType_Increment;
  static const OperationType Overwrite = TopicModel_OperationType_Overwrite;
  static const OperationType Remove = TopicModel_OperationType_Remove;
  static const OperationType Ignore = TopicModel_OperationType_Ignore;
  static inline bool OperationType_IsValid(int value) {
    return TopicModel_OperationType_IsValid(value);
  }
  static const OperationType OperationType_MIN =
    TopicModel_OperationType_OperationType_MIN;
  static const OperationType OperationType_MAX =
    TopicModel_OperationType_OperationType_MAX;
  static const int OperationType_ARRAYSIZE =
    TopicModel_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationType_descriptor() {
    return TopicModel_OperationType_descriptor();
  }
  static inline const ::std::string& OperationType_Name(OperationType value) {
    return TopicModel_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(const ::std::string& name,
      OperationType* value) {
    return TopicModel_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = "@model"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 topics_count = 2;
  inline bool has_topics_count() const;
  inline void clear_topics_count();
  static const int kTopicsCountFieldNumber = 2;
  inline ::google::protobuf::int32 topics_count() const;
  inline void set_topics_count(::google::protobuf::int32 value);

  // repeated string topic_name = 3;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string token = 4;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token(int index) const;
  inline ::std::string* mutable_token(int index);
  inline void set_token(int index, const ::std::string& value);
  inline void set_token(int index, const char* value);
  inline void set_token(int index, const char* value, size_t size);
  inline ::std::string* add_token();
  inline void add_token(const ::std::string& value);
  inline void add_token(const char* value);
  inline void add_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated .artm.FloatArray token_weights = 5;
  inline int token_weights_size() const;
  inline void clear_token_weights();
  static const int kTokenWeightsFieldNumber = 5;
  inline const ::artm::FloatArray& token_weights(int index) const;
  inline ::artm::FloatArray* mutable_token_weights(int index);
  inline ::artm::FloatArray* add_token_weights();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      token_weights() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_token_weights();

  // repeated string class_id = 6;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 6;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional bytes internals = 7;
  inline bool has_internals() const;
  inline void clear_internals();
  static const int kInternalsFieldNumber = 7;
  inline const ::std::string& internals() const;
  inline void set_internals(const ::std::string& value);
  inline void set_internals(const char* value);
  inline void set_internals(const void* value, size_t size);
  inline ::std::string* mutable_internals();
  inline ::std::string* release_internals();
  inline void set_allocated_internals(::std::string* internals);

  // repeated .artm.IntArray topic_index = 8;
  inline int topic_index_size() const;
  inline void clear_topic_index();
  static const int kTopicIndexFieldNumber = 8;
  inline const ::artm::IntArray& topic_index(int index) const;
  inline ::artm::IntArray* mutable_topic_index(int index);
  inline ::artm::IntArray* add_topic_index();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
      topic_index() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
      mutable_topic_index();

  // repeated .artm.TopicModel.OperationType operation_type = 9;
  inline int operation_type_size() const;
  inline void clear_operation_type();
  static const int kOperationTypeFieldNumber = 9;
  inline ::artm::TopicModel_OperationType operation_type(int index) const;
  inline void set_operation_type(int index, ::artm::TopicModel_OperationType value);
  inline void add_operation_type(::artm::TopicModel_OperationType value);
  inline const ::google::protobuf::RepeatedField<int>& operation_type() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_operation_type();

  // optional int32 seed = 10;
  inline bool has_seed() const;
  inline void clear_seed();
  static const int kSeedFieldNumber = 10;
  inline ::google::protobuf::int32 seed() const;
  inline void set_seed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.TopicModel)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_topics_count();
  inline void clear_has_topics_count();
  inline void set_has_internals();
  inline void clear_has_internals();
  inline void set_has_seed();
  inline void clear_has_seed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  static ::std::string* _default_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > token_weights_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::int32 topics_count_;
  ::google::protobuf::int32 seed_;
  ::std::string* internals_;
  ::google::protobuf::RepeatedPtrField< ::artm::IntArray > topic_index_;
  ::google::protobuf::RepeatedField<int> operation_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TopicModel* default_instance_;
};
// -------------------------------------------------------------------

class ThetaMatrix : public ::google::protobuf::Message {
 public:
  ThetaMatrix();
  virtual ~ThetaMatrix();

  ThetaMatrix(const ThetaMatrix& from);

  inline ThetaMatrix& operator=(const ThetaMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThetaMatrix& default_instance();

  void Swap(ThetaMatrix* other);

  // implements Message ----------------------------------------------

  ThetaMatrix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThetaMatrix& from);
  void MergeFrom(const ThetaMatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 item_id = 2;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated .artm.FloatArray item_weights = 3;
  inline int item_weights_size() const;
  inline void clear_item_weights();
  static const int kItemWeightsFieldNumber = 3;
  inline const ::artm::FloatArray& item_weights(int index) const;
  inline ::artm::FloatArray* mutable_item_weights(int index);
  inline ::artm::FloatArray* add_item_weights();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
      item_weights() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
      mutable_item_weights();

  // repeated string topic_name = 4;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 4;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional int32 topics_count = 5;
  inline bool has_topics_count() const;
  inline void clear_topics_count();
  static const int kTopicsCountFieldNumber = 5;
  inline ::google::protobuf::int32 topics_count() const;
  inline void set_topics_count(::google::protobuf::int32 value);

  // repeated string item_title = 6;
  inline int item_title_size() const;
  inline void clear_item_title();
  static const int kItemTitleFieldNumber = 6;
  inline const ::std::string& item_title(int index) const;
  inline ::std::string* mutable_item_title(int index);
  inline void set_item_title(int index, const ::std::string& value);
  inline void set_item_title(int index, const char* value);
  inline void set_item_title(int index, const char* value, size_t size);
  inline ::std::string* add_item_title();
  inline void add_item_title(const ::std::string& value);
  inline void add_item_title(const char* value);
  inline void add_item_title(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& item_title() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_item_title();

  // repeated .artm.IntArray topic_index = 7;
  inline int topic_index_size() const;
  inline void clear_topic_index();
  static const int kTopicIndexFieldNumber = 7;
  inline const ::artm::IntArray& topic_index(int index) const;
  inline ::artm::IntArray* mutable_topic_index(int index);
  inline ::artm::IntArray* add_topic_index();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
      topic_index() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
      mutable_topic_index();

  // @@protoc_insertion_point(class_scope:artm.ThetaMatrix)
 private:
  inline void set_has_topics_count();
  inline void clear_has_topics_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::FloatArray > item_weights_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> item_title_;
  ::google::protobuf::RepeatedPtrField< ::artm::IntArray > topic_index_;
  ::google::protobuf::int32 topics_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ThetaMatrix* default_instance_;
};
// -------------------------------------------------------------------

class CollectionParserConfig : public ::google::protobuf::Message {
 public:
  CollectionParserConfig();
  virtual ~CollectionParserConfig();

  CollectionParserConfig(const CollectionParserConfig& from);

  inline CollectionParserConfig& operator=(const CollectionParserConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectionParserConfig& default_instance();

  void Swap(CollectionParserConfig* other);

  // implements Message ----------------------------------------------

  CollectionParserConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectionParserConfig& from);
  void MergeFrom(const CollectionParserConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CollectionParserConfig_Format Format;
  static const Format BagOfWordsUci = CollectionParserConfig_Format_BagOfWordsUci;
  static const Format MatrixMarket = CollectionParserConfig_Format_MatrixMarket;
  static const Format VowpalWabbit = CollectionParserConfig_Format_VowpalWabbit;
  static inline bool Format_IsValid(int value) {
    return CollectionParserConfig_Format_IsValid(value);
  }
  static const Format Format_MIN =
    CollectionParserConfig_Format_Format_MIN;
  static const Format Format_MAX =
    CollectionParserConfig_Format_Format_MAX;
  static const int Format_ARRAYSIZE =
    CollectionParserConfig_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Format_descriptor() {
    return CollectionParserConfig_Format_descriptor();
  }
  static inline const ::std::string& Format_Name(Format value) {
    return CollectionParserConfig_Format_Name(value);
  }
  static inline bool Format_Parse(const ::std::string& name,
      Format* value) {
    return CollectionParserConfig_Format_Parse(name, value);
  }

  typedef CollectionParserConfig_NameType NameType;
  static const NameType Guid = CollectionParserConfig_NameType_Guid;
  static const NameType Code = CollectionParserConfig_NameType_Code;
  static inline bool NameType_IsValid(int value) {
    return CollectionParserConfig_NameType_IsValid(value);
  }
  static const NameType NameType_MIN =
    CollectionParserConfig_NameType_NameType_MIN;
  static const NameType NameType_MAX =
    CollectionParserConfig_NameType_NameType_MAX;
  static const int NameType_ARRAYSIZE =
    CollectionParserConfig_NameType_NameType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NameType_descriptor() {
    return CollectionParserConfig_NameType_descriptor();
  }
  static inline const ::std::string& NameType_Name(NameType value) {
    return CollectionParserConfig_NameType_Name(value);
  }
  static inline bool NameType_Parse(const ::std::string& name,
      NameType* value) {
    return CollectionParserConfig_NameType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.CollectionParserConfig.Format format = 1 [default = BagOfWordsUci];
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 1;
  inline ::artm::CollectionParserConfig_Format format() const;
  inline void set_format(::artm::CollectionParserConfig_Format value);

  // optional string docword_file_path = 2;
  inline bool has_docword_file_path() const;
  inline void clear_docword_file_path();
  static const int kDocwordFilePathFieldNumber = 2;
  inline const ::std::string& docword_file_path() const;
  inline void set_docword_file_path(const ::std::string& value);
  inline void set_docword_file_path(const char* value);
  inline void set_docword_file_path(const char* value, size_t size);
  inline ::std::string* mutable_docword_file_path();
  inline ::std::string* release_docword_file_path();
  inline void set_allocated_docword_file_path(::std::string* docword_file_path);

  // optional string vocab_file_path = 3;
  inline bool has_vocab_file_path() const;
  inline void clear_vocab_file_path();
  static const int kVocabFilePathFieldNumber = 3;
  inline const ::std::string& vocab_file_path() const;
  inline void set_vocab_file_path(const ::std::string& value);
  inline void set_vocab_file_path(const char* value);
  inline void set_vocab_file_path(const char* value, size_t size);
  inline ::std::string* mutable_vocab_file_path();
  inline ::std::string* release_vocab_file_path();
  inline void set_allocated_vocab_file_path(::std::string* vocab_file_path);

  // optional string target_folder = 4;
  inline bool has_target_folder() const;
  inline void clear_target_folder();
  static const int kTargetFolderFieldNumber = 4;
  inline const ::std::string& target_folder() const;
  inline void set_target_folder(const ::std::string& value);
  inline void set_target_folder(const char* value);
  inline void set_target_folder(const char* value, size_t size);
  inline ::std::string* mutable_target_folder();
  inline ::std::string* release_target_folder();
  inline void set_allocated_target_folder(::std::string* target_folder);

  // optional int32 num_items_per_batch = 5 [default = 1000];
  inline bool has_num_items_per_batch() const;
  inline void clear_num_items_per_batch();
  static const int kNumItemsPerBatchFieldNumber = 5;
  inline ::google::protobuf::int32 num_items_per_batch() const;
  inline void set_num_items_per_batch(::google::protobuf::int32 value);

  // optional bool use_unity_based_indices = 6 [default = true];
  inline bool has_use_unity_based_indices() const;
  inline void clear_use_unity_based_indices();
  static const int kUseUnityBasedIndicesFieldNumber = 6;
  inline bool use_unity_based_indices() const;
  inline void set_use_unity_based_indices(bool value);

  // optional .artm.CollectionParserConfig.NameType name_type = 7 [default = Guid];
  inline bool has_name_type() const;
  inline void clear_name_type();
  static const int kNameTypeFieldNumber = 7;
  inline ::artm::CollectionParserConfig_NameType name_type() const;
  inline void set_name_type(::artm::CollectionParserConfig_NameType value);

  // repeated string cooccurrence_token = 8;
  inline int cooccurrence_token_size() const;
  inline void clear_cooccurrence_token();
  static const int kCooccurrenceTokenFieldNumber = 8;
  inline const ::std::string& cooccurrence_token(int index) const;
  inline ::std::string* mutable_cooccurrence_token(int index);
  inline void set_cooccurrence_token(int index, const ::std::string& value);
  inline void set_cooccurrence_token(int index, const char* value);
  inline void set_cooccurrence_token(int index, const char* value, size_t size);
  inline ::std::string* add_cooccurrence_token();
  inline void add_cooccurrence_token(const ::std::string& value);
  inline void add_cooccurrence_token(const char* value);
  inline void add_cooccurrence_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cooccurrence_token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cooccurrence_token();

  // optional bool gather_cooc = 9;
  inline bool has_gather_cooc() const;
  inline void clear_gather_cooc();
  static const int kGatherCoocFieldNumber = 9;
  inline bool gather_cooc() const;
  inline void set_gather_cooc(bool value);

  // repeated string cooccurrence_class_id = 10;
  inline int cooccurrence_class_id_size() const;
  inline void clear_cooccurrence_class_id();
  static const int kCooccurrenceClassIdFieldNumber = 10;
  inline const ::std::string& cooccurrence_class_id(int index) const;
  inline ::std::string* mutable_cooccurrence_class_id(int index);
  inline void set_cooccurrence_class_id(int index, const ::std::string& value);
  inline void set_cooccurrence_class_id(int index, const char* value);
  inline void set_cooccurrence_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_cooccurrence_class_id();
  inline void add_cooccurrence_class_id(const ::std::string& value);
  inline void add_cooccurrence_class_id(const char* value);
  inline void add_cooccurrence_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cooccurrence_class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cooccurrence_class_id();

  // optional bool use_symmetric_cooc_values = 11 [default = false];
  inline bool has_use_symmetric_cooc_values() const;
  inline void clear_use_symmetric_cooc_values();
  static const int kUseSymmetricCoocValuesFieldNumber = 11;
  inline bool use_symmetric_cooc_values() const;
  inline void set_use_symmetric_cooc_values(bool value);

  // @@protoc_insertion_point(class_scope:artm.CollectionParserConfig)
 private:
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_docword_file_path();
  inline void clear_has_docword_file_path();
  inline void set_has_vocab_file_path();
  inline void clear_has_vocab_file_path();
  inline void set_has_target_folder();
  inline void clear_has_target_folder();
  inline void set_has_num_items_per_batch();
  inline void clear_has_num_items_per_batch();
  inline void set_has_use_unity_based_indices();
  inline void clear_has_use_unity_based_indices();
  inline void set_has_name_type();
  inline void clear_has_name_type();
  inline void set_has_gather_cooc();
  inline void clear_has_gather_cooc();
  inline void set_has_use_symmetric_cooc_values();
  inline void clear_has_use_symmetric_cooc_values();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* docword_file_path_;
  ::std::string* vocab_file_path_;
  int format_;
  ::google::protobuf::int32 num_items_per_batch_;
  ::std::string* target_folder_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cooccurrence_token_;
  int name_type_;
  bool use_unity_based_indices_;
  bool gather_cooc_;
  bool use_symmetric_cooc_values_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cooccurrence_class_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static CollectionParserConfig* default_instance_;
};
// -------------------------------------------------------------------

class InitializeModelArgs_Filter : public ::google::protobuf::Message {
 public:
  InitializeModelArgs_Filter();
  virtual ~InitializeModelArgs_Filter();

  InitializeModelArgs_Filter(const InitializeModelArgs_Filter& from);

  inline InitializeModelArgs_Filter& operator=(const InitializeModelArgs_Filter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitializeModelArgs_Filter& default_instance();

  void Swap(InitializeModelArgs_Filter* other);

  // implements Message ----------------------------------------------

  InitializeModelArgs_Filter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitializeModelArgs_Filter& from);
  void MergeFrom(const InitializeModelArgs_Filter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline const ::std::string& class_id() const;
  inline void set_class_id(const ::std::string& value);
  inline void set_class_id(const char* value);
  inline void set_class_id(const char* value, size_t size);
  inline ::std::string* mutable_class_id();
  inline ::std::string* release_class_id();
  inline void set_allocated_class_id(::std::string* class_id);

  // optional float min_percentage = 2;
  inline bool has_min_percentage() const;
  inline void clear_min_percentage();
  static const int kMinPercentageFieldNumber = 2;
  inline float min_percentage() const;
  inline void set_min_percentage(float value);

  // optional float max_percentage = 3;
  inline bool has_max_percentage() const;
  inline void clear_max_percentage();
  static const int kMaxPercentageFieldNumber = 3;
  inline float max_percentage() const;
  inline void set_max_percentage(float value);

  // optional int32 min_items = 4;
  inline bool has_min_items() const;
  inline void clear_min_items();
  static const int kMinItemsFieldNumber = 4;
  inline ::google::protobuf::int32 min_items() const;
  inline void set_min_items(::google::protobuf::int32 value);

  // optional int32 max_items = 5;
  inline bool has_max_items() const;
  inline void clear_max_items();
  static const int kMaxItemsFieldNumber = 5;
  inline ::google::protobuf::int32 max_items() const;
  inline void set_max_items(::google::protobuf::int32 value);

  // optional int32 min_total_count = 6;
  inline bool has_min_total_count() const;
  inline void clear_min_total_count();
  static const int kMinTotalCountFieldNumber = 6;
  inline ::google::protobuf::int32 min_total_count() const;
  inline void set_min_total_count(::google::protobuf::int32 value);

  // optional int32 min_one_item_count = 7;
  inline bool has_min_one_item_count() const;
  inline void clear_min_one_item_count();
  static const int kMinOneItemCountFieldNumber = 7;
  inline ::google::protobuf::int32 min_one_item_count() const;
  inline void set_min_one_item_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.InitializeModelArgs.Filter)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_min_percentage();
  inline void clear_has_min_percentage();
  inline void set_has_max_percentage();
  inline void clear_has_max_percentage();
  inline void set_has_min_items();
  inline void clear_has_min_items();
  inline void set_has_max_items();
  inline void clear_has_max_items();
  inline void set_has_min_total_count();
  inline void clear_has_min_total_count();
  inline void set_has_min_one_item_count();
  inline void clear_has_min_one_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* class_id_;
  float min_percentage_;
  float max_percentage_;
  ::google::protobuf::int32 min_items_;
  ::google::protobuf::int32 max_items_;
  ::google::protobuf::int32 min_total_count_;
  ::google::protobuf::int32 min_one_item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static InitializeModelArgs_Filter* default_instance_;
};
// -------------------------------------------------------------------

class InitializeModelArgs : public ::google::protobuf::Message {
 public:
  InitializeModelArgs();
  virtual ~InitializeModelArgs();

  InitializeModelArgs(const InitializeModelArgs& from);

  inline InitializeModelArgs& operator=(const InitializeModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitializeModelArgs& default_instance();

  void Swap(InitializeModelArgs* other);

  // implements Message ----------------------------------------------

  InitializeModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitializeModelArgs& from);
  void MergeFrom(const InitializeModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InitializeModelArgs_Filter Filter;

  typedef InitializeModelArgs_SourceType SourceType;
  static const SourceType Dictionary = InitializeModelArgs_SourceType_Dictionary;
  static const SourceType Batches = InitializeModelArgs_SourceType_Batches;
  static inline bool SourceType_IsValid(int value) {
    return InitializeModelArgs_SourceType_IsValid(value);
  }
  static const SourceType SourceType_MIN =
    InitializeModelArgs_SourceType_SourceType_MIN;
  static const SourceType SourceType_MAX =
    InitializeModelArgs_SourceType_SourceType_MAX;
  static const int SourceType_ARRAYSIZE =
    InitializeModelArgs_SourceType_SourceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SourceType_descriptor() {
    return InitializeModelArgs_SourceType_descriptor();
  }
  static inline const ::std::string& SourceType_Name(SourceType value) {
    return InitializeModelArgs_SourceType_Name(value);
  }
  static inline bool SourceType_Parse(const ::std::string& name,
      SourceType* value) {
    return InitializeModelArgs_SourceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional string dictionary_name = 2;
  inline bool has_dictionary_name() const;
  inline void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 2;
  inline const ::std::string& dictionary_name() const;
  inline void set_dictionary_name(const ::std::string& value);
  inline void set_dictionary_name(const char* value);
  inline void set_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_name();
  inline ::std::string* release_dictionary_name();
  inline void set_allocated_dictionary_name(::std::string* dictionary_name);

  // optional int32 topics_count = 3;
  inline bool has_topics_count() const;
  inline void clear_topics_count();
  static const int kTopicsCountFieldNumber = 3;
  inline ::google::protobuf::int32 topics_count() const;
  inline void set_topics_count(::google::protobuf::int32 value);

  // repeated string topic_name = 4;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 4;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // optional int32 seed = 5 [default = -1];
  inline bool has_seed() const;
  inline void clear_seed();
  static const int kSeedFieldNumber = 5;
  inline ::google::protobuf::int32 seed() const;
  inline void set_seed(::google::protobuf::int32 value);

  // optional .artm.InitializeModelArgs.SourceType source_type = 6;
  inline bool has_source_type() const;
  inline void clear_source_type();
  static const int kSourceTypeFieldNumber = 6;
  inline ::artm::InitializeModelArgs_SourceType source_type() const;
  inline void set_source_type(::artm::InitializeModelArgs_SourceType value);

  // optional string disk_path = 7;
  inline bool has_disk_path() const;
  inline void clear_disk_path();
  static const int kDiskPathFieldNumber = 7;
  inline const ::std::string& disk_path() const;
  inline void set_disk_path(const ::std::string& value);
  inline void set_disk_path(const char* value);
  inline void set_disk_path(const char* value, size_t size);
  inline ::std::string* mutable_disk_path();
  inline ::std::string* release_disk_path();
  inline void set_allocated_disk_path(::std::string* disk_path);

  // repeated .artm.InitializeModelArgs.Filter filter = 8;
  inline int filter_size() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 8;
  inline const ::artm::InitializeModelArgs_Filter& filter(int index) const;
  inline ::artm::InitializeModelArgs_Filter* mutable_filter(int index);
  inline ::artm::InitializeModelArgs_Filter* add_filter();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::InitializeModelArgs_Filter >&
      filter() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::InitializeModelArgs_Filter >*
      mutable_filter();

  // repeated string batch_filename = 9;
  inline int batch_filename_size() const;
  inline void clear_batch_filename();
  static const int kBatchFilenameFieldNumber = 9;
  inline const ::std::string& batch_filename(int index) const;
  inline ::std::string* mutable_batch_filename(int index);
  inline void set_batch_filename(int index, const ::std::string& value);
  inline void set_batch_filename(int index, const char* value);
  inline void set_batch_filename(int index, const char* value, size_t size);
  inline ::std::string* add_batch_filename();
  inline void add_batch_filename(const ::std::string& value);
  inline void add_batch_filename(const char* value);
  inline void add_batch_filename(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_filename() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_filename();

  // @@protoc_insertion_point(class_scope:artm.InitializeModelArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();
  inline void set_has_topics_count();
  inline void clear_has_topics_count();
  inline void set_has_seed();
  inline void clear_has_seed();
  inline void set_has_source_type();
  inline void clear_has_source_type();
  inline void set_has_disk_path();
  inline void clear_has_disk_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;
  ::std::string* dictionary_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::int32 topics_count_;
  ::google::protobuf::int32 seed_;
  ::std::string* disk_path_;
  ::google::protobuf::RepeatedPtrField< ::artm::InitializeModelArgs_Filter > filter_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_filename_;
  int source_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static InitializeModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class DictionaryData : public ::google::protobuf::Message {
 public:
  DictionaryData();
  virtual ~DictionaryData();

  DictionaryData(const DictionaryData& from);

  inline DictionaryData& operator=(const DictionaryData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictionaryData& default_instance();

  void Swap(DictionaryData* other);

  // implements Message ----------------------------------------------

  DictionaryData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictionaryData& from);
  void MergeFrom(const DictionaryData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string token = 2;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token(int index) const;
  inline ::std::string* mutable_token(int index);
  inline void set_token(int index, const ::std::string& value);
  inline void set_token(int index, const char* value);
  inline void set_token(int index, const char* value, size_t size);
  inline ::std::string* add_token();
  inline void add_token(const ::std::string& value);
  inline void add_token(const char* value);
  inline void add_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated string class_id = 3;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 3;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated float token_value = 4;
  inline int token_value_size() const;
  inline void clear_token_value();
  static const int kTokenValueFieldNumber = 4;
  inline float token_value(int index) const;
  inline void set_token_value(int index, float value);
  inline void add_token_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      token_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_token_value();

  // repeated float token_tf = 5;
  inline int token_tf_size() const;
  inline void clear_token_tf();
  static const int kTokenTfFieldNumber = 5;
  inline float token_tf(int index) const;
  inline void set_token_tf(int index, float value);
  inline void add_token_tf(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      token_tf() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_token_tf();

  // repeated float token_df = 6;
  inline int token_df_size() const;
  inline void clear_token_df();
  static const int kTokenDfFieldNumber = 6;
  inline float token_df(int index) const;
  inline void set_token_df(int index, float value);
  inline void add_token_df(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      token_df() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_token_df();

  // repeated int32 cooc_first_index = 7;
  inline int cooc_first_index_size() const;
  inline void clear_cooc_first_index();
  static const int kCoocFirstIndexFieldNumber = 7;
  inline ::google::protobuf::int32 cooc_first_index(int index) const;
  inline void set_cooc_first_index(int index, ::google::protobuf::int32 value);
  inline void add_cooc_first_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cooc_first_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cooc_first_index();

  // repeated int32 cooc_second_index = 8;
  inline int cooc_second_index_size() const;
  inline void clear_cooc_second_index();
  static const int kCoocSecondIndexFieldNumber = 8;
  inline ::google::protobuf::int32 cooc_second_index(int index) const;
  inline void set_cooc_second_index(int index, ::google::protobuf::int32 value);
  inline void add_cooc_second_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cooc_second_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cooc_second_index();

  // repeated float cooc_value = 9;
  inline int cooc_value_size() const;
  inline void clear_cooc_value();
  static const int kCoocValueFieldNumber = 9;
  inline float cooc_value(int index) const;
  inline void set_cooc_value(int index, float value);
  inline void add_cooc_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      cooc_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_cooc_value();

  // @@protoc_insertion_point(class_scope:artm.DictionaryData)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::RepeatedField< float > token_value_;
  ::google::protobuf::RepeatedField< float > token_tf_;
  ::google::protobuf::RepeatedField< float > token_df_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cooc_first_index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cooc_second_index_;
  ::google::protobuf::RepeatedField< float > cooc_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DictionaryData* default_instance_;
};
// -------------------------------------------------------------------

class FilterDictionaryArgs : public ::google::protobuf::Message {
 public:
  FilterDictionaryArgs();
  virtual ~FilterDictionaryArgs();

  FilterDictionaryArgs(const FilterDictionaryArgs& from);

  inline FilterDictionaryArgs& operator=(const FilterDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterDictionaryArgs& default_instance();

  void Swap(FilterDictionaryArgs* other);

  // implements Message ----------------------------------------------

  FilterDictionaryArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterDictionaryArgs& from);
  void MergeFrom(const FilterDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dictionary_name = 1;
  inline bool has_dictionary_name() const;
  inline void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 1;
  inline const ::std::string& dictionary_name() const;
  inline void set_dictionary_name(const ::std::string& value);
  inline void set_dictionary_name(const char* value);
  inline void set_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_name();
  inline ::std::string* release_dictionary_name();
  inline void set_allocated_dictionary_name(::std::string* dictionary_name);

  // optional string dictionary_target_name = 2;
  inline bool has_dictionary_target_name() const;
  inline void clear_dictionary_target_name();
  static const int kDictionaryTargetNameFieldNumber = 2;
  inline const ::std::string& dictionary_target_name() const;
  inline void set_dictionary_target_name(const ::std::string& value);
  inline void set_dictionary_target_name(const char* value);
  inline void set_dictionary_target_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_target_name();
  inline ::std::string* release_dictionary_target_name();
  inline void set_allocated_dictionary_target_name(::std::string* dictionary_target_name);

  // optional string class_id = 3;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 3;
  inline const ::std::string& class_id() const;
  inline void set_class_id(const ::std::string& value);
  inline void set_class_id(const char* value);
  inline void set_class_id(const char* value, size_t size);
  inline ::std::string* mutable_class_id();
  inline ::std::string* release_class_id();
  inline void set_allocated_class_id(::std::string* class_id);

  // optional float min_df = 4;
  inline bool has_min_df() const;
  inline void clear_min_df();
  static const int kMinDfFieldNumber = 4;
  inline float min_df() const;
  inline void set_min_df(float value);

  // optional float max_df = 5;
  inline bool has_max_df() const;
  inline void clear_max_df();
  static const int kMaxDfFieldNumber = 5;
  inline float max_df() const;
  inline void set_max_df(float value);

  // optional float min_df_rate = 6;
  inline bool has_min_df_rate() const;
  inline void clear_min_df_rate();
  static const int kMinDfRateFieldNumber = 6;
  inline float min_df_rate() const;
  inline void set_min_df_rate(float value);

  // optional float max_df_rate = 7;
  inline bool has_max_df_rate() const;
  inline void clear_max_df_rate();
  static const int kMaxDfRateFieldNumber = 7;
  inline float max_df_rate() const;
  inline void set_max_df_rate(float value);

  // optional float min_tf = 8;
  inline bool has_min_tf() const;
  inline void clear_min_tf();
  static const int kMinTfFieldNumber = 8;
  inline float min_tf() const;
  inline void set_min_tf(float value);

  // optional float max_tf = 9;
  inline bool has_max_tf() const;
  inline void clear_max_tf();
  static const int kMaxTfFieldNumber = 9;
  inline float max_tf() const;
  inline void set_max_tf(float value);

  // @@protoc_insertion_point(class_scope:artm.FilterDictionaryArgs)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();
  inline void set_has_dictionary_target_name();
  inline void clear_has_dictionary_target_name();
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_min_df();
  inline void clear_has_min_df();
  inline void set_has_max_df();
  inline void clear_has_max_df();
  inline void set_has_min_df_rate();
  inline void clear_has_min_df_rate();
  inline void set_has_max_df_rate();
  inline void clear_has_max_df_rate();
  inline void set_has_min_tf();
  inline void clear_has_min_tf();
  inline void set_has_max_tf();
  inline void clear_has_max_tf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dictionary_name_;
  ::std::string* dictionary_target_name_;
  ::std::string* class_id_;
  float min_df_;
  float max_df_;
  float min_df_rate_;
  float max_df_rate_;
  float min_tf_;
  float max_tf_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static FilterDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class GatherDictionaryArgs : public ::google::protobuf::Message {
 public:
  GatherDictionaryArgs();
  virtual ~GatherDictionaryArgs();

  GatherDictionaryArgs(const GatherDictionaryArgs& from);

  inline GatherDictionaryArgs& operator=(const GatherDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GatherDictionaryArgs& default_instance();

  void Swap(GatherDictionaryArgs* other);

  // implements Message ----------------------------------------------

  GatherDictionaryArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GatherDictionaryArgs& from);
  void MergeFrom(const GatherDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dictionary_target_name = 1;
  inline bool has_dictionary_target_name() const;
  inline void clear_dictionary_target_name();
  static const int kDictionaryTargetNameFieldNumber = 1;
  inline const ::std::string& dictionary_target_name() const;
  inline void set_dictionary_target_name(const ::std::string& value);
  inline void set_dictionary_target_name(const char* value);
  inline void set_dictionary_target_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_target_name();
  inline ::std::string* release_dictionary_target_name();
  inline void set_allocated_dictionary_target_name(::std::string* dictionary_target_name);

  // optional string data_path = 2;
  inline bool has_data_path() const;
  inline void clear_data_path();
  static const int kDataPathFieldNumber = 2;
  inline const ::std::string& data_path() const;
  inline void set_data_path(const ::std::string& value);
  inline void set_data_path(const char* value);
  inline void set_data_path(const char* value, size_t size);
  inline ::std::string* mutable_data_path();
  inline ::std::string* release_data_path();
  inline void set_allocated_data_path(::std::string* data_path);

  // optional string cooc_file_path = 3;
  inline bool has_cooc_file_path() const;
  inline void clear_cooc_file_path();
  static const int kCoocFilePathFieldNumber = 3;
  inline const ::std::string& cooc_file_path() const;
  inline void set_cooc_file_path(const ::std::string& value);
  inline void set_cooc_file_path(const char* value);
  inline void set_cooc_file_path(const char* value, size_t size);
  inline ::std::string* mutable_cooc_file_path();
  inline ::std::string* release_cooc_file_path();
  inline void set_allocated_cooc_file_path(::std::string* cooc_file_path);

  // optional string vocab_file_path = 4;
  inline bool has_vocab_file_path() const;
  inline void clear_vocab_file_path();
  static const int kVocabFilePathFieldNumber = 4;
  inline const ::std::string& vocab_file_path() const;
  inline void set_vocab_file_path(const ::std::string& value);
  inline void set_vocab_file_path(const char* value);
  inline void set_vocab_file_path(const char* value, size_t size);
  inline ::std::string* mutable_vocab_file_path();
  inline ::std::string* release_vocab_file_path();
  inline void set_allocated_vocab_file_path(::std::string* vocab_file_path);

  // optional bool symmetric_cooc_values = 5 [default = false];
  inline bool has_symmetric_cooc_values() const;
  inline void clear_symmetric_cooc_values();
  static const int kSymmetricCoocValuesFieldNumber = 5;
  inline bool symmetric_cooc_values() const;
  inline void set_symmetric_cooc_values(bool value);

  // repeated string batch_path = 6;
  inline int batch_path_size() const;
  inline void clear_batch_path();
  static const int kBatchPathFieldNumber = 6;
  inline const ::std::string& batch_path(int index) const;
  inline ::std::string* mutable_batch_path(int index);
  inline void set_batch_path(int index, const ::std::string& value);
  inline void set_batch_path(int index, const char* value);
  inline void set_batch_path(int index, const char* value, size_t size);
  inline ::std::string* add_batch_path();
  inline void add_batch_path(const ::std::string& value);
  inline void add_batch_path(const char* value);
  inline void add_batch_path(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_path() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_path();

  // @@protoc_insertion_point(class_scope:artm.GatherDictionaryArgs)
 private:
  inline void set_has_dictionary_target_name();
  inline void clear_has_dictionary_target_name();
  inline void set_has_data_path();
  inline void clear_has_data_path();
  inline void set_has_cooc_file_path();
  inline void clear_has_cooc_file_path();
  inline void set_has_vocab_file_path();
  inline void clear_has_vocab_file_path();
  inline void set_has_symmetric_cooc_values();
  inline void clear_has_symmetric_cooc_values();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dictionary_target_name_;
  ::std::string* data_path_;
  ::std::string* cooc_file_path_;
  ::std::string* vocab_file_path_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_path_;
  bool symmetric_cooc_values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GatherDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class GetDictionaryArgs : public ::google::protobuf::Message {
 public:
  GetDictionaryArgs();
  virtual ~GetDictionaryArgs();

  GetDictionaryArgs(const GetDictionaryArgs& from);

  inline GetDictionaryArgs& operator=(const GetDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDictionaryArgs& default_instance();

  void Swap(GetDictionaryArgs* other);

  // implements Message ----------------------------------------------

  GetDictionaryArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDictionaryArgs& from);
  void MergeFrom(const GetDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dictionary_name = 1;
  inline bool has_dictionary_name() const;
  inline void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 1;
  inline const ::std::string& dictionary_name() const;
  inline void set_dictionary_name(const ::std::string& value);
  inline void set_dictionary_name(const char* value);
  inline void set_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_name();
  inline ::std::string* release_dictionary_name();
  inline void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.GetDictionaryArgs)
 private:
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dictionary_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class GetTopicModelArgs : public ::google::protobuf::Message {
 public:
  GetTopicModelArgs();
  virtual ~GetTopicModelArgs();

  GetTopicModelArgs(const GetTopicModelArgs& from);

  inline GetTopicModelArgs& operator=(const GetTopicModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTopicModelArgs& default_instance();

  void Swap(GetTopicModelArgs* other);

  // implements Message ----------------------------------------------

  GetTopicModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTopicModelArgs& from);
  void MergeFrom(const GetTopicModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetTopicModelArgs_RequestType RequestType;
  static const RequestType Pwt = GetTopicModelArgs_RequestType_Pwt;
  static const RequestType Nwt = GetTopicModelArgs_RequestType_Nwt;
  static const RequestType TopicNames = GetTopicModelArgs_RequestType_TopicNames;
  static const RequestType Tokens = GetTopicModelArgs_RequestType_Tokens;
  static inline bool RequestType_IsValid(int value) {
    return GetTopicModelArgs_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    GetTopicModelArgs_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    GetTopicModelArgs_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    GetTopicModelArgs_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return GetTopicModelArgs_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return GetTopicModelArgs_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return GetTopicModelArgs_RequestType_Parse(name, value);
  }

  typedef GetTopicModelArgs_MatrixLayout MatrixLayout;
  static const MatrixLayout Dense = GetTopicModelArgs_MatrixLayout_Dense;
  static const MatrixLayout Sparse = GetTopicModelArgs_MatrixLayout_Sparse;
  static inline bool MatrixLayout_IsValid(int value) {
    return GetTopicModelArgs_MatrixLayout_IsValid(value);
  }
  static const MatrixLayout MatrixLayout_MIN =
    GetTopicModelArgs_MatrixLayout_MatrixLayout_MIN;
  static const MatrixLayout MatrixLayout_MAX =
    GetTopicModelArgs_MatrixLayout_MatrixLayout_MAX;
  static const int MatrixLayout_ARRAYSIZE =
    GetTopicModelArgs_MatrixLayout_MatrixLayout_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatrixLayout_descriptor() {
    return GetTopicModelArgs_MatrixLayout_descriptor();
  }
  static inline const ::std::string& MatrixLayout_Name(MatrixLayout value) {
    return GetTopicModelArgs_MatrixLayout_Name(value);
  }
  static inline bool MatrixLayout_Parse(const ::std::string& name,
      MatrixLayout* value) {
    return GetTopicModelArgs_MatrixLayout_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // repeated string topic_name = 2;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 2;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string token = 3;
  inline int token_size() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token(int index) const;
  inline ::std::string* mutable_token(int index);
  inline void set_token(int index, const ::std::string& value);
  inline void set_token(int index, const char* value);
  inline void set_token(int index, const char* value, size_t size);
  inline ::std::string* add_token();
  inline void add_token(const ::std::string& value);
  inline void add_token(const char* value);
  inline void add_token(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& token() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_token();

  // repeated string class_id = 4;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 4;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // optional bool use_sparse_format = 5;
  inline bool has_use_sparse_format() const;
  inline void clear_use_sparse_format();
  static const int kUseSparseFormatFieldNumber = 5;
  inline bool use_sparse_format() const;
  inline void set_use_sparse_format(bool value);

  // optional float eps = 6 [default = 1e-037];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 6;
  inline float eps() const;
  inline void set_eps(float value);

  // optional .artm.GetTopicModelArgs.RequestType request_type = 7 [default = Pwt];
  inline bool has_request_type() const;
  inline void clear_request_type();
  static const int kRequestTypeFieldNumber = 7;
  inline ::artm::GetTopicModelArgs_RequestType request_type() const;
  inline void set_request_type(::artm::GetTopicModelArgs_RequestType value);

  // optional .artm.GetTopicModelArgs.MatrixLayout matrix_layout = 8 [default = Dense];
  inline bool has_matrix_layout() const;
  inline void clear_matrix_layout();
  static const int kMatrixLayoutFieldNumber = 8;
  inline ::artm::GetTopicModelArgs_MatrixLayout matrix_layout() const;
  inline void set_matrix_layout(::artm::GetTopicModelArgs_MatrixLayout value);

  // @@protoc_insertion_point(class_scope:artm.GetTopicModelArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_use_sparse_format();
  inline void clear_has_use_sparse_format();
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_request_type();
  inline void clear_has_request_type();
  inline void set_has_matrix_layout();
  inline void clear_has_matrix_layout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> token_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  bool use_sparse_format_;
  float eps_;
  int request_type_;
  int matrix_layout_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetTopicModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class GetThetaMatrixArgs : public ::google::protobuf::Message {
 public:
  GetThetaMatrixArgs();
  virtual ~GetThetaMatrixArgs();

  GetThetaMatrixArgs(const GetThetaMatrixArgs& from);

  inline GetThetaMatrixArgs& operator=(const GetThetaMatrixArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetThetaMatrixArgs& default_instance();

  void Swap(GetThetaMatrixArgs* other);

  // implements Message ----------------------------------------------

  GetThetaMatrixArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetThetaMatrixArgs& from);
  void MergeFrom(const GetThetaMatrixArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetThetaMatrixArgs_MatrixLayout MatrixLayout;
  static const MatrixLayout Dense = GetThetaMatrixArgs_MatrixLayout_Dense;
  static const MatrixLayout Sparse = GetThetaMatrixArgs_MatrixLayout_Sparse;
  static inline bool MatrixLayout_IsValid(int value) {
    return GetThetaMatrixArgs_MatrixLayout_IsValid(value);
  }
  static const MatrixLayout MatrixLayout_MIN =
    GetThetaMatrixArgs_MatrixLayout_MatrixLayout_MIN;
  static const MatrixLayout MatrixLayout_MAX =
    GetThetaMatrixArgs_MatrixLayout_MatrixLayout_MAX;
  static const int MatrixLayout_ARRAYSIZE =
    GetThetaMatrixArgs_MatrixLayout_MatrixLayout_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatrixLayout_descriptor() {
    return GetThetaMatrixArgs_MatrixLayout_descriptor();
  }
  static inline const ::std::string& MatrixLayout_Name(MatrixLayout value) {
    return GetThetaMatrixArgs_MatrixLayout_Name(value);
  }
  static inline bool MatrixLayout_Parse(const ::std::string& name,
      MatrixLayout* value) {
    return GetThetaMatrixArgs_MatrixLayout_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string topic_name = 3;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 3;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated int32 topic_index = 4;
  inline int topic_index_size() const;
  inline void clear_topic_index();
  static const int kTopicIndexFieldNumber = 4;
  inline ::google::protobuf::int32 topic_index(int index) const;
  inline void set_topic_index(int index, ::google::protobuf::int32 value);
  inline void add_topic_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      topic_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_topic_index();

  // optional bool use_sparse_format = 6;
  inline bool has_use_sparse_format() const;
  inline void clear_use_sparse_format();
  static const int kUseSparseFormatFieldNumber = 6;
  inline bool use_sparse_format() const;
  inline void set_use_sparse_format(bool value);

  // optional float eps = 7 [default = 1e-037];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 7;
  inline float eps() const;
  inline void set_eps(float value);

  // optional .artm.GetThetaMatrixArgs.MatrixLayout matrix_layout = 8 [default = Dense];
  inline bool has_matrix_layout() const;
  inline void clear_matrix_layout();
  static const int kMatrixLayoutFieldNumber = 8;
  inline ::artm::GetThetaMatrixArgs_MatrixLayout matrix_layout() const;
  inline void set_matrix_layout(::artm::GetThetaMatrixArgs_MatrixLayout value);

  // @@protoc_insertion_point(class_scope:artm.GetThetaMatrixArgs)
 private:
  inline void set_has_use_sparse_format();
  inline void clear_has_use_sparse_format();
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_matrix_layout();
  inline void clear_has_matrix_layout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > topic_index_;
  bool use_sparse_format_;
  float eps_;
  int matrix_layout_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetThetaMatrixArgs* default_instance_;
};
// -------------------------------------------------------------------

class GetScoreValueArgs : public ::google::protobuf::Message {
 public:
  GetScoreValueArgs();
  virtual ~GetScoreValueArgs();

  GetScoreValueArgs(const GetScoreValueArgs& from);

  inline GetScoreValueArgs& operator=(const GetScoreValueArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetScoreValueArgs& default_instance();

  void Swap(GetScoreValueArgs* other);

  // implements Message ----------------------------------------------

  GetScoreValueArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetScoreValueArgs& from);
  void MergeFrom(const GetScoreValueArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // optional string score_name = 2;
  inline bool has_score_name() const;
  inline void clear_score_name();
  static const int kScoreNameFieldNumber = 2;
  inline const ::std::string& score_name() const;
  inline void set_score_name(const ::std::string& value);
  inline void set_score_name(const char* value);
  inline void set_score_name(const char* value, size_t size);
  inline ::std::string* mutable_score_name();
  inline ::std::string* release_score_name();
  inline void set_allocated_score_name(::std::string* score_name);

  // @@protoc_insertion_point(class_scope:artm.GetScoreValueArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_score_name();
  inline void clear_has_score_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;
  ::std::string* score_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetScoreValueArgs* default_instance_;
};
// -------------------------------------------------------------------

class GetScoreArrayArgs : public ::google::protobuf::Message {
 public:
  GetScoreArrayArgs();
  virtual ~GetScoreArrayArgs();

  GetScoreArrayArgs(const GetScoreArrayArgs& from);

  inline GetScoreArrayArgs& operator=(const GetScoreArrayArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetScoreArrayArgs& default_instance();

  void Swap(GetScoreArrayArgs* other);

  // implements Message ----------------------------------------------

  GetScoreArrayArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetScoreArrayArgs& from);
  void MergeFrom(const GetScoreArrayArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string score_name = 2;
  inline bool has_score_name() const;
  inline void clear_score_name();
  static const int kScoreNameFieldNumber = 2;
  inline const ::std::string& score_name() const;
  inline void set_score_name(const ::std::string& value);
  inline void set_score_name(const char* value);
  inline void set_score_name(const char* value, size_t size);
  inline ::std::string* mutable_score_name();
  inline ::std::string* release_score_name();
  inline void set_allocated_score_name(::std::string* score_name);

  // @@protoc_insertion_point(class_scope:artm.GetScoreArrayArgs)
 private:
  inline void set_has_score_name();
  inline void clear_has_score_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* score_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetScoreArrayArgs* default_instance_;
};
// -------------------------------------------------------------------

class ExportModelArgs : public ::google::protobuf::Message {
 public:
  ExportModelArgs();
  virtual ~ExportModelArgs();

  ExportModelArgs(const ExportModelArgs& from);

  inline ExportModelArgs& operator=(const ExportModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExportModelArgs& default_instance();

  void Swap(ExportModelArgs* other);

  // implements Message ----------------------------------------------

  ExportModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExportModelArgs& from);
  void MergeFrom(const ExportModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional string model_name = 2;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 2;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // @@protoc_insertion_point(class_scope:artm.ExportModelArgs)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_model_name();
  inline void clear_has_model_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_name_;
  ::std::string* model_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ExportModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class ImportModelArgs : public ::google::protobuf::Message {
 public:
  ImportModelArgs();
  virtual ~ImportModelArgs();

  ImportModelArgs(const ImportModelArgs& from);

  inline ImportModelArgs& operator=(const ImportModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportModelArgs& default_instance();

  void Swap(ImportModelArgs* other);

  // implements Message ----------------------------------------------

  ImportModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportModelArgs& from);
  void MergeFrom(const ImportModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional string model_name = 2;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 2;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // @@protoc_insertion_point(class_scope:artm.ImportModelArgs)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_model_name();
  inline void clear_has_model_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_name_;
  ::std::string* model_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ImportModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class AttachModelArgs : public ::google::protobuf::Message {
 public:
  AttachModelArgs();
  virtual ~AttachModelArgs();

  AttachModelArgs(const AttachModelArgs& from);

  inline AttachModelArgs& operator=(const AttachModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachModelArgs& default_instance();

  void Swap(AttachModelArgs* other);

  // implements Message ----------------------------------------------

  AttachModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttachModelArgs& from);
  void MergeFrom(const AttachModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  inline bool has_model_name() const;
  inline void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  inline const ::std::string& model_name() const;
  inline void set_model_name(const ::std::string& value);
  inline void set_model_name(const char* value);
  inline void set_model_name(const char* value, size_t size);
  inline ::std::string* mutable_model_name();
  inline ::std::string* release_model_name();
  inline void set_allocated_model_name(::std::string* model_name);

  // @@protoc_insertion_point(class_scope:artm.AttachModelArgs)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* model_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static AttachModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class ProcessBatchesArgs : public ::google::protobuf::Message {
 public:
  ProcessBatchesArgs();
  virtual ~ProcessBatchesArgs();

  ProcessBatchesArgs(const ProcessBatchesArgs& from);

  inline ProcessBatchesArgs& operator=(const ProcessBatchesArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessBatchesArgs& default_instance();

  void Swap(ProcessBatchesArgs* other);

  // implements Message ----------------------------------------------

  ProcessBatchesArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessBatchesArgs& from);
  void MergeFrom(const ProcessBatchesArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProcessBatchesArgs_ThetaMatrixType ThetaMatrixType;
  static const ThetaMatrixType None = ProcessBatchesArgs_ThetaMatrixType_None;
  static const ThetaMatrixType Dense = ProcessBatchesArgs_ThetaMatrixType_Dense;
  static const ThetaMatrixType Sparse = ProcessBatchesArgs_ThetaMatrixType_Sparse;
  static const ThetaMatrixType Cache = ProcessBatchesArgs_ThetaMatrixType_Cache;
  static const ThetaMatrixType DensePtdw = ProcessBatchesArgs_ThetaMatrixType_DensePtdw;
  static const ThetaMatrixType SparsePtdw = ProcessBatchesArgs_ThetaMatrixType_SparsePtdw;
  static inline bool ThetaMatrixType_IsValid(int value) {
    return ProcessBatchesArgs_ThetaMatrixType_IsValid(value);
  }
  static const ThetaMatrixType ThetaMatrixType_MIN =
    ProcessBatchesArgs_ThetaMatrixType_ThetaMatrixType_MIN;
  static const ThetaMatrixType ThetaMatrixType_MAX =
    ProcessBatchesArgs_ThetaMatrixType_ThetaMatrixType_MAX;
  static const int ThetaMatrixType_ARRAYSIZE =
    ProcessBatchesArgs_ThetaMatrixType_ThetaMatrixType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ThetaMatrixType_descriptor() {
    return ProcessBatchesArgs_ThetaMatrixType_descriptor();
  }
  static inline const ::std::string& ThetaMatrixType_Name(ThetaMatrixType value) {
    return ProcessBatchesArgs_ThetaMatrixType_Name(value);
  }
  static inline bool ThetaMatrixType_Parse(const ::std::string& name,
      ThetaMatrixType* value) {
    return ProcessBatchesArgs_ThetaMatrixType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string nwt_target_name = 1;
  inline bool has_nwt_target_name() const;
  inline void clear_nwt_target_name();
  static const int kNwtTargetNameFieldNumber = 1;
  inline const ::std::string& nwt_target_name() const;
  inline void set_nwt_target_name(const ::std::string& value);
  inline void set_nwt_target_name(const char* value);
  inline void set_nwt_target_name(const char* value, size_t size);
  inline ::std::string* mutable_nwt_target_name();
  inline ::std::string* release_nwt_target_name();
  inline void set_allocated_nwt_target_name(::std::string* nwt_target_name);

  // repeated string batch_filename = 2;
  inline int batch_filename_size() const;
  inline void clear_batch_filename();
  static const int kBatchFilenameFieldNumber = 2;
  inline const ::std::string& batch_filename(int index) const;
  inline ::std::string* mutable_batch_filename(int index);
  inline void set_batch_filename(int index, const ::std::string& value);
  inline void set_batch_filename(int index, const char* value);
  inline void set_batch_filename(int index, const char* value, size_t size);
  inline ::std::string* add_batch_filename();
  inline void add_batch_filename(const ::std::string& value);
  inline void add_batch_filename(const char* value);
  inline void add_batch_filename(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_filename() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_filename();

  // optional string pwt_source_name = 3;
  inline bool has_pwt_source_name() const;
  inline void clear_pwt_source_name();
  static const int kPwtSourceNameFieldNumber = 3;
  inline const ::std::string& pwt_source_name() const;
  inline void set_pwt_source_name(const ::std::string& value);
  inline void set_pwt_source_name(const char* value);
  inline void set_pwt_source_name(const char* value, size_t size);
  inline ::std::string* mutable_pwt_source_name();
  inline ::std::string* release_pwt_source_name();
  inline void set_allocated_pwt_source_name(::std::string* pwt_source_name);

  // optional int32 inner_iterations_count = 4 [default = 10];
  inline bool has_inner_iterations_count() const;
  inline void clear_inner_iterations_count();
  static const int kInnerIterationsCountFieldNumber = 4;
  inline ::google::protobuf::int32 inner_iterations_count() const;
  inline void set_inner_iterations_count(::google::protobuf::int32 value);

  // repeated string regularizer_name = 6;
  inline int regularizer_name_size() const;
  inline void clear_regularizer_name();
  static const int kRegularizerNameFieldNumber = 6;
  inline const ::std::string& regularizer_name(int index) const;
  inline ::std::string* mutable_regularizer_name(int index);
  inline void set_regularizer_name(int index, const ::std::string& value);
  inline void set_regularizer_name(int index, const char* value);
  inline void set_regularizer_name(int index, const char* value, size_t size);
  inline ::std::string* add_regularizer_name();
  inline void add_regularizer_name(const ::std::string& value);
  inline void add_regularizer_name(const char* value);
  inline void add_regularizer_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& regularizer_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_regularizer_name();

  // repeated double regularizer_tau = 7;
  inline int regularizer_tau_size() const;
  inline void clear_regularizer_tau();
  static const int kRegularizerTauFieldNumber = 7;
  inline double regularizer_tau(int index) const;
  inline void set_regularizer_tau(int index, double value);
  inline void add_regularizer_tau(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      regularizer_tau() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_regularizer_tau();

  // repeated string class_id = 8;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 8;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated float class_weight = 9;
  inline int class_weight_size() const;
  inline void clear_class_weight();
  static const int kClassWeightFieldNumber = 9;
  inline float class_weight(int index) const;
  inline void set_class_weight(int index, float value);
  inline void add_class_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      class_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_class_weight();

  // optional bool reuse_theta = 10 [default = false];
  inline bool has_reuse_theta() const;
  inline void clear_reuse_theta();
  static const int kReuseThetaFieldNumber = 10;
  inline bool reuse_theta() const;
  inline void set_reuse_theta(bool value);

  // optional bool opt_for_avx = 11 [default = true];
  inline bool has_opt_for_avx() const;
  inline void clear_opt_for_avx();
  static const int kOptForAvxFieldNumber = 11;
  inline bool opt_for_avx() const;
  inline void set_opt_for_avx(bool value);

  // optional .artm.ProcessBatchesArgs.ThetaMatrixType theta_matrix_type = 14 [default = Cache];
  inline bool has_theta_matrix_type() const;
  inline void clear_theta_matrix_type();
  static const int kThetaMatrixTypeFieldNumber = 14;
  inline ::artm::ProcessBatchesArgs_ThetaMatrixType theta_matrix_type() const;
  inline void set_theta_matrix_type(::artm::ProcessBatchesArgs_ThetaMatrixType value);

  // repeated float batch_weight = 15;
  inline int batch_weight_size() const;
  inline void clear_batch_weight();
  static const int kBatchWeightFieldNumber = 15;
  inline float batch_weight(int index) const;
  inline void set_batch_weight(int index, float value);
  inline void add_batch_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      batch_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_batch_weight();

  // optional string predict_class_id = 17;
  inline bool has_predict_class_id() const;
  inline void clear_predict_class_id();
  static const int kPredictClassIdFieldNumber = 17;
  inline const ::std::string& predict_class_id() const;
  inline void set_predict_class_id(const ::std::string& value);
  inline void set_predict_class_id(const char* value);
  inline void set_predict_class_id(const char* value, size_t size);
  inline ::std::string* mutable_predict_class_id();
  inline ::std::string* release_predict_class_id();
  inline void set_allocated_predict_class_id(::std::string* predict_class_id);

  // repeated .artm.Batch batch = 18;
  inline int batch_size() const;
  inline void clear_batch();
  static const int kBatchFieldNumber = 18;
  inline const ::artm::Batch& batch(int index) const;
  inline ::artm::Batch* mutable_batch(int index);
  inline ::artm::Batch* add_batch();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
      batch() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
      mutable_batch();

  // optional bool use_random_theta = 19 [default = false];
  inline bool has_use_random_theta() const;
  inline void clear_use_random_theta();
  static const int kUseRandomThetaFieldNumber = 19;
  inline bool use_random_theta() const;
  inline void set_use_random_theta(bool value);

  // repeated string topic_name = 20;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 20;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // @@protoc_insertion_point(class_scope:artm.ProcessBatchesArgs)
 private:
  inline void set_has_nwt_target_name();
  inline void clear_has_nwt_target_name();
  inline void set_has_pwt_source_name();
  inline void clear_has_pwt_source_name();
  inline void set_has_inner_iterations_count();
  inline void clear_has_inner_iterations_count();
  inline void set_has_reuse_theta();
  inline void clear_has_reuse_theta();
  inline void set_has_opt_for_avx();
  inline void clear_has_opt_for_avx();
  inline void set_has_theta_matrix_type();
  inline void clear_has_theta_matrix_type();
  inline void set_has_predict_class_id();
  inline void clear_has_predict_class_id();
  inline void set_has_use_random_theta();
  inline void clear_has_use_random_theta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nwt_target_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_filename_;
  ::std::string* pwt_source_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> regularizer_name_;
  ::google::protobuf::RepeatedField< double > regularizer_tau_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::int32 inner_iterations_count_;
  int theta_matrix_type_;
  ::google::protobuf::RepeatedField< float > class_weight_;
  ::google::protobuf::RepeatedField< float > batch_weight_;
  ::std::string* predict_class_id_;
  ::google::protobuf::RepeatedPtrField< ::artm::Batch > batch_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  bool reuse_theta_;
  bool opt_for_avx_;
  bool use_random_theta_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ProcessBatchesArgs* default_instance_;
};
// -------------------------------------------------------------------

class ProcessBatchesResult : public ::google::protobuf::Message {
 public:
  ProcessBatchesResult();
  virtual ~ProcessBatchesResult();

  ProcessBatchesResult(const ProcessBatchesResult& from);

  inline ProcessBatchesResult& operator=(const ProcessBatchesResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessBatchesResult& default_instance();

  void Swap(ProcessBatchesResult* other);

  // implements Message ----------------------------------------------

  ProcessBatchesResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessBatchesResult& from);
  void MergeFrom(const ProcessBatchesResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .artm.ScoreData score_data = 1;
  inline int score_data_size() const;
  inline void clear_score_data();
  static const int kScoreDataFieldNumber = 1;
  inline const ::artm::ScoreData& score_data(int index) const;
  inline ::artm::ScoreData* mutable_score_data(int index);
  inline ::artm::ScoreData* add_score_data();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >&
      score_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >*
      mutable_score_data();

  // optional .artm.ThetaMatrix theta_matrix = 2;
  inline bool has_theta_matrix() const;
  inline void clear_theta_matrix();
  static const int kThetaMatrixFieldNumber = 2;
  inline const ::artm::ThetaMatrix& theta_matrix() const;
  inline ::artm::ThetaMatrix* mutable_theta_matrix();
  inline ::artm::ThetaMatrix* release_theta_matrix();
  inline void set_allocated_theta_matrix(::artm::ThetaMatrix* theta_matrix);

  // @@protoc_insertion_point(class_scope:artm.ProcessBatchesResult)
 private:
  inline void set_has_theta_matrix();
  inline void clear_has_theta_matrix();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::artm::ScoreData > score_data_;
  ::artm::ThetaMatrix* theta_matrix_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ProcessBatchesResult* default_instance_;
};
// -------------------------------------------------------------------

class MergeModelArgs : public ::google::protobuf::Message {
 public:
  MergeModelArgs();
  virtual ~MergeModelArgs();

  MergeModelArgs(const MergeModelArgs& from);

  inline MergeModelArgs& operator=(const MergeModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeModelArgs& default_instance();

  void Swap(MergeModelArgs* other);

  // implements Message ----------------------------------------------

  MergeModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MergeModelArgs& from);
  void MergeFrom(const MergeModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nwt_target_name = 1;
  inline bool has_nwt_target_name() const;
  inline void clear_nwt_target_name();
  static const int kNwtTargetNameFieldNumber = 1;
  inline const ::std::string& nwt_target_name() const;
  inline void set_nwt_target_name(const ::std::string& value);
  inline void set_nwt_target_name(const char* value);
  inline void set_nwt_target_name(const char* value, size_t size);
  inline ::std::string* mutable_nwt_target_name();
  inline ::std::string* release_nwt_target_name();
  inline void set_allocated_nwt_target_name(::std::string* nwt_target_name);

  // repeated string nwt_source_name = 2;
  inline int nwt_source_name_size() const;
  inline void clear_nwt_source_name();
  static const int kNwtSourceNameFieldNumber = 2;
  inline const ::std::string& nwt_source_name(int index) const;
  inline ::std::string* mutable_nwt_source_name(int index);
  inline void set_nwt_source_name(int index, const ::std::string& value);
  inline void set_nwt_source_name(int index, const char* value);
  inline void set_nwt_source_name(int index, const char* value, size_t size);
  inline ::std::string* add_nwt_source_name();
  inline void add_nwt_source_name(const ::std::string& value);
  inline void add_nwt_source_name(const char* value);
  inline void add_nwt_source_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nwt_source_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nwt_source_name();

  // repeated float source_weight = 3;
  inline int source_weight_size() const;
  inline void clear_source_weight();
  static const int kSourceWeightFieldNumber = 3;
  inline float source_weight(int index) const;
  inline void set_source_weight(int index, float value);
  inline void add_source_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      source_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_source_weight();

  // repeated string topic_name = 4;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 4;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // @@protoc_insertion_point(class_scope:artm.MergeModelArgs)
 private:
  inline void set_has_nwt_target_name();
  inline void clear_has_nwt_target_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nwt_target_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nwt_source_name_;
  ::google::protobuf::RepeatedField< float > source_weight_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MergeModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class RegularizeModelArgs : public ::google::protobuf::Message {
 public:
  RegularizeModelArgs();
  virtual ~RegularizeModelArgs();

  RegularizeModelArgs(const RegularizeModelArgs& from);

  inline RegularizeModelArgs& operator=(const RegularizeModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegularizeModelArgs& default_instance();

  void Swap(RegularizeModelArgs* other);

  // implements Message ----------------------------------------------

  RegularizeModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegularizeModelArgs& from);
  void MergeFrom(const RegularizeModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string rwt_target_name = 1;
  inline bool has_rwt_target_name() const;
  inline void clear_rwt_target_name();
  static const int kRwtTargetNameFieldNumber = 1;
  inline const ::std::string& rwt_target_name() const;
  inline void set_rwt_target_name(const ::std::string& value);
  inline void set_rwt_target_name(const char* value);
  inline void set_rwt_target_name(const char* value, size_t size);
  inline ::std::string* mutable_rwt_target_name();
  inline ::std::string* release_rwt_target_name();
  inline void set_allocated_rwt_target_name(::std::string* rwt_target_name);

  // optional string pwt_source_name = 2;
  inline bool has_pwt_source_name() const;
  inline void clear_pwt_source_name();
  static const int kPwtSourceNameFieldNumber = 2;
  inline const ::std::string& pwt_source_name() const;
  inline void set_pwt_source_name(const ::std::string& value);
  inline void set_pwt_source_name(const char* value);
  inline void set_pwt_source_name(const char* value, size_t size);
  inline ::std::string* mutable_pwt_source_name();
  inline ::std::string* release_pwt_source_name();
  inline void set_allocated_pwt_source_name(::std::string* pwt_source_name);

  // optional string nwt_source_name = 3;
  inline bool has_nwt_source_name() const;
  inline void clear_nwt_source_name();
  static const int kNwtSourceNameFieldNumber = 3;
  inline const ::std::string& nwt_source_name() const;
  inline void set_nwt_source_name(const ::std::string& value);
  inline void set_nwt_source_name(const char* value);
  inline void set_nwt_source_name(const char* value, size_t size);
  inline ::std::string* mutable_nwt_source_name();
  inline ::std::string* release_nwt_source_name();
  inline void set_allocated_nwt_source_name(::std::string* nwt_source_name);

  // repeated .artm.RegularizerSettings regularizer_settings = 4;
  inline int regularizer_settings_size() const;
  inline void clear_regularizer_settings();
  static const int kRegularizerSettingsFieldNumber = 4;
  inline const ::artm::RegularizerSettings& regularizer_settings(int index) const;
  inline ::artm::RegularizerSettings* mutable_regularizer_settings(int index);
  inline ::artm::RegularizerSettings* add_regularizer_settings();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings >&
      regularizer_settings() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings >*
      mutable_regularizer_settings();

  // @@protoc_insertion_point(class_scope:artm.RegularizeModelArgs)
 private:
  inline void set_has_rwt_target_name();
  inline void clear_has_rwt_target_name();
  inline void set_has_pwt_source_name();
  inline void clear_has_pwt_source_name();
  inline void set_has_nwt_source_name();
  inline void clear_has_nwt_source_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rwt_target_name_;
  ::std::string* pwt_source_name_;
  ::std::string* nwt_source_name_;
  ::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings > regularizer_settings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static RegularizeModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class NormalizeModelArgs : public ::google::protobuf::Message {
 public:
  NormalizeModelArgs();
  virtual ~NormalizeModelArgs();

  NormalizeModelArgs(const NormalizeModelArgs& from);

  inline NormalizeModelArgs& operator=(const NormalizeModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalizeModelArgs& default_instance();

  void Swap(NormalizeModelArgs* other);

  // implements Message ----------------------------------------------

  NormalizeModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalizeModelArgs& from);
  void MergeFrom(const NormalizeModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pwt_target_name = 1;
  inline bool has_pwt_target_name() const;
  inline void clear_pwt_target_name();
  static const int kPwtTargetNameFieldNumber = 1;
  inline const ::std::string& pwt_target_name() const;
  inline void set_pwt_target_name(const ::std::string& value);
  inline void set_pwt_target_name(const char* value);
  inline void set_pwt_target_name(const char* value, size_t size);
  inline ::std::string* mutable_pwt_target_name();
  inline ::std::string* release_pwt_target_name();
  inline void set_allocated_pwt_target_name(::std::string* pwt_target_name);

  // optional string nwt_source_name = 2;
  inline bool has_nwt_source_name() const;
  inline void clear_nwt_source_name();
  static const int kNwtSourceNameFieldNumber = 2;
  inline const ::std::string& nwt_source_name() const;
  inline void set_nwt_source_name(const ::std::string& value);
  inline void set_nwt_source_name(const char* value);
  inline void set_nwt_source_name(const char* value, size_t size);
  inline ::std::string* mutable_nwt_source_name();
  inline ::std::string* release_nwt_source_name();
  inline void set_allocated_nwt_source_name(::std::string* nwt_source_name);

  // optional string rwt_source_name = 3;
  inline bool has_rwt_source_name() const;
  inline void clear_rwt_source_name();
  static const int kRwtSourceNameFieldNumber = 3;
  inline const ::std::string& rwt_source_name() const;
  inline void set_rwt_source_name(const ::std::string& value);
  inline void set_rwt_source_name(const char* value);
  inline void set_rwt_source_name(const char* value, size_t size);
  inline ::std::string* mutable_rwt_source_name();
  inline ::std::string* release_rwt_source_name();
  inline void set_allocated_rwt_source_name(::std::string* rwt_source_name);

  // @@protoc_insertion_point(class_scope:artm.NormalizeModelArgs)
 private:
  inline void set_has_pwt_target_name();
  inline void clear_has_pwt_target_name();
  inline void set_has_nwt_source_name();
  inline void clear_has_nwt_source_name();
  inline void set_has_rwt_source_name();
  inline void clear_has_rwt_source_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pwt_target_name_;
  ::std::string* nwt_source_name_;
  ::std::string* rwt_source_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static NormalizeModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class ImportDictionaryArgs : public ::google::protobuf::Message {
 public:
  ImportDictionaryArgs();
  virtual ~ImportDictionaryArgs();

  ImportDictionaryArgs(const ImportDictionaryArgs& from);

  inline ImportDictionaryArgs& operator=(const ImportDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportDictionaryArgs& default_instance();

  void Swap(ImportDictionaryArgs* other);

  // implements Message ----------------------------------------------

  ImportDictionaryArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportDictionaryArgs& from);
  void MergeFrom(const ImportDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional string dictionary_name = 2;
  inline bool has_dictionary_name() const;
  inline void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 2;
  inline const ::std::string& dictionary_name() const;
  inline void set_dictionary_name(const ::std::string& value);
  inline void set_dictionary_name(const char* value);
  inline void set_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_name();
  inline ::std::string* release_dictionary_name();
  inline void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.ImportDictionaryArgs)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_name_;
  ::std::string* dictionary_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ImportDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class ExportDictionaryArgs : public ::google::protobuf::Message {
 public:
  ExportDictionaryArgs();
  virtual ~ExportDictionaryArgs();

  ExportDictionaryArgs(const ExportDictionaryArgs& from);

  inline ExportDictionaryArgs& operator=(const ExportDictionaryArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExportDictionaryArgs& default_instance();

  void Swap(ExportDictionaryArgs* other);

  // implements Message ----------------------------------------------

  ExportDictionaryArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExportDictionaryArgs& from);
  void MergeFrom(const ExportDictionaryArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional string dictionary_name = 2;
  inline bool has_dictionary_name() const;
  inline void clear_dictionary_name();
  static const int kDictionaryNameFieldNumber = 2;
  inline const ::std::string& dictionary_name() const;
  inline void set_dictionary_name(const ::std::string& value);
  inline void set_dictionary_name(const char* value);
  inline void set_dictionary_name(const char* value, size_t size);
  inline ::std::string* mutable_dictionary_name();
  inline ::std::string* release_dictionary_name();
  inline void set_allocated_dictionary_name(::std::string* dictionary_name);

  // @@protoc_insertion_point(class_scope:artm.ExportDictionaryArgs)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_dictionary_name();
  inline void clear_has_dictionary_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_name_;
  ::std::string* dictionary_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ExportDictionaryArgs* default_instance_;
};
// -------------------------------------------------------------------

class CopyRequestResultArgs : public ::google::protobuf::Message {
 public:
  CopyRequestResultArgs();
  virtual ~CopyRequestResultArgs();

  CopyRequestResultArgs(const CopyRequestResultArgs& from);

  inline CopyRequestResultArgs& operator=(const CopyRequestResultArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CopyRequestResultArgs& default_instance();

  void Swap(CopyRequestResultArgs* other);

  // implements Message ----------------------------------------------

  CopyRequestResultArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CopyRequestResultArgs& from);
  void MergeFrom(const CopyRequestResultArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CopyRequestResultArgs_RequestType RequestType;
  static const RequestType DefaultRequestType = CopyRequestResultArgs_RequestType_DefaultRequestType;
  static const RequestType GetThetaSecondPass = CopyRequestResultArgs_RequestType_GetThetaSecondPass;
  static const RequestType GetModelSecondPass = CopyRequestResultArgs_RequestType_GetModelSecondPass;
  static inline bool RequestType_IsValid(int value) {
    return CopyRequestResultArgs_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    CopyRequestResultArgs_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    CopyRequestResultArgs_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    CopyRequestResultArgs_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return CopyRequestResultArgs_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return CopyRequestResultArgs_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return CopyRequestResultArgs_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .artm.CopyRequestResultArgs.RequestType request_type = 1 [default = DefaultRequestType];
  inline bool has_request_type() const;
  inline void clear_request_type();
  static const int kRequestTypeFieldNumber = 1;
  inline ::artm::CopyRequestResultArgs_RequestType request_type() const;
  inline void set_request_type(::artm::CopyRequestResultArgs_RequestType value);

  // @@protoc_insertion_point(class_scope:artm.CopyRequestResultArgs)
 private:
  inline void set_has_request_type();
  inline void clear_has_request_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int request_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static CopyRequestResultArgs* default_instance_;
};
// -------------------------------------------------------------------

class DuplicateMasterComponentArgs : public ::google::protobuf::Message {
 public:
  DuplicateMasterComponentArgs();
  virtual ~DuplicateMasterComponentArgs();

  DuplicateMasterComponentArgs(const DuplicateMasterComponentArgs& from);

  inline DuplicateMasterComponentArgs& operator=(const DuplicateMasterComponentArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DuplicateMasterComponentArgs& default_instance();

  void Swap(DuplicateMasterComponentArgs* other);

  // implements Message ----------------------------------------------

  DuplicateMasterComponentArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DuplicateMasterComponentArgs& from);
  void MergeFrom(const DuplicateMasterComponentArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.DuplicateMasterComponentArgs)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static DuplicateMasterComponentArgs* default_instance_;
};
// -------------------------------------------------------------------

class GetMasterComponentInfoArgs : public ::google::protobuf::Message {
 public:
  GetMasterComponentInfoArgs();
  virtual ~GetMasterComponentInfoArgs();

  GetMasterComponentInfoArgs(const GetMasterComponentInfoArgs& from);

  inline GetMasterComponentInfoArgs& operator=(const GetMasterComponentInfoArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMasterComponentInfoArgs& default_instance();

  void Swap(GetMasterComponentInfoArgs* other);

  // implements Message ----------------------------------------------

  GetMasterComponentInfoArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMasterComponentInfoArgs& from);
  void MergeFrom(const GetMasterComponentInfoArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.GetMasterComponentInfoArgs)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static GetMasterComponentInfoArgs* default_instance_;
};
// -------------------------------------------------------------------

class MasterComponentInfo_RegularizerInfo : public ::google::protobuf::Message {
 public:
  MasterComponentInfo_RegularizerInfo();
  virtual ~MasterComponentInfo_RegularizerInfo();

  MasterComponentInfo_RegularizerInfo(const MasterComponentInfo_RegularizerInfo& from);

  inline MasterComponentInfo_RegularizerInfo& operator=(const MasterComponentInfo_RegularizerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_RegularizerInfo& default_instance();

  void Swap(MasterComponentInfo_RegularizerInfo* other);

  // implements Message ----------------------------------------------

  MasterComponentInfo_RegularizerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_RegularizerInfo& from);
  void MergeFrom(const MasterComponentInfo_RegularizerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.RegularizerInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_RegularizerInfo* default_instance_;
};
// -------------------------------------------------------------------

class MasterComponentInfo_ScoreInfo : public ::google::protobuf::Message {
 public:
  MasterComponentInfo_ScoreInfo();
  virtual ~MasterComponentInfo_ScoreInfo();

  MasterComponentInfo_ScoreInfo(const MasterComponentInfo_ScoreInfo& from);

  inline MasterComponentInfo_ScoreInfo& operator=(const MasterComponentInfo_ScoreInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_ScoreInfo& default_instance();

  void Swap(MasterComponentInfo_ScoreInfo* other);

  // implements Message ----------------------------------------------

  MasterComponentInfo_ScoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_ScoreInfo& from);
  void MergeFrom(const MasterComponentInfo_ScoreInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.ScoreInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_ScoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class MasterComponentInfo_DictionaryInfo : public ::google::protobuf::Message {
 public:
  MasterComponentInfo_DictionaryInfo();
  virtual ~MasterComponentInfo_DictionaryInfo();

  MasterComponentInfo_DictionaryInfo(const MasterComponentInfo_DictionaryInfo& from);

  inline MasterComponentInfo_DictionaryInfo& operator=(const MasterComponentInfo_DictionaryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_DictionaryInfo& default_instance();

  void Swap(MasterComponentInfo_DictionaryInfo* other);

  // implements Message ----------------------------------------------

  MasterComponentInfo_DictionaryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_DictionaryInfo& from);
  void MergeFrom(const MasterComponentInfo_DictionaryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 entries_count = 2;
  inline bool has_entries_count() const;
  inline void clear_entries_count();
  static const int kEntriesCountFieldNumber = 2;
  inline ::google::protobuf::int64 entries_count() const;
  inline void set_entries_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.DictionaryInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_entries_count();
  inline void clear_has_entries_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int64 entries_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_DictionaryInfo* default_instance_;
};
// -------------------------------------------------------------------

class MasterComponentInfo_BatchInfo : public ::google::protobuf::Message {
 public:
  MasterComponentInfo_BatchInfo();
  virtual ~MasterComponentInfo_BatchInfo();

  MasterComponentInfo_BatchInfo(const MasterComponentInfo_BatchInfo& from);

  inline MasterComponentInfo_BatchInfo& operator=(const MasterComponentInfo_BatchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_BatchInfo& default_instance();

  void Swap(MasterComponentInfo_BatchInfo* other);

  // implements Message ----------------------------------------------

  MasterComponentInfo_BatchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_BatchInfo& from);
  void MergeFrom(const MasterComponentInfo_BatchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 items_count = 2;
  inline bool has_items_count() const;
  inline void clear_items_count();
  static const int kItemsCountFieldNumber = 2;
  inline ::google::protobuf::int32 items_count() const;
  inline void set_items_count(::google::protobuf::int32 value);

  // optional int32 token_count = 3;
  inline bool has_token_count() const;
  inline void clear_token_count();
  static const int kTokenCountFieldNumber = 3;
  inline ::google::protobuf::int32 token_count() const;
  inline void set_token_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.BatchInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_items_count();
  inline void clear_has_items_count();
  inline void set_has_token_count();
  inline void clear_has_token_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 items_count_;
  ::google::protobuf::int32 token_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_BatchInfo* default_instance_;
};
// -------------------------------------------------------------------

class MasterComponentInfo_ModelInfo : public ::google::protobuf::Message {
 public:
  MasterComponentInfo_ModelInfo();
  virtual ~MasterComponentInfo_ModelInfo();

  MasterComponentInfo_ModelInfo(const MasterComponentInfo_ModelInfo& from);

  inline MasterComponentInfo_ModelInfo& operator=(const MasterComponentInfo_ModelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_ModelInfo& default_instance();

  void Swap(MasterComponentInfo_ModelInfo* other);

  // implements Message ----------------------------------------------

  MasterComponentInfo_ModelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_ModelInfo& from);
  void MergeFrom(const MasterComponentInfo_ModelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional int32 topics_count = 3;
  inline bool has_topics_count() const;
  inline void clear_topics_count();
  static const int kTopicsCountFieldNumber = 3;
  inline ::google::protobuf::int32 topics_count() const;
  inline void set_topics_count(::google::protobuf::int32 value);

  // optional int32 token_count = 4;
  inline bool has_token_count() const;
  inline void clear_token_count();
  static const int kTokenCountFieldNumber = 4;
  inline ::google::protobuf::int32 token_count() const;
  inline void set_token_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.ModelInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_topics_count();
  inline void clear_has_topics_count();
  inline void set_has_token_count();
  inline void clear_has_token_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::int32 topics_count_;
  ::google::protobuf::int32 token_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_ModelInfo* default_instance_;
};
// -------------------------------------------------------------------

class MasterComponentInfo_CacheEntryInfo : public ::google::protobuf::Message {
 public:
  MasterComponentInfo_CacheEntryInfo();
  virtual ~MasterComponentInfo_CacheEntryInfo();

  MasterComponentInfo_CacheEntryInfo(const MasterComponentInfo_CacheEntryInfo& from);

  inline MasterComponentInfo_CacheEntryInfo& operator=(const MasterComponentInfo_CacheEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo_CacheEntryInfo& default_instance();

  void Swap(MasterComponentInfo_CacheEntryInfo* other);

  // implements Message ----------------------------------------------

  MasterComponentInfo_CacheEntryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo_CacheEntryInfo& from);
  void MergeFrom(const MasterComponentInfo_CacheEntryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional int32 byte_size = 2;
  inline bool has_byte_size() const;
  inline void clear_byte_size();
  static const int kByteSizeFieldNumber = 2;
  inline ::google::protobuf::int32 byte_size() const;
  inline void set_byte_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo.CacheEntryInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_byte_size();
  inline void clear_has_byte_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::google::protobuf::int32 byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo_CacheEntryInfo* default_instance_;
};
// -------------------------------------------------------------------

class MasterComponentInfo : public ::google::protobuf::Message {
 public:
  MasterComponentInfo();
  virtual ~MasterComponentInfo();

  MasterComponentInfo(const MasterComponentInfo& from);

  inline MasterComponentInfo& operator=(const MasterComponentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterComponentInfo& default_instance();

  void Swap(MasterComponentInfo* other);

  // implements Message ----------------------------------------------

  MasterComponentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterComponentInfo& from);
  void MergeFrom(const MasterComponentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MasterComponentInfo_RegularizerInfo RegularizerInfo;
  typedef MasterComponentInfo_ScoreInfo ScoreInfo;
  typedef MasterComponentInfo_DictionaryInfo DictionaryInfo;
  typedef MasterComponentInfo_BatchInfo BatchInfo;
  typedef MasterComponentInfo_ModelInfo ModelInfo;
  typedef MasterComponentInfo_CacheEntryInfo CacheEntryInfo;

  // accessors -------------------------------------------------------

  // optional int32 master_id = 1;
  inline bool has_master_id() const;
  inline void clear_master_id();
  static const int kMasterIdFieldNumber = 1;
  inline ::google::protobuf::int32 master_id() const;
  inline void set_master_id(::google::protobuf::int32 value);

  // optional .artm.MasterModelConfig config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::artm::MasterModelConfig& config() const;
  inline ::artm::MasterModelConfig* mutable_config();
  inline ::artm::MasterModelConfig* release_config();
  inline void set_allocated_config(::artm::MasterModelConfig* config);

  // repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
  inline int regularizer_size() const;
  inline void clear_regularizer();
  static const int kRegularizerFieldNumber = 3;
  inline const ::artm::MasterComponentInfo_RegularizerInfo& regularizer(int index) const;
  inline ::artm::MasterComponentInfo_RegularizerInfo* mutable_regularizer(int index);
  inline ::artm::MasterComponentInfo_RegularizerInfo* add_regularizer();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo >&
      regularizer() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo >*
      mutable_regularizer();

  // repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline const ::artm::MasterComponentInfo_ScoreInfo& score(int index) const;
  inline ::artm::MasterComponentInfo_ScoreInfo* mutable_score(int index);
  inline ::artm::MasterComponentInfo_ScoreInfo* add_score();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo >&
      score() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo >*
      mutable_score();

  // repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
  inline int dictionary_size() const;
  inline void clear_dictionary();
  static const int kDictionaryFieldNumber = 5;
  inline const ::artm::MasterComponentInfo_DictionaryInfo& dictionary(int index) const;
  inline ::artm::MasterComponentInfo_DictionaryInfo* mutable_dictionary(int index);
  inline ::artm::MasterComponentInfo_DictionaryInfo* add_dictionary();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo >&
      dictionary() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo >*
      mutable_dictionary();

  // repeated .artm.MasterComponentInfo.ModelInfo model = 6;
  inline int model_size() const;
  inline void clear_model();
  static const int kModelFieldNumber = 6;
  inline const ::artm::MasterComponentInfo_ModelInfo& model(int index) const;
  inline ::artm::MasterComponentInfo_ModelInfo* mutable_model(int index);
  inline ::artm::MasterComponentInfo_ModelInfo* add_model();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo >&
      model() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo >*
      mutable_model();

  // repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
  inline int cache_entry_size() const;
  inline void clear_cache_entry();
  static const int kCacheEntryFieldNumber = 7;
  inline const ::artm::MasterComponentInfo_CacheEntryInfo& cache_entry(int index) const;
  inline ::artm::MasterComponentInfo_CacheEntryInfo* mutable_cache_entry(int index);
  inline ::artm::MasterComponentInfo_CacheEntryInfo* add_cache_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo >&
      cache_entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo >*
      mutable_cache_entry();

  // optional int32 processor_queue_size = 9;
  inline bool has_processor_queue_size() const;
  inline void clear_processor_queue_size();
  static const int kProcessorQueueSizeFieldNumber = 9;
  inline ::google::protobuf::int32 processor_queue_size() const;
  inline void set_processor_queue_size(::google::protobuf::int32 value);

  // repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
  inline int batch_size() const;
  inline void clear_batch();
  static const int kBatchFieldNumber = 10;
  inline const ::artm::MasterComponentInfo_BatchInfo& batch(int index) const;
  inline ::artm::MasterComponentInfo_BatchInfo* mutable_batch(int index);
  inline ::artm::MasterComponentInfo_BatchInfo* add_batch();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo >&
      batch() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo >*
      mutable_batch();

  // @@protoc_insertion_point(class_scope:artm.MasterComponentInfo)
 private:
  inline void set_has_master_id();
  inline void clear_has_master_id();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_processor_queue_size();
  inline void clear_has_processor_queue_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::artm::MasterModelConfig* config_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo > regularizer_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo > score_;
  ::google::protobuf::int32 master_id_;
  ::google::protobuf::int32 processor_queue_size_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo > dictionary_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo > model_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo > cache_entry_;
  ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo > batch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterComponentInfo* default_instance_;
};
// -------------------------------------------------------------------

class ImportBatchesArgs : public ::google::protobuf::Message {
 public:
  ImportBatchesArgs();
  virtual ~ImportBatchesArgs();

  ImportBatchesArgs(const ImportBatchesArgs& from);

  inline ImportBatchesArgs& operator=(const ImportBatchesArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportBatchesArgs& default_instance();

  void Swap(ImportBatchesArgs* other);

  // implements Message ----------------------------------------------

  ImportBatchesArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportBatchesArgs& from);
  void MergeFrom(const ImportBatchesArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string batch_name = 1;
  inline int batch_name_size() const;
  inline void clear_batch_name();
  static const int kBatchNameFieldNumber = 1;
  inline const ::std::string& batch_name(int index) const;
  inline ::std::string* mutable_batch_name(int index);
  inline void set_batch_name(int index, const ::std::string& value);
  inline void set_batch_name(int index, const char* value);
  inline void set_batch_name(int index, const char* value, size_t size);
  inline ::std::string* add_batch_name();
  inline void add_batch_name(const ::std::string& value);
  inline void add_batch_name(const char* value);
  inline void add_batch_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_name();

  // repeated .artm.Batch batch = 3;
  inline int batch_size() const;
  inline void clear_batch();
  static const int kBatchFieldNumber = 3;
  inline const ::artm::Batch& batch(int index) const;
  inline ::artm::Batch* mutable_batch(int index);
  inline ::artm::Batch* add_batch();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
      batch() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
      mutable_batch();

  // @@protoc_insertion_point(class_scope:artm.ImportBatchesArgs)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> batch_name_;
  ::google::protobuf::RepeatedPtrField< ::artm::Batch > batch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ImportBatchesArgs* default_instance_;
};
// -------------------------------------------------------------------

class AwaitOperationArgs : public ::google::protobuf::Message {
 public:
  AwaitOperationArgs();
  virtual ~AwaitOperationArgs();

  AwaitOperationArgs(const AwaitOperationArgs& from);

  inline AwaitOperationArgs& operator=(const AwaitOperationArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AwaitOperationArgs& default_instance();

  void Swap(AwaitOperationArgs* other);

  // implements Message ----------------------------------------------

  AwaitOperationArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AwaitOperationArgs& from);
  void MergeFrom(const AwaitOperationArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 timeout_milliseconds = 1 [default = -1];
  inline bool has_timeout_milliseconds() const;
  inline void clear_timeout_milliseconds();
  static const int kTimeoutMillisecondsFieldNumber = 1;
  inline ::google::protobuf::int32 timeout_milliseconds() const;
  inline void set_timeout_milliseconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:artm.AwaitOperationArgs)
 private:
  inline void set_has_timeout_milliseconds();
  inline void clear_has_timeout_milliseconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 timeout_milliseconds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static AwaitOperationArgs* default_instance_;
};
// -------------------------------------------------------------------

class MasterModelConfig : public ::google::protobuf::Message {
 public:
  MasterModelConfig();
  virtual ~MasterModelConfig();

  MasterModelConfig(const MasterModelConfig& from);

  inline MasterModelConfig& operator=(const MasterModelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterModelConfig& default_instance();

  void Swap(MasterModelConfig* other);

  // implements Message ----------------------------------------------

  MasterModelConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MasterModelConfig& from);
  void MergeFrom(const MasterModelConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topic_name = 1;
  inline int topic_name_size() const;
  inline void clear_topic_name();
  static const int kTopicNameFieldNumber = 1;
  inline const ::std::string& topic_name(int index) const;
  inline ::std::string* mutable_topic_name(int index);
  inline void set_topic_name(int index, const ::std::string& value);
  inline void set_topic_name(int index, const char* value);
  inline void set_topic_name(int index, const char* value, size_t size);
  inline ::std::string* add_topic_name();
  inline void add_topic_name(const ::std::string& value);
  inline void add_topic_name(const char* value);
  inline void add_topic_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic_name();

  // repeated string class_id = 2;
  inline int class_id_size() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 2;
  inline const ::std::string& class_id(int index) const;
  inline ::std::string* mutable_class_id(int index);
  inline void set_class_id(int index, const ::std::string& value);
  inline void set_class_id(int index, const char* value);
  inline void set_class_id(int index, const char* value, size_t size);
  inline ::std::string* add_class_id();
  inline void add_class_id(const ::std::string& value);
  inline void add_class_id(const char* value);
  inline void add_class_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& class_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_class_id();

  // repeated float class_weight = 3;
  inline int class_weight_size() const;
  inline void clear_class_weight();
  static const int kClassWeightFieldNumber = 3;
  inline float class_weight(int index) const;
  inline void set_class_weight(int index, float value);
  inline void add_class_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      class_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_class_weight();

  // repeated .artm.ScoreConfig score_config = 4;
  inline int score_config_size() const;
  inline void clear_score_config();
  static const int kScoreConfigFieldNumber = 4;
  inline const ::artm::ScoreConfig& score_config(int index) const;
  inline ::artm::ScoreConfig* mutable_score_config(int index);
  inline ::artm::ScoreConfig* add_score_config();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig >&
      score_config() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig >*
      mutable_score_config();

  // repeated .artm.RegularizerConfig regularizer_config = 5;
  inline int regularizer_config_size() const;
  inline void clear_regularizer_config();
  static const int kRegularizerConfigFieldNumber = 5;
  inline const ::artm::RegularizerConfig& regularizer_config(int index) const;
  inline ::artm::RegularizerConfig* mutable_regularizer_config(int index);
  inline ::artm::RegularizerConfig* add_regularizer_config();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig >&
      regularizer_config() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig >*
      mutable_regularizer_config();

  // optional int32 threads = 6;
  inline bool has_threads() const;
  inline void clear_threads();
  static const int kThreadsFieldNumber = 6;
  inline ::google::protobuf::int32 threads() const;
  inline void set_threads(::google::protobuf::int32 value);

  // optional string pwt_name = 7 [default = "pwt"];
  inline bool has_pwt_name() const;
  inline void clear_pwt_name();
  static const int kPwtNameFieldNumber = 7;
  inline const ::std::string& pwt_name() const;
  inline void set_pwt_name(const ::std::string& value);
  inline void set_pwt_name(const char* value);
  inline void set_pwt_name(const char* value, size_t size);
  inline ::std::string* mutable_pwt_name();
  inline ::std::string* release_pwt_name();
  inline void set_allocated_pwt_name(::std::string* pwt_name);

  // optional string nwt_name = 8 [default = "nwt"];
  inline bool has_nwt_name() const;
  inline void clear_nwt_name();
  static const int kNwtNameFieldNumber = 8;
  inline const ::std::string& nwt_name() const;
  inline void set_nwt_name(const ::std::string& value);
  inline void set_nwt_name(const char* value);
  inline void set_nwt_name(const char* value, size_t size);
  inline ::std::string* mutable_nwt_name();
  inline ::std::string* release_nwt_name();
  inline void set_allocated_nwt_name(::std::string* nwt_name);

  // optional int32 inner_iterations_count = 9;
  inline bool has_inner_iterations_count() const;
  inline void clear_inner_iterations_count();
  static const int kInnerIterationsCountFieldNumber = 9;
  inline ::google::protobuf::int32 inner_iterations_count() const;
  inline void set_inner_iterations_count(::google::protobuf::int32 value);

  // optional bool reuse_theta = 10 [default = false];
  inline bool has_reuse_theta() const;
  inline void clear_reuse_theta();
  static const int kReuseThetaFieldNumber = 10;
  inline bool reuse_theta() const;
  inline void set_reuse_theta(bool value);

  // optional bool opt_for_avx = 11 [default = true];
  inline bool has_opt_for_avx() const;
  inline void clear_opt_for_avx();
  static const int kOptForAvxFieldNumber = 11;
  inline bool opt_for_avx() const;
  inline void set_opt_for_avx(bool value);

  // optional string disk_cache_path = 13;
  inline bool has_disk_cache_path() const;
  inline void clear_disk_cache_path();
  static const int kDiskCachePathFieldNumber = 13;
  inline const ::std::string& disk_cache_path() const;
  inline void set_disk_cache_path(const ::std::string& value);
  inline void set_disk_cache_path(const char* value);
  inline void set_disk_cache_path(const char* value, size_t size);
  inline ::std::string* mutable_disk_cache_path();
  inline ::std::string* release_disk_cache_path();
  inline void set_allocated_disk_cache_path(::std::string* disk_cache_path);

  // optional bool cache_theta = 15 [default = false];
  inline bool has_cache_theta() const;
  inline void clear_cache_theta();
  static const int kCacheThetaFieldNumber = 15;
  inline bool cache_theta() const;
  inline void set_cache_theta(bool value);

  // @@protoc_insertion_point(class_scope:artm.MasterModelConfig)
 private:
  inline void set_has_threads();
  inline void clear_has_threads();
  inline void set_has_pwt_name();
  inline void clear_has_pwt_name();
  inline void set_has_nwt_name();
  inline void clear_has_nwt_name();
  inline void set_has_inner_iterations_count();
  inline void clear_has_inner_iterations_count();
  inline void set_has_reuse_theta();
  inline void clear_has_reuse_theta();
  inline void set_has_opt_for_avx();
  inline void clear_has_opt_for_avx();
  inline void set_has_disk_cache_path();
  inline void clear_has_disk_cache_path();
  inline void set_has_cache_theta();
  inline void clear_has_cache_theta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> topic_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> class_id_;
  ::google::protobuf::RepeatedField< float > class_weight_;
  ::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig > score_config_;
  ::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig > regularizer_config_;
  ::std::string* pwt_name_;
  static ::std::string* _default_pwt_name_;
  ::google::protobuf::int32 threads_;
  ::google::protobuf::int32 inner_iterations_count_;
  ::std::string* nwt_name_;
  static ::std::string* _default_nwt_name_;
  ::std::string* disk_cache_path_;
  bool reuse_theta_;
  bool opt_for_avx_;
  bool cache_theta_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static MasterModelConfig* default_instance_;
};
// -------------------------------------------------------------------

class FitOfflineMasterModelArgs : public ::google::protobuf::Message {
 public:
  FitOfflineMasterModelArgs();
  virtual ~FitOfflineMasterModelArgs();

  FitOfflineMasterModelArgs(const FitOfflineMasterModelArgs& from);

  inline FitOfflineMasterModelArgs& operator=(const FitOfflineMasterModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FitOfflineMasterModelArgs& default_instance();

  void Swap(FitOfflineMasterModelArgs* other);

  // implements Message ----------------------------------------------

  FitOfflineMasterModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FitOfflineMasterModelArgs& from);
  void MergeFrom(const FitOfflineMasterModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string batch_filename = 1;
  inline int batch_filename_size() const;
  inline void clear_batch_filename();
  static const int kBatchFilenameFieldNumber = 1;
  inline const ::std::string& batch_filename(int index) const;
  inline ::std::string* mutable_batch_filename(int index);
  inline void set_batch_filename(int index, const ::std::string& value);
  inline void set_batch_filename(int index, const char* value);
  inline void set_batch_filename(int index, const char* value, size_t size);
  inline ::std::string* add_batch_filename();
  inline void add_batch_filename(const ::std::string& value);
  inline void add_batch_filename(const char* value);
  inline void add_batch_filename(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_filename() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_filename();

  // repeated float batch_weight = 2;
  inline int batch_weight_size() const;
  inline void clear_batch_weight();
  static const int kBatchWeightFieldNumber = 2;
  inline float batch_weight(int index) const;
  inline void set_batch_weight(int index, float value);
  inline void add_batch_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      batch_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_batch_weight();

  // optional int32 passes = 3 [default = 1];
  inline bool has_passes() const;
  inline void clear_passes();
  static const int kPassesFieldNumber = 3;
  inline ::google::protobuf::int32 passes() const;
  inline void set_passes(::google::protobuf::int32 value);

  // optional string batch_folder = 4;
  inline bool has_batch_folder() const;
  inline void clear_batch_folder();
  static const int kBatchFolderFieldNumber = 4;
  inline const ::std::string& batch_folder() const;
  inline void set_batch_folder(const ::std::string& value);
  inline void set_batch_folder(const char* value);
  inline void set_batch_folder(const char* value, size_t size);
  inline ::std::string* mutable_batch_folder();
  inline ::std::string* release_batch_folder();
  inline void set_allocated_batch_folder(::std::string* batch_folder);

  // @@protoc_insertion_point(class_scope:artm.FitOfflineMasterModelArgs)
 private:
  inline void set_has_passes();
  inline void clear_has_passes();
  inline void set_has_batch_folder();
  inline void clear_has_batch_folder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> batch_filename_;
  ::google::protobuf::RepeatedField< float > batch_weight_;
  ::std::string* batch_folder_;
  ::google::protobuf::int32 passes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static FitOfflineMasterModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class FitOnlineMasterModelArgs : public ::google::protobuf::Message {
 public:
  FitOnlineMasterModelArgs();
  virtual ~FitOnlineMasterModelArgs();

  FitOnlineMasterModelArgs(const FitOnlineMasterModelArgs& from);

  inline FitOnlineMasterModelArgs& operator=(const FitOnlineMasterModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FitOnlineMasterModelArgs& default_instance();

  void Swap(FitOnlineMasterModelArgs* other);

  // implements Message ----------------------------------------------

  FitOnlineMasterModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FitOnlineMasterModelArgs& from);
  void MergeFrom(const FitOnlineMasterModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string batch_filename = 1;
  inline int batch_filename_size() const;
  inline void clear_batch_filename();
  static const int kBatchFilenameFieldNumber = 1;
  inline const ::std::string& batch_filename(int index) const;
  inline ::std::string* mutable_batch_filename(int index);
  inline void set_batch_filename(int index, const ::std::string& value);
  inline void set_batch_filename(int index, const char* value);
  inline void set_batch_filename(int index, const char* value, size_t size);
  inline ::std::string* add_batch_filename();
  inline void add_batch_filename(const ::std::string& value);
  inline void add_batch_filename(const char* value);
  inline void add_batch_filename(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_filename() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_filename();

  // repeated float batch_weight = 2;
  inline int batch_weight_size() const;
  inline void clear_batch_weight();
  static const int kBatchWeightFieldNumber = 2;
  inline float batch_weight(int index) const;
  inline void set_batch_weight(int index, float value);
  inline void add_batch_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      batch_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_batch_weight();

  // repeated int32 update_after = 3;
  inline int update_after_size() const;
  inline void clear_update_after();
  static const int kUpdateAfterFieldNumber = 3;
  inline ::google::protobuf::int32 update_after(int index) const;
  inline void set_update_after(int index, ::google::protobuf::int32 value);
  inline void add_update_after(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      update_after() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_update_after();

  // repeated float apply_weight = 4;
  inline int apply_weight_size() const;
  inline void clear_apply_weight();
  static const int kApplyWeightFieldNumber = 4;
  inline float apply_weight(int index) const;
  inline void set_apply_weight(int index, float value);
  inline void add_apply_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      apply_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_apply_weight();

  // repeated float decay_weight = 5;
  inline int decay_weight_size() const;
  inline void clear_decay_weight();
  static const int kDecayWeightFieldNumber = 5;
  inline float decay_weight(int index) const;
  inline void set_decay_weight(int index, float value);
  inline void add_decay_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      decay_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_decay_weight();

  // optional bool async = 6 [default = false];
  inline bool has_async() const;
  inline void clear_async();
  static const int kAsyncFieldNumber = 6;
  inline bool async() const;
  inline void set_async(bool value);

  // @@protoc_insertion_point(class_scope:artm.FitOnlineMasterModelArgs)
 private:
  inline void set_has_async();
  inline void clear_has_async();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> batch_filename_;
  ::google::protobuf::RepeatedField< float > batch_weight_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > update_after_;
  ::google::protobuf::RepeatedField< float > apply_weight_;
  ::google::protobuf::RepeatedField< float > decay_weight_;
  bool async_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static FitOnlineMasterModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class TransformMasterModelArgs : public ::google::protobuf::Message {
 public:
  TransformMasterModelArgs();
  virtual ~TransformMasterModelArgs();

  TransformMasterModelArgs(const TransformMasterModelArgs& from);

  inline TransformMasterModelArgs& operator=(const TransformMasterModelArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformMasterModelArgs& default_instance();

  void Swap(TransformMasterModelArgs* other);

  // implements Message ----------------------------------------------

  TransformMasterModelArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformMasterModelArgs& from);
  void MergeFrom(const TransformMasterModelArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TransformMasterModelArgs_ThetaMatrixType ThetaMatrixType;
  static const ThetaMatrixType None = TransformMasterModelArgs_ThetaMatrixType_None;
  static const ThetaMatrixType Dense = TransformMasterModelArgs_ThetaMatrixType_Dense;
  static const ThetaMatrixType Sparse = TransformMasterModelArgs_ThetaMatrixType_Sparse;
  static const ThetaMatrixType Cache = TransformMasterModelArgs_ThetaMatrixType_Cache;
  static const ThetaMatrixType DensePtdw = TransformMasterModelArgs_ThetaMatrixType_DensePtdw;
  static const ThetaMatrixType SparsePtdw = TransformMasterModelArgs_ThetaMatrixType_SparsePtdw;
  static inline bool ThetaMatrixType_IsValid(int value) {
    return TransformMasterModelArgs_ThetaMatrixType_IsValid(value);
  }
  static const ThetaMatrixType ThetaMatrixType_MIN =
    TransformMasterModelArgs_ThetaMatrixType_ThetaMatrixType_MIN;
  static const ThetaMatrixType ThetaMatrixType_MAX =
    TransformMasterModelArgs_ThetaMatrixType_ThetaMatrixType_MAX;
  static const int ThetaMatrixType_ARRAYSIZE =
    TransformMasterModelArgs_ThetaMatrixType_ThetaMatrixType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ThetaMatrixType_descriptor() {
    return TransformMasterModelArgs_ThetaMatrixType_descriptor();
  }
  static inline const ::std::string& ThetaMatrixType_Name(ThetaMatrixType value) {
    return TransformMasterModelArgs_ThetaMatrixType_Name(value);
  }
  static inline bool ThetaMatrixType_Parse(const ::std::string& name,
      ThetaMatrixType* value) {
    return TransformMasterModelArgs_ThetaMatrixType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .artm.Batch batch = 1;
  inline int batch_size() const;
  inline void clear_batch();
  static const int kBatchFieldNumber = 1;
  inline const ::artm::Batch& batch(int index) const;
  inline ::artm::Batch* mutable_batch(int index);
  inline ::artm::Batch* add_batch();
  inline const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
      batch() const;
  inline ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
      mutable_batch();

  // repeated string batch_filename = 2;
  inline int batch_filename_size() const;
  inline void clear_batch_filename();
  static const int kBatchFilenameFieldNumber = 2;
  inline const ::std::string& batch_filename(int index) const;
  inline ::std::string* mutable_batch_filename(int index);
  inline void set_batch_filename(int index, const ::std::string& value);
  inline void set_batch_filename(int index, const char* value);
  inline void set_batch_filename(int index, const char* value, size_t size);
  inline ::std::string* add_batch_filename();
  inline void add_batch_filename(const ::std::string& value);
  inline void add_batch_filename(const char* value);
  inline void add_batch_filename(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& batch_filename() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_batch_filename();

  // optional .artm.TransformMasterModelArgs.ThetaMatrixType theta_matrix_type = 3 [default = Dense];
  inline bool has_theta_matrix_type() const;
  inline void clear_theta_matrix_type();
  static const int kThetaMatrixTypeFieldNumber = 3;
  inline ::artm::TransformMasterModelArgs_ThetaMatrixType theta_matrix_type() const;
  inline void set_theta_matrix_type(::artm::TransformMasterModelArgs_ThetaMatrixType value);

  // optional string predict_class_id = 4;
  inline bool has_predict_class_id() const;
  inline void clear_predict_class_id();
  static const int kPredictClassIdFieldNumber = 4;
  inline const ::std::string& predict_class_id() const;
  inline void set_predict_class_id(const ::std::string& value);
  inline void set_predict_class_id(const char* value);
  inline void set_predict_class_id(const char* value, size_t size);
  inline ::std::string* mutable_predict_class_id();
  inline ::std::string* release_predict_class_id();
  inline void set_allocated_predict_class_id(::std::string* predict_class_id);

  // @@protoc_insertion_point(class_scope:artm.TransformMasterModelArgs)
 private:
  inline void set_has_theta_matrix_type();
  inline void clear_has_theta_matrix_type();
  inline void set_has_predict_class_id();
  inline void clear_has_predict_class_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::artm::Batch > batch_;
  ::google::protobuf::RepeatedPtrField< ::std::string> batch_filename_;
  ::std::string* predict_class_id_;
  int theta_matrix_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static TransformMasterModelArgs* default_instance_;
};
// -------------------------------------------------------------------

class ConfigureLoggingArgs : public ::google::protobuf::Message {
 public:
  ConfigureLoggingArgs();
  virtual ~ConfigureLoggingArgs();

  ConfigureLoggingArgs(const ConfigureLoggingArgs& from);

  inline ConfigureLoggingArgs& operator=(const ConfigureLoggingArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigureLoggingArgs& default_instance();

  void Swap(ConfigureLoggingArgs* other);

  // implements Message ----------------------------------------------

  ConfigureLoggingArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigureLoggingArgs& from);
  void MergeFrom(const ConfigureLoggingArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string log_dir = 1;
  inline bool has_log_dir() const;
  inline void clear_log_dir();
  static const int kLogDirFieldNumber = 1;
  inline const ::std::string& log_dir() const;
  inline void set_log_dir(const ::std::string& value);
  inline void set_log_dir(const char* value);
  inline void set_log_dir(const char* value, size_t size);
  inline ::std::string* mutable_log_dir();
  inline ::std::string* release_log_dir();
  inline void set_allocated_log_dir(::std::string* log_dir);

  // optional int32 minloglevel = 2;
  inline bool has_minloglevel() const;
  inline void clear_minloglevel();
  static const int kMinloglevelFieldNumber = 2;
  inline ::google::protobuf::int32 minloglevel() const;
  inline void set_minloglevel(::google::protobuf::int32 value);

  // optional int32 stderrthreshold = 3;
  inline bool has_stderrthreshold() const;
  inline void clear_stderrthreshold();
  static const int kStderrthresholdFieldNumber = 3;
  inline ::google::protobuf::int32 stderrthreshold() const;
  inline void set_stderrthreshold(::google::protobuf::int32 value);

  // optional bool logtostderr = 4;
  inline bool has_logtostderr() const;
  inline void clear_logtostderr();
  static const int kLogtostderrFieldNumber = 4;
  inline bool logtostderr() const;
  inline void set_logtostderr(bool value);

  // optional bool colorlogtostderr = 5;
  inline bool has_colorlogtostderr() const;
  inline void clear_colorlogtostderr();
  static const int kColorlogtostderrFieldNumber = 5;
  inline bool colorlogtostderr() const;
  inline void set_colorlogtostderr(bool value);

  // optional bool alsologtostderr = 6;
  inline bool has_alsologtostderr() const;
  inline void clear_alsologtostderr();
  static const int kAlsologtostderrFieldNumber = 6;
  inline bool alsologtostderr() const;
  inline void set_alsologtostderr(bool value);

  // optional int32 logbufsecs = 7;
  inline bool has_logbufsecs() const;
  inline void clear_logbufsecs();
  static const int kLogbufsecsFieldNumber = 7;
  inline ::google::protobuf::int32 logbufsecs() const;
  inline void set_logbufsecs(::google::protobuf::int32 value);

  // optional int32 logbuflevel = 8;
  inline bool has_logbuflevel() const;
  inline void clear_logbuflevel();
  static const int kLogbuflevelFieldNumber = 8;
  inline ::google::protobuf::int32 logbuflevel() const;
  inline void set_logbuflevel(::google::protobuf::int32 value);

  // optional int32 max_log_size = 9;
  inline bool has_max_log_size() const;
  inline void clear_max_log_size();
  static const int kMaxLogSizeFieldNumber = 9;
  inline ::google::protobuf::int32 max_log_size() const;
  inline void set_max_log_size(::google::protobuf::int32 value);

  // optional bool stop_logging_if_full_disk = 10;
  inline bool has_stop_logging_if_full_disk() const;
  inline void clear_stop_logging_if_full_disk();
  static const int kStopLoggingIfFullDiskFieldNumber = 10;
  inline bool stop_logging_if_full_disk() const;
  inline void set_stop_logging_if_full_disk(bool value);

  // @@protoc_insertion_point(class_scope:artm.ConfigureLoggingArgs)
 private:
  inline void set_has_log_dir();
  inline void clear_has_log_dir();
  inline void set_has_minloglevel();
  inline void clear_has_minloglevel();
  inline void set_has_stderrthreshold();
  inline void clear_has_stderrthreshold();
  inline void set_has_logtostderr();
  inline void clear_has_logtostderr();
  inline void set_has_colorlogtostderr();
  inline void clear_has_colorlogtostderr();
  inline void set_has_alsologtostderr();
  inline void clear_has_alsologtostderr();
  inline void set_has_logbufsecs();
  inline void clear_has_logbufsecs();
  inline void set_has_logbuflevel();
  inline void clear_has_logbuflevel();
  inline void set_has_max_log_size();
  inline void clear_has_max_log_size();
  inline void set_has_stop_logging_if_full_disk();
  inline void clear_has_stop_logging_if_full_disk();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* log_dir_;
  ::google::protobuf::int32 minloglevel_;
  ::google::protobuf::int32 stderrthreshold_;
  bool logtostderr_;
  bool colorlogtostderr_;
  bool alsologtostderr_;
  bool stop_logging_if_full_disk_;
  ::google::protobuf::int32 logbufsecs_;
  ::google::protobuf::int32 logbuflevel_;
  ::google::protobuf::int32 max_log_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ConfigureLoggingArgs* default_instance_;
};
// -------------------------------------------------------------------

class ClearThetaCacheArgs : public ::google::protobuf::Message {
 public:
  ClearThetaCacheArgs();
  virtual ~ClearThetaCacheArgs();

  ClearThetaCacheArgs(const ClearThetaCacheArgs& from);

  inline ClearThetaCacheArgs& operator=(const ClearThetaCacheArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearThetaCacheArgs& default_instance();

  void Swap(ClearThetaCacheArgs* other);

  // implements Message ----------------------------------------------

  ClearThetaCacheArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearThetaCacheArgs& from);
  void MergeFrom(const ClearThetaCacheArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.ClearThetaCacheArgs)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ClearThetaCacheArgs* default_instance_;
};
// -------------------------------------------------------------------

class ClearScoreCacheArgs : public ::google::protobuf::Message {
 public:
  ClearScoreCacheArgs();
  virtual ~ClearScoreCacheArgs();

  ClearScoreCacheArgs(const ClearScoreCacheArgs& from);

  inline ClearScoreCacheArgs& operator=(const ClearScoreCacheArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearScoreCacheArgs& default_instance();

  void Swap(ClearScoreCacheArgs* other);

  // implements Message ----------------------------------------------

  ClearScoreCacheArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearScoreCacheArgs& from);
  void MergeFrom(const ClearScoreCacheArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.ClearScoreCacheArgs)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ClearScoreCacheArgs* default_instance_;
};
// -------------------------------------------------------------------

class ClearScoreArrayCacheArgs : public ::google::protobuf::Message {
 public:
  ClearScoreArrayCacheArgs();
  virtual ~ClearScoreArrayCacheArgs();

  ClearScoreArrayCacheArgs(const ClearScoreArrayCacheArgs& from);

  inline ClearScoreArrayCacheArgs& operator=(const ClearScoreArrayCacheArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearScoreArrayCacheArgs& default_instance();

  void Swap(ClearScoreArrayCacheArgs* other);

  // implements Message ----------------------------------------------

  ClearScoreArrayCacheArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearScoreArrayCacheArgs& from);
  void MergeFrom(const ClearScoreArrayCacheArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:artm.ClearScoreArrayCacheArgs)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_artm_2fmessages_2eproto();
  friend void protobuf_AssignDesc_artm_2fmessages_2eproto();
  friend void protobuf_ShutdownFile_artm_2fmessages_2eproto();

  void InitAsDefaultInstance();
  static ClearScoreArrayCacheArgs* default_instance_;
};
// ===================================================================


// ===================================================================

// DoubleArray

// repeated double value = 1 [packed = true];
inline int DoubleArray::value_size() const {
  return value_.size();
}
inline void DoubleArray::clear_value() {
  value_.Clear();
}
inline double DoubleArray::value(int index) const {
  return value_.Get(index);
}
inline void DoubleArray::set_value(int index, double value) {
  value_.Set(index, value);
}
inline void DoubleArray::add_value(double value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
DoubleArray::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< double >*
DoubleArray::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// FloatArray

// repeated float value = 1 [packed = true];
inline int FloatArray::value_size() const {
  return value_.size();
}
inline void FloatArray::clear_value() {
  value_.Clear();
}
inline float FloatArray::value(int index) const {
  return value_.Get(index);
}
inline void FloatArray::set_value(int index, float value) {
  value_.Set(index, value);
}
inline void FloatArray::add_value(float value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
FloatArray::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
FloatArray::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// BoolArray

// repeated bool value = 1 [packed = true];
inline int BoolArray::value_size() const {
  return value_.size();
}
inline void BoolArray::clear_value() {
  value_.Clear();
}
inline bool BoolArray::value(int index) const {
  return value_.Get(index);
}
inline void BoolArray::set_value(int index, bool value) {
  value_.Set(index, value);
}
inline void BoolArray::add_value(bool value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
BoolArray::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< bool >*
BoolArray::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// IntArray

// repeated int32 value = 1 [packed = true];
inline int IntArray::value_size() const {
  return value_.size();
}
inline void IntArray::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 IntArray::value(int index) const {
  return value_.Get(index);
}
inline void IntArray::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
}
inline void IntArray::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
IntArray::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
IntArray::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// StringArray

// repeated string value = 1;
inline int StringArray::value_size() const {
  return value_.size();
}
inline void StringArray::clear_value() {
  value_.Clear();
}
inline const ::std::string& StringArray::value(int index) const {
  return value_.Get(index);
}
inline ::std::string* StringArray::mutable_value(int index) {
  return value_.Mutable(index);
}
inline void StringArray::set_value(int index, const ::std::string& value) {
  value_.Mutable(index)->assign(value);
}
inline void StringArray::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
}
inline void StringArray::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringArray::add_value() {
  return value_.Add();
}
inline void StringArray::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
}
inline void StringArray::add_value(const char* value) {
  value_.Add()->assign(value);
}
inline void StringArray::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringArray::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StringArray::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// Item

// optional int32 id = 1;
inline bool Item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Item::id() const {
  return id_;
}
inline void Item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string title = 2;
inline bool Item::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Item::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Item::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Item::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Item::title() const {
  return *title_;
}
inline void Item::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Item::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Item::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Item::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Item::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Item::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyString()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated int32 token_id = 3;
inline int Item::token_id_size() const {
  return token_id_.size();
}
inline void Item::clear_token_id() {
  token_id_.Clear();
}
inline ::google::protobuf::int32 Item::token_id(int index) const {
  return token_id_.Get(index);
}
inline void Item::set_token_id(int index, ::google::protobuf::int32 value) {
  token_id_.Set(index, value);
}
inline void Item::add_token_id(::google::protobuf::int32 value) {
  token_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Item::token_id() const {
  return token_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Item::mutable_token_id() {
  return &token_id_;
}

// repeated float token_weight = 4;
inline int Item::token_weight_size() const {
  return token_weight_.size();
}
inline void Item::clear_token_weight() {
  token_weight_.Clear();
}
inline float Item::token_weight(int index) const {
  return token_weight_.Get(index);
}
inline void Item::set_token_weight(int index, float value) {
  token_weight_.Set(index, value);
}
inline void Item::add_token_weight(float value) {
  token_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Item::token_weight() const {
  return token_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
Item::mutable_token_weight() {
  return &token_weight_;
}

// -------------------------------------------------------------------

// Batch

// repeated string token = 1;
inline int Batch::token_size() const {
  return token_.size();
}
inline void Batch::clear_token() {
  token_.Clear();
}
inline const ::std::string& Batch::token(int index) const {
  return token_.Get(index);
}
inline ::std::string* Batch::mutable_token(int index) {
  return token_.Mutable(index);
}
inline void Batch::set_token(int index, const ::std::string& value) {
  token_.Mutable(index)->assign(value);
}
inline void Batch::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
}
inline void Batch::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Batch::add_token() {
  return token_.Add();
}
inline void Batch::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
}
inline void Batch::add_token(const char* value) {
  token_.Add()->assign(value);
}
inline void Batch::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Batch::token() const {
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Batch::mutable_token() {
  return &token_;
}

// repeated string class_id = 2;
inline int Batch::class_id_size() const {
  return class_id_.size();
}
inline void Batch::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& Batch::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* Batch::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void Batch::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void Batch::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void Batch::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Batch::add_class_id() {
  return class_id_.Add();
}
inline void Batch::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void Batch::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void Batch::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Batch::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Batch::mutable_class_id() {
  return &class_id_;
}

// repeated .artm.Item item = 3;
inline int Batch::item_size() const {
  return item_.size();
}
inline void Batch::clear_item() {
  item_.Clear();
}
inline const ::artm::Item& Batch::item(int index) const {
  return item_.Get(index);
}
inline ::artm::Item* Batch::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::artm::Item* Batch::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Item >&
Batch::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Item >*
Batch::mutable_item() {
  return &item_;
}

// optional string description = 4;
inline bool Batch::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Batch::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Batch::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Batch::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyString()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Batch::description() const {
  return *description_;
}
inline void Batch::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyString()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Batch::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyString()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Batch::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyString()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Batch::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyString()) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Batch::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Batch::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyString()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string id = 5;
inline bool Batch::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Batch::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Batch::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Batch::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Batch::id() const {
  return *id_;
}
inline void Batch::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Batch::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Batch::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Batch::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Batch::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Batch::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// RegularizerSettings

// optional string name = 1;
inline bool RegularizerSettings::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegularizerSettings::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegularizerSettings::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegularizerSettings::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RegularizerSettings::name() const {
  return *name_;
}
inline void RegularizerSettings::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RegularizerSettings::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RegularizerSettings::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegularizerSettings::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RegularizerSettings::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void RegularizerSettings::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional double tau = 2;
inline bool RegularizerSettings::has_tau() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegularizerSettings::set_has_tau() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegularizerSettings::clear_has_tau() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegularizerSettings::clear_tau() {
  tau_ = 0;
  clear_has_tau();
}
inline double RegularizerSettings::tau() const {
  return tau_;
}
inline void RegularizerSettings::set_tau(double value) {
  set_has_tau();
  tau_ = value;
}

// optional bool use_relative_regularization = 3;
inline bool RegularizerSettings::has_use_relative_regularization() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegularizerSettings::set_has_use_relative_regularization() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegularizerSettings::clear_has_use_relative_regularization() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegularizerSettings::clear_use_relative_regularization() {
  use_relative_regularization_ = false;
  clear_has_use_relative_regularization();
}
inline bool RegularizerSettings::use_relative_regularization() const {
  return use_relative_regularization_;
}
inline void RegularizerSettings::set_use_relative_regularization(bool value) {
  set_has_use_relative_regularization();
  use_relative_regularization_ = value;
}

// optional double gamma = 4;
inline bool RegularizerSettings::has_gamma() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegularizerSettings::set_has_gamma() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegularizerSettings::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegularizerSettings::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline double RegularizerSettings::gamma() const {
  return gamma_;
}
inline void RegularizerSettings::set_gamma(double value) {
  set_has_gamma();
  gamma_ = value;
}

// -------------------------------------------------------------------

// RegularizerConfig

// optional string name = 1;
inline bool RegularizerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegularizerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegularizerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegularizerConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RegularizerConfig::name() const {
  return *name_;
}
inline void RegularizerConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RegularizerConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RegularizerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegularizerConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RegularizerConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void RegularizerConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .artm.RegularizerConfig.Type type = 2;
inline bool RegularizerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegularizerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegularizerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegularizerConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::artm::RegularizerConfig_Type RegularizerConfig::type() const {
  return static_cast< ::artm::RegularizerConfig_Type >(type_);
}
inline void RegularizerConfig::set_type(::artm::RegularizerConfig_Type value) {
  assert(::artm::RegularizerConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes config = 3;
inline bool RegularizerConfig::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegularizerConfig::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegularizerConfig::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegularizerConfig::clear_config() {
  if (config_ != &::google::protobuf::internal::GetEmptyString()) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& RegularizerConfig::config() const {
  return *config_;
}
inline void RegularizerConfig::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyString()) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void RegularizerConfig::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyString()) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void RegularizerConfig::set_config(const void* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyString()) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegularizerConfig::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyString()) {
    config_ = new ::std::string;
  }
  return config_;
}
inline ::std::string* RegularizerConfig::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void RegularizerConfig::set_allocated_config(::std::string* config) {
  if (config_ != &::google::protobuf::internal::GetEmptyString()) {
    delete config_;
  }
  if (config) {
    set_has_config();
    config_ = config;
  } else {
    clear_has_config();
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional float tau = 4;
inline bool RegularizerConfig::has_tau() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegularizerConfig::set_has_tau() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegularizerConfig::clear_has_tau() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegularizerConfig::clear_tau() {
  tau_ = 0;
  clear_has_tau();
}
inline float RegularizerConfig::tau() const {
  return tau_;
}
inline void RegularizerConfig::set_tau(float value) {
  set_has_tau();
  tau_ = value;
}

// -------------------------------------------------------------------

// SmoothSparseThetaConfig

// repeated string topic_name = 1;
inline int SmoothSparseThetaConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void SmoothSparseThetaConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& SmoothSparseThetaConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* SmoothSparseThetaConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void SmoothSparseThetaConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void SmoothSparseThetaConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void SmoothSparseThetaConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SmoothSparseThetaConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void SmoothSparseThetaConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void SmoothSparseThetaConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void SmoothSparseThetaConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothSparseThetaConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothSparseThetaConfig::mutable_topic_name() {
  return &topic_name_;
}

// repeated float alpha_iter = 2;
inline int SmoothSparseThetaConfig::alpha_iter_size() const {
  return alpha_iter_.size();
}
inline void SmoothSparseThetaConfig::clear_alpha_iter() {
  alpha_iter_.Clear();
}
inline float SmoothSparseThetaConfig::alpha_iter(int index) const {
  return alpha_iter_.Get(index);
}
inline void SmoothSparseThetaConfig::set_alpha_iter(int index, float value) {
  alpha_iter_.Set(index, value);
}
inline void SmoothSparseThetaConfig::add_alpha_iter(float value) {
  alpha_iter_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
SmoothSparseThetaConfig::alpha_iter() const {
  return alpha_iter_;
}
inline ::google::protobuf::RepeatedField< float >*
SmoothSparseThetaConfig::mutable_alpha_iter() {
  return &alpha_iter_;
}

// optional .artm.TransformConfig transform_config = 3;
inline bool SmoothSparseThetaConfig::has_transform_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmoothSparseThetaConfig::set_has_transform_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmoothSparseThetaConfig::clear_has_transform_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmoothSparseThetaConfig::clear_transform_config() {
  if (transform_config_ != NULL) transform_config_->::artm::TransformConfig::Clear();
  clear_has_transform_config();
}
inline const ::artm::TransformConfig& SmoothSparseThetaConfig::transform_config() const {
  return transform_config_ != NULL ? *transform_config_ : *default_instance_->transform_config_;
}
inline ::artm::TransformConfig* SmoothSparseThetaConfig::mutable_transform_config() {
  set_has_transform_config();
  if (transform_config_ == NULL) transform_config_ = new ::artm::TransformConfig;
  return transform_config_;
}
inline ::artm::TransformConfig* SmoothSparseThetaConfig::release_transform_config() {
  clear_has_transform_config();
  ::artm::TransformConfig* temp = transform_config_;
  transform_config_ = NULL;
  return temp;
}
inline void SmoothSparseThetaConfig::set_allocated_transform_config(::artm::TransformConfig* transform_config) {
  delete transform_config_;
  transform_config_ = transform_config;
  if (transform_config) {
    set_has_transform_config();
  } else {
    clear_has_transform_config();
  }
}

// -------------------------------------------------------------------

// SmoothSparsePhiConfig

// repeated string topic_name = 1;
inline int SmoothSparsePhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void SmoothSparsePhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& SmoothSparsePhiConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* SmoothSparsePhiConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void SmoothSparsePhiConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void SmoothSparsePhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void SmoothSparsePhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SmoothSparsePhiConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void SmoothSparsePhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void SmoothSparsePhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void SmoothSparsePhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothSparsePhiConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothSparsePhiConfig::mutable_topic_name() {
  return &topic_name_;
}

// repeated string class_id = 2;
inline int SmoothSparsePhiConfig::class_id_size() const {
  return class_id_.size();
}
inline void SmoothSparsePhiConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& SmoothSparsePhiConfig::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* SmoothSparsePhiConfig::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void SmoothSparsePhiConfig::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void SmoothSparsePhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void SmoothSparsePhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SmoothSparsePhiConfig::add_class_id() {
  return class_id_.Add();
}
inline void SmoothSparsePhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void SmoothSparsePhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void SmoothSparsePhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SmoothSparsePhiConfig::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SmoothSparsePhiConfig::mutable_class_id() {
  return &class_id_;
}

// optional string dictionary_name = 3;
inline bool SmoothSparsePhiConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmoothSparsePhiConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmoothSparsePhiConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmoothSparsePhiConfig::clear_dictionary_name() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_->clear();
  }
  clear_has_dictionary_name();
}
inline const ::std::string& SmoothSparsePhiConfig::dictionary_name() const {
  return *dictionary_name_;
}
inline void SmoothSparsePhiConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void SmoothSparsePhiConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void SmoothSparsePhiConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SmoothSparsePhiConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  return dictionary_name_;
}
inline ::std::string* SmoothSparsePhiConfig::release_dictionary_name() {
  clear_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_name_;
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void SmoothSparsePhiConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (dictionary_name) {
    set_has_dictionary_name();
    dictionary_name_ = dictionary_name;
  } else {
    clear_has_dictionary_name();
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .artm.TransformConfig transform_config = 4;
inline bool SmoothSparsePhiConfig::has_transform_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmoothSparsePhiConfig::set_has_transform_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SmoothSparsePhiConfig::clear_has_transform_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SmoothSparsePhiConfig::clear_transform_config() {
  if (transform_config_ != NULL) transform_config_->::artm::TransformConfig::Clear();
  clear_has_transform_config();
}
inline const ::artm::TransformConfig& SmoothSparsePhiConfig::transform_config() const {
  return transform_config_ != NULL ? *transform_config_ : *default_instance_->transform_config_;
}
inline ::artm::TransformConfig* SmoothSparsePhiConfig::mutable_transform_config() {
  set_has_transform_config();
  if (transform_config_ == NULL) transform_config_ = new ::artm::TransformConfig;
  return transform_config_;
}
inline ::artm::TransformConfig* SmoothSparsePhiConfig::release_transform_config() {
  clear_has_transform_config();
  ::artm::TransformConfig* temp = transform_config_;
  transform_config_ = NULL;
  return temp;
}
inline void SmoothSparsePhiConfig::set_allocated_transform_config(::artm::TransformConfig* transform_config) {
  delete transform_config_;
  transform_config_ = transform_config;
  if (transform_config) {
    set_has_transform_config();
  } else {
    clear_has_transform_config();
  }
}

// -------------------------------------------------------------------

// DecorrelatorPhiConfig

// repeated string topic_name = 1;
inline int DecorrelatorPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void DecorrelatorPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& DecorrelatorPhiConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* DecorrelatorPhiConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void DecorrelatorPhiConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void DecorrelatorPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void DecorrelatorPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DecorrelatorPhiConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void DecorrelatorPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void DecorrelatorPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void DecorrelatorPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecorrelatorPhiConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DecorrelatorPhiConfig::mutable_topic_name() {
  return &topic_name_;
}

// repeated string class_id = 2;
inline int DecorrelatorPhiConfig::class_id_size() const {
  return class_id_.size();
}
inline void DecorrelatorPhiConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& DecorrelatorPhiConfig::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* DecorrelatorPhiConfig::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void DecorrelatorPhiConfig::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void DecorrelatorPhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void DecorrelatorPhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DecorrelatorPhiConfig::add_class_id() {
  return class_id_.Add();
}
inline void DecorrelatorPhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void DecorrelatorPhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void DecorrelatorPhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DecorrelatorPhiConfig::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DecorrelatorPhiConfig::mutable_class_id() {
  return &class_id_;
}

// -------------------------------------------------------------------

// MultiLanguagePhiConfig

// -------------------------------------------------------------------

// LabelRegularizationPhiConfig

// repeated string topic_name = 1;
inline int LabelRegularizationPhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void LabelRegularizationPhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& LabelRegularizationPhiConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* LabelRegularizationPhiConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void LabelRegularizationPhiConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void LabelRegularizationPhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void LabelRegularizationPhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LabelRegularizationPhiConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void LabelRegularizationPhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void LabelRegularizationPhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void LabelRegularizationPhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LabelRegularizationPhiConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LabelRegularizationPhiConfig::mutable_topic_name() {
  return &topic_name_;
}

// repeated string class_id = 2;
inline int LabelRegularizationPhiConfig::class_id_size() const {
  return class_id_.size();
}
inline void LabelRegularizationPhiConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& LabelRegularizationPhiConfig::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* LabelRegularizationPhiConfig::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void LabelRegularizationPhiConfig::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void LabelRegularizationPhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void LabelRegularizationPhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LabelRegularizationPhiConfig::add_class_id() {
  return class_id_.Add();
}
inline void LabelRegularizationPhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void LabelRegularizationPhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void LabelRegularizationPhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LabelRegularizationPhiConfig::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LabelRegularizationPhiConfig::mutable_class_id() {
  return &class_id_;
}

// optional string dictionary_name = 3;
inline bool LabelRegularizationPhiConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelRegularizationPhiConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelRegularizationPhiConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelRegularizationPhiConfig::clear_dictionary_name() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_->clear();
  }
  clear_has_dictionary_name();
}
inline const ::std::string& LabelRegularizationPhiConfig::dictionary_name() const {
  return *dictionary_name_;
}
inline void LabelRegularizationPhiConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void LabelRegularizationPhiConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void LabelRegularizationPhiConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LabelRegularizationPhiConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  return dictionary_name_;
}
inline ::std::string* LabelRegularizationPhiConfig::release_dictionary_name() {
  clear_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_name_;
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void LabelRegularizationPhiConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (dictionary_name) {
    set_has_dictionary_name();
    dictionary_name_ = dictionary_name;
  } else {
    clear_has_dictionary_name();
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// SpecifiedSparsePhiConfig

// repeated string topic_name = 1;
inline int SpecifiedSparsePhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void SpecifiedSparsePhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& SpecifiedSparsePhiConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* SpecifiedSparsePhiConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void SpecifiedSparsePhiConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void SpecifiedSparsePhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void SpecifiedSparsePhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpecifiedSparsePhiConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void SpecifiedSparsePhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void SpecifiedSparsePhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void SpecifiedSparsePhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SpecifiedSparsePhiConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SpecifiedSparsePhiConfig::mutable_topic_name() {
  return &topic_name_;
}

// optional string class_id = 2 [default = "@default_class"];
inline bool SpecifiedSparsePhiConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpecifiedSparsePhiConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpecifiedSparsePhiConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpecifiedSparsePhiConfig::clear_class_id() {
  if (class_id_ != _default_class_id_) {
    class_id_->assign(*_default_class_id_);
  }
  clear_has_class_id();
}
inline const ::std::string& SpecifiedSparsePhiConfig::class_id() const {
  return *class_id_;
}
inline void SpecifiedSparsePhiConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void SpecifiedSparsePhiConfig::set_class_id(const char* value) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void SpecifiedSparsePhiConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpecifiedSparsePhiConfig::mutable_class_id() {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string(*_default_class_id_);
  }
  return class_id_;
}
inline ::std::string* SpecifiedSparsePhiConfig::release_class_id() {
  clear_has_class_id();
  if (class_id_ == _default_class_id_) {
    return NULL;
  } else {
    ::std::string* temp = class_id_;
    class_id_ = const_cast< ::std::string*>(_default_class_id_);
    return temp;
  }
}
inline void SpecifiedSparsePhiConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id_ != _default_class_id_) {
    delete class_id_;
  }
  if (class_id) {
    set_has_class_id();
    class_id_ = class_id;
  } else {
    clear_has_class_id();
    class_id_ = const_cast< ::std::string*>(_default_class_id_);
  }
}

// optional int32 max_elements_count = 3 [default = 20];
inline bool SpecifiedSparsePhiConfig::has_max_elements_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpecifiedSparsePhiConfig::set_has_max_elements_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpecifiedSparsePhiConfig::clear_has_max_elements_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpecifiedSparsePhiConfig::clear_max_elements_count() {
  max_elements_count_ = 20;
  clear_has_max_elements_count();
}
inline ::google::protobuf::int32 SpecifiedSparsePhiConfig::max_elements_count() const {
  return max_elements_count_;
}
inline void SpecifiedSparsePhiConfig::set_max_elements_count(::google::protobuf::int32 value) {
  set_has_max_elements_count();
  max_elements_count_ = value;
}

// optional float probability_threshold = 4 [default = 0.99];
inline bool SpecifiedSparsePhiConfig::has_probability_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpecifiedSparsePhiConfig::set_has_probability_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpecifiedSparsePhiConfig::clear_has_probability_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpecifiedSparsePhiConfig::clear_probability_threshold() {
  probability_threshold_ = 0.99f;
  clear_has_probability_threshold();
}
inline float SpecifiedSparsePhiConfig::probability_threshold() const {
  return probability_threshold_;
}
inline void SpecifiedSparsePhiConfig::set_probability_threshold(float value) {
  set_has_probability_threshold();
  probability_threshold_ = value;
}

// optional .artm.SpecifiedSparsePhiConfig.Mode mode = 5 [default = SparseTopics];
inline bool SpecifiedSparsePhiConfig::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpecifiedSparsePhiConfig::set_has_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpecifiedSparsePhiConfig::clear_has_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpecifiedSparsePhiConfig::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::artm::SpecifiedSparsePhiConfig_Mode SpecifiedSparsePhiConfig::mode() const {
  return static_cast< ::artm::SpecifiedSparsePhiConfig_Mode >(mode_);
}
inline void SpecifiedSparsePhiConfig::set_mode(::artm::SpecifiedSparsePhiConfig_Mode value) {
  assert(::artm::SpecifiedSparsePhiConfig_Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// -------------------------------------------------------------------

// ImproveCoherencePhiConfig

// repeated string topic_name = 1;
inline int ImproveCoherencePhiConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void ImproveCoherencePhiConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& ImproveCoherencePhiConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* ImproveCoherencePhiConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void ImproveCoherencePhiConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void ImproveCoherencePhiConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void ImproveCoherencePhiConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImproveCoherencePhiConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void ImproveCoherencePhiConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void ImproveCoherencePhiConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void ImproveCoherencePhiConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImproveCoherencePhiConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImproveCoherencePhiConfig::mutable_topic_name() {
  return &topic_name_;
}

// repeated string class_id = 2;
inline int ImproveCoherencePhiConfig::class_id_size() const {
  return class_id_.size();
}
inline void ImproveCoherencePhiConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& ImproveCoherencePhiConfig::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* ImproveCoherencePhiConfig::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void ImproveCoherencePhiConfig::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void ImproveCoherencePhiConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void ImproveCoherencePhiConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImproveCoherencePhiConfig::add_class_id() {
  return class_id_.Add();
}
inline void ImproveCoherencePhiConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void ImproveCoherencePhiConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void ImproveCoherencePhiConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImproveCoherencePhiConfig::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImproveCoherencePhiConfig::mutable_class_id() {
  return &class_id_;
}

// optional string dictionary_name = 3;
inline bool ImproveCoherencePhiConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImproveCoherencePhiConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImproveCoherencePhiConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImproveCoherencePhiConfig::clear_dictionary_name() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_->clear();
  }
  clear_has_dictionary_name();
}
inline const ::std::string& ImproveCoherencePhiConfig::dictionary_name() const {
  return *dictionary_name_;
}
inline void ImproveCoherencePhiConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void ImproveCoherencePhiConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void ImproveCoherencePhiConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImproveCoherencePhiConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  return dictionary_name_;
}
inline ::std::string* ImproveCoherencePhiConfig::release_dictionary_name() {
  clear_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_name_;
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ImproveCoherencePhiConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (dictionary_name) {
    set_has_dictionary_name();
    dictionary_name_ = dictionary_name;
  } else {
    clear_has_dictionary_name();
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// SmoothPtdwConfig

// optional .artm.SmoothPtdwConfig.Type type = 1 [default = MovingAverage];
inline bool SmoothPtdwConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmoothPtdwConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmoothPtdwConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmoothPtdwConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::artm::SmoothPtdwConfig_Type SmoothPtdwConfig::type() const {
  return static_cast< ::artm::SmoothPtdwConfig_Type >(type_);
}
inline void SmoothPtdwConfig::set_type(::artm::SmoothPtdwConfig_Type value) {
  assert(::artm::SmoothPtdwConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 window = 3 [default = 10];
inline bool SmoothPtdwConfig::has_window() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmoothPtdwConfig::set_has_window() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmoothPtdwConfig::clear_has_window() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmoothPtdwConfig::clear_window() {
  window_ = 10;
  clear_has_window();
}
inline ::google::protobuf::int32 SmoothPtdwConfig::window() const {
  return window_;
}
inline void SmoothPtdwConfig::set_window(::google::protobuf::int32 value) {
  set_has_window();
  window_ = value;
}

// optional double threshold = 4 [default = 1];
inline bool SmoothPtdwConfig::has_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmoothPtdwConfig::set_has_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmoothPtdwConfig::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmoothPtdwConfig::clear_threshold() {
  threshold_ = 1;
  clear_has_threshold();
}
inline double SmoothPtdwConfig::threshold() const {
  return threshold_;
}
inline void SmoothPtdwConfig::set_threshold(double value) {
  set_has_threshold();
  threshold_ = value;
}

// -------------------------------------------------------------------

// TopicSelectionThetaConfig

// repeated string topic_name = 1;
inline int TopicSelectionThetaConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void TopicSelectionThetaConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopicSelectionThetaConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* TopicSelectionThetaConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void TopicSelectionThetaConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicSelectionThetaConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicSelectionThetaConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicSelectionThetaConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void TopicSelectionThetaConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void TopicSelectionThetaConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void TopicSelectionThetaConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSelectionThetaConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSelectionThetaConfig::mutable_topic_name() {
  return &topic_name_;
}

// repeated float topic_value = 2;
inline int TopicSelectionThetaConfig::topic_value_size() const {
  return topic_value_.size();
}
inline void TopicSelectionThetaConfig::clear_topic_value() {
  topic_value_.Clear();
}
inline float TopicSelectionThetaConfig::topic_value(int index) const {
  return topic_value_.Get(index);
}
inline void TopicSelectionThetaConfig::set_topic_value(int index, float value) {
  topic_value_.Set(index, value);
}
inline void TopicSelectionThetaConfig::add_topic_value(float value) {
  topic_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TopicSelectionThetaConfig::topic_value() const {
  return topic_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TopicSelectionThetaConfig::mutable_topic_value() {
  return &topic_value_;
}

// repeated float alpha_iter = 3;
inline int TopicSelectionThetaConfig::alpha_iter_size() const {
  return alpha_iter_.size();
}
inline void TopicSelectionThetaConfig::clear_alpha_iter() {
  alpha_iter_.Clear();
}
inline float TopicSelectionThetaConfig::alpha_iter(int index) const {
  return alpha_iter_.Get(index);
}
inline void TopicSelectionThetaConfig::set_alpha_iter(int index, float value) {
  alpha_iter_.Set(index, value);
}
inline void TopicSelectionThetaConfig::add_alpha_iter(float value) {
  alpha_iter_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TopicSelectionThetaConfig::alpha_iter() const {
  return alpha_iter_;
}
inline ::google::protobuf::RepeatedField< float >*
TopicSelectionThetaConfig::mutable_alpha_iter() {
  return &alpha_iter_;
}

// -------------------------------------------------------------------

// TransformConfig

// optional .artm.TransformConfig.TransformType transform_type = 1 [default = Constant];
inline bool TransformConfig::has_transform_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformConfig::set_has_transform_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformConfig::clear_has_transform_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformConfig::clear_transform_type() {
  transform_type_ = 2;
  clear_has_transform_type();
}
inline ::artm::TransformConfig_TransformType TransformConfig::transform_type() const {
  return static_cast< ::artm::TransformConfig_TransformType >(transform_type_);
}
inline void TransformConfig::set_transform_type(::artm::TransformConfig_TransformType value) {
  assert(::artm::TransformConfig_TransformType_IsValid(value));
  set_has_transform_type();
  transform_type_ = value;
}

// optional double n = 2 [default = 1];
inline bool TransformConfig::has_n() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformConfig::set_has_n() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformConfig::clear_has_n() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformConfig::clear_n() {
  n_ = 1;
  clear_has_n();
}
inline double TransformConfig::n() const {
  return n_;
}
inline void TransformConfig::set_n(double value) {
  set_has_n();
  n_ = value;
}

// optional double a = 3 [default = 1];
inline bool TransformConfig::has_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformConfig::set_has_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformConfig::clear_has_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformConfig::clear_a() {
  a_ = 1;
  clear_has_a();
}
inline double TransformConfig::a() const {
  return a_;
}
inline void TransformConfig::set_a(double value) {
  set_has_a();
  a_ = value;
}

// -------------------------------------------------------------------

// ScoreConfig

// optional string name = 1;
inline bool ScoreConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ScoreConfig::name() const {
  return *name_;
}
inline void ScoreConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ScoreConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ScoreConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScoreConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ScoreConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ScoreConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .artm.ScoreConfig.Type type = 2;
inline bool ScoreConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoreConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScoreConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScoreConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::artm::ScoreConfig_Type ScoreConfig::type() const {
  return static_cast< ::artm::ScoreConfig_Type >(type_);
}
inline void ScoreConfig::set_type(::artm::ScoreConfig_Type value) {
  assert(::artm::ScoreConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes config = 3;
inline bool ScoreConfig::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScoreConfig::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScoreConfig::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScoreConfig::clear_config() {
  if (config_ != &::google::protobuf::internal::GetEmptyString()) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& ScoreConfig::config() const {
  return *config_;
}
inline void ScoreConfig::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyString()) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void ScoreConfig::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyString()) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void ScoreConfig::set_config(const void* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyString()) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScoreConfig::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyString()) {
    config_ = new ::std::string;
  }
  return config_;
}
inline ::std::string* ScoreConfig::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ScoreConfig::set_allocated_config(::std::string* config) {
  if (config_ != &::google::protobuf::internal::GetEmptyString()) {
    delete config_;
  }
  if (config) {
    set_has_config();
    config_ = config;
  } else {
    clear_has_config();
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// ScoreData

// optional string name = 1;
inline bool ScoreData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ScoreData::name() const {
  return *name_;
}
inline void ScoreData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ScoreData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ScoreData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScoreData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ScoreData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ScoreData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .artm.ScoreData.Type type = 2;
inline bool ScoreData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoreData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScoreData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScoreData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::artm::ScoreData_Type ScoreData::type() const {
  return static_cast< ::artm::ScoreData_Type >(type_);
}
inline void ScoreData::set_type(::artm::ScoreData_Type value) {
  assert(::artm::ScoreData_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes data = 3;
inline bool ScoreData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScoreData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScoreData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScoreData::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyString()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ScoreData::data() const {
  return *data_;
}
inline void ScoreData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyString()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ScoreData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyString()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void ScoreData::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyString()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScoreData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyString()) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* ScoreData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ScoreData::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// ScoreDataArray

// repeated .artm.ScoreData score = 1;
inline int ScoreDataArray::score_size() const {
  return score_.size();
}
inline void ScoreDataArray::clear_score() {
  score_.Clear();
}
inline const ::artm::ScoreData& ScoreDataArray::score(int index) const {
  return score_.Get(index);
}
inline ::artm::ScoreData* ScoreDataArray::mutable_score(int index) {
  return score_.Mutable(index);
}
inline ::artm::ScoreData* ScoreDataArray::add_score() {
  return score_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >&
ScoreDataArray::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >*
ScoreDataArray::mutable_score() {
  return &score_;
}

// -------------------------------------------------------------------

// PerplexityScoreConfig

// optional .artm.PerplexityScoreConfig.Type model_type = 3 [default = UnigramDocumentModel];
inline bool PerplexityScoreConfig::has_model_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerplexityScoreConfig::set_has_model_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerplexityScoreConfig::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerplexityScoreConfig::clear_model_type() {
  model_type_ = 0;
  clear_has_model_type();
}
inline ::artm::PerplexityScoreConfig_Type PerplexityScoreConfig::model_type() const {
  return static_cast< ::artm::PerplexityScoreConfig_Type >(model_type_);
}
inline void PerplexityScoreConfig::set_model_type(::artm::PerplexityScoreConfig_Type value) {
  assert(::artm::PerplexityScoreConfig_Type_IsValid(value));
  set_has_model_type();
  model_type_ = value;
}

// optional string dictionary_name = 4;
inline bool PerplexityScoreConfig::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerplexityScoreConfig::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerplexityScoreConfig::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerplexityScoreConfig::clear_dictionary_name() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_->clear();
  }
  clear_has_dictionary_name();
}
inline const ::std::string& PerplexityScoreConfig::dictionary_name() const {
  return *dictionary_name_;
}
inline void PerplexityScoreConfig::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void PerplexityScoreConfig::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void PerplexityScoreConfig::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PerplexityScoreConfig::mutable_dictionary_name() {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  return dictionary_name_;
}
inline ::std::string* PerplexityScoreConfig::release_dictionary_name() {
  clear_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_name_;
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void PerplexityScoreConfig::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (dictionary_name) {
    set_has_dictionary_name();
    dictionary_name_ = dictionary_name;
  } else {
    clear_has_dictionary_name();
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional float theta_sparsity_eps = 5 [default = 1e-037];
inline bool PerplexityScoreConfig::has_theta_sparsity_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerplexityScoreConfig::set_has_theta_sparsity_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerplexityScoreConfig::clear_has_theta_sparsity_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerplexityScoreConfig::clear_theta_sparsity_eps() {
  theta_sparsity_eps_ = 1e-037f;
  clear_has_theta_sparsity_eps();
}
inline float PerplexityScoreConfig::theta_sparsity_eps() const {
  return theta_sparsity_eps_;
}
inline void PerplexityScoreConfig::set_theta_sparsity_eps(float value) {
  set_has_theta_sparsity_eps();
  theta_sparsity_eps_ = value;
}

// repeated string theta_sparsity_topic_name = 6;
inline int PerplexityScoreConfig::theta_sparsity_topic_name_size() const {
  return theta_sparsity_topic_name_.size();
}
inline void PerplexityScoreConfig::clear_theta_sparsity_topic_name() {
  theta_sparsity_topic_name_.Clear();
}
inline const ::std::string& PerplexityScoreConfig::theta_sparsity_topic_name(int index) const {
  return theta_sparsity_topic_name_.Get(index);
}
inline ::std::string* PerplexityScoreConfig::mutable_theta_sparsity_topic_name(int index) {
  return theta_sparsity_topic_name_.Mutable(index);
}
inline void PerplexityScoreConfig::set_theta_sparsity_topic_name(int index, const ::std::string& value) {
  theta_sparsity_topic_name_.Mutable(index)->assign(value);
}
inline void PerplexityScoreConfig::set_theta_sparsity_topic_name(int index, const char* value) {
  theta_sparsity_topic_name_.Mutable(index)->assign(value);
}
inline void PerplexityScoreConfig::set_theta_sparsity_topic_name(int index, const char* value, size_t size) {
  theta_sparsity_topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PerplexityScoreConfig::add_theta_sparsity_topic_name() {
  return theta_sparsity_topic_name_.Add();
}
inline void PerplexityScoreConfig::add_theta_sparsity_topic_name(const ::std::string& value) {
  theta_sparsity_topic_name_.Add()->assign(value);
}
inline void PerplexityScoreConfig::add_theta_sparsity_topic_name(const char* value) {
  theta_sparsity_topic_name_.Add()->assign(value);
}
inline void PerplexityScoreConfig::add_theta_sparsity_topic_name(const char* value, size_t size) {
  theta_sparsity_topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PerplexityScoreConfig::theta_sparsity_topic_name() const {
  return theta_sparsity_topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PerplexityScoreConfig::mutable_theta_sparsity_topic_name() {
  return &theta_sparsity_topic_name_;
}

// repeated string class_id = 7;
inline int PerplexityScoreConfig::class_id_size() const {
  return class_id_.size();
}
inline void PerplexityScoreConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& PerplexityScoreConfig::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* PerplexityScoreConfig::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void PerplexityScoreConfig::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void PerplexityScoreConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void PerplexityScoreConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PerplexityScoreConfig::add_class_id() {
  return class_id_.Add();
}
inline void PerplexityScoreConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void PerplexityScoreConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void PerplexityScoreConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PerplexityScoreConfig::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PerplexityScoreConfig::mutable_class_id() {
  return &class_id_;
}

// -------------------------------------------------------------------

// PerplexityScore

// optional double value = 1;
inline bool PerplexityScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerplexityScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerplexityScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerplexityScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double PerplexityScore::value() const {
  return value_;
}
inline void PerplexityScore::set_value(double value) {
  set_has_value();
  value_ = value;
}

// optional double raw = 2;
inline bool PerplexityScore::has_raw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerplexityScore::set_has_raw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerplexityScore::clear_has_raw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerplexityScore::clear_raw() {
  raw_ = 0;
  clear_has_raw();
}
inline double PerplexityScore::raw() const {
  return raw_;
}
inline void PerplexityScore::set_raw(double value) {
  set_has_raw();
  raw_ = value;
}

// optional double normalizer = 3;
inline bool PerplexityScore::has_normalizer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerplexityScore::set_has_normalizer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerplexityScore::clear_has_normalizer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerplexityScore::clear_normalizer() {
  normalizer_ = 0;
  clear_has_normalizer();
}
inline double PerplexityScore::normalizer() const {
  return normalizer_;
}
inline void PerplexityScore::set_normalizer(double value) {
  set_has_normalizer();
  normalizer_ = value;
}

// optional int64 zero_words = 4;
inline bool PerplexityScore::has_zero_words() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PerplexityScore::set_has_zero_words() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PerplexityScore::clear_has_zero_words() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PerplexityScore::clear_zero_words() {
  zero_words_ = GOOGLE_LONGLONG(0);
  clear_has_zero_words();
}
inline ::google::protobuf::int64 PerplexityScore::zero_words() const {
  return zero_words_;
}
inline void PerplexityScore::set_zero_words(::google::protobuf::int64 value) {
  set_has_zero_words();
  zero_words_ = value;
}

// optional double theta_sparsity_value = 5;
inline bool PerplexityScore::has_theta_sparsity_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PerplexityScore::set_has_theta_sparsity_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PerplexityScore::clear_has_theta_sparsity_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PerplexityScore::clear_theta_sparsity_value() {
  theta_sparsity_value_ = 0;
  clear_has_theta_sparsity_value();
}
inline double PerplexityScore::theta_sparsity_value() const {
  return theta_sparsity_value_;
}
inline void PerplexityScore::set_theta_sparsity_value(double value) {
  set_has_theta_sparsity_value();
  theta_sparsity_value_ = value;
}

// optional int32 theta_sparsity_zero_topics = 6;
inline bool PerplexityScore::has_theta_sparsity_zero_topics() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PerplexityScore::set_has_theta_sparsity_zero_topics() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PerplexityScore::clear_has_theta_sparsity_zero_topics() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PerplexityScore::clear_theta_sparsity_zero_topics() {
  theta_sparsity_zero_topics_ = 0;
  clear_has_theta_sparsity_zero_topics();
}
inline ::google::protobuf::int32 PerplexityScore::theta_sparsity_zero_topics() const {
  return theta_sparsity_zero_topics_;
}
inline void PerplexityScore::set_theta_sparsity_zero_topics(::google::protobuf::int32 value) {
  set_has_theta_sparsity_zero_topics();
  theta_sparsity_zero_topics_ = value;
}

// optional int32 theta_sparsity_total_topics = 7;
inline bool PerplexityScore::has_theta_sparsity_total_topics() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PerplexityScore::set_has_theta_sparsity_total_topics() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PerplexityScore::clear_has_theta_sparsity_total_topics() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PerplexityScore::clear_theta_sparsity_total_topics() {
  theta_sparsity_total_topics_ = 0;
  clear_has_theta_sparsity_total_topics();
}
inline ::google::protobuf::int32 PerplexityScore::theta_sparsity_total_topics() const {
  return theta_sparsity_total_topics_;
}
inline void PerplexityScore::set_theta_sparsity_total_topics(::google::protobuf::int32 value) {
  set_has_theta_sparsity_total_topics();
  theta_sparsity_total_topics_ = value;
}

// -------------------------------------------------------------------

// SparsityThetaScoreConfig

// optional float eps = 3 [default = 1e-037];
inline bool SparsityThetaScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparsityThetaScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparsityThetaScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparsityThetaScoreConfig::clear_eps() {
  eps_ = 1e-037f;
  clear_has_eps();
}
inline float SparsityThetaScoreConfig::eps() const {
  return eps_;
}
inline void SparsityThetaScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
}

// repeated string topic_name = 4;
inline int SparsityThetaScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void SparsityThetaScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& SparsityThetaScoreConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* SparsityThetaScoreConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void SparsityThetaScoreConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void SparsityThetaScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void SparsityThetaScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SparsityThetaScoreConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void SparsityThetaScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void SparsityThetaScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void SparsityThetaScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SparsityThetaScoreConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SparsityThetaScoreConfig::mutable_topic_name() {
  return &topic_name_;
}

// -------------------------------------------------------------------

// SparsityThetaScore

// optional double value = 1;
inline bool SparsityThetaScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparsityThetaScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparsityThetaScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparsityThetaScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double SparsityThetaScore::value() const {
  return value_;
}
inline void SparsityThetaScore::set_value(double value) {
  set_has_value();
  value_ = value;
}

// optional int64 zero_topics = 2;
inline bool SparsityThetaScore::has_zero_topics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SparsityThetaScore::set_has_zero_topics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SparsityThetaScore::clear_has_zero_topics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SparsityThetaScore::clear_zero_topics() {
  zero_topics_ = GOOGLE_LONGLONG(0);
  clear_has_zero_topics();
}
inline ::google::protobuf::int64 SparsityThetaScore::zero_topics() const {
  return zero_topics_;
}
inline void SparsityThetaScore::set_zero_topics(::google::protobuf::int64 value) {
  set_has_zero_topics();
  zero_topics_ = value;
}

// optional int64 total_topics = 3;
inline bool SparsityThetaScore::has_total_topics() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SparsityThetaScore::set_has_total_topics() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SparsityThetaScore::clear_has_total_topics() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SparsityThetaScore::clear_total_topics() {
  total_topics_ = GOOGLE_LONGLONG(0);
  clear_has_total_topics();
}
inline ::google::protobuf::int64 SparsityThetaScore::total_topics() const {
  return total_topics_;
}
inline void SparsityThetaScore::set_total_topics(::google::protobuf::int64 value) {
  set_has_total_topics();
  total_topics_ = value;
}

// -------------------------------------------------------------------

// SparsityPhiScoreConfig

// optional float eps = 1 [default = 1e-037];
inline bool SparsityPhiScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparsityPhiScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparsityPhiScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparsityPhiScoreConfig::clear_eps() {
  eps_ = 1e-037f;
  clear_has_eps();
}
inline float SparsityPhiScoreConfig::eps() const {
  return eps_;
}
inline void SparsityPhiScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
}

// optional string class_id = 2 [default = "@default_class"];
inline bool SparsityPhiScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SparsityPhiScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SparsityPhiScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SparsityPhiScoreConfig::clear_class_id() {
  if (class_id_ != _default_class_id_) {
    class_id_->assign(*_default_class_id_);
  }
  clear_has_class_id();
}
inline const ::std::string& SparsityPhiScoreConfig::class_id() const {
  return *class_id_;
}
inline void SparsityPhiScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void SparsityPhiScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void SparsityPhiScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SparsityPhiScoreConfig::mutable_class_id() {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string(*_default_class_id_);
  }
  return class_id_;
}
inline ::std::string* SparsityPhiScoreConfig::release_class_id() {
  clear_has_class_id();
  if (class_id_ == _default_class_id_) {
    return NULL;
  } else {
    ::std::string* temp = class_id_;
    class_id_ = const_cast< ::std::string*>(_default_class_id_);
    return temp;
  }
}
inline void SparsityPhiScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id_ != _default_class_id_) {
    delete class_id_;
  }
  if (class_id) {
    set_has_class_id();
    class_id_ = class_id;
  } else {
    clear_has_class_id();
    class_id_ = const_cast< ::std::string*>(_default_class_id_);
  }
}

// repeated string topic_name = 3;
inline int SparsityPhiScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void SparsityPhiScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& SparsityPhiScoreConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* SparsityPhiScoreConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void SparsityPhiScoreConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void SparsityPhiScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void SparsityPhiScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SparsityPhiScoreConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void SparsityPhiScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void SparsityPhiScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void SparsityPhiScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SparsityPhiScoreConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SparsityPhiScoreConfig::mutable_topic_name() {
  return &topic_name_;
}

// -------------------------------------------------------------------

// SparsityPhiScore

// optional double value = 1;
inline bool SparsityPhiScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparsityPhiScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparsityPhiScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparsityPhiScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double SparsityPhiScore::value() const {
  return value_;
}
inline void SparsityPhiScore::set_value(double value) {
  set_has_value();
  value_ = value;
}

// optional int64 zero_tokens = 2;
inline bool SparsityPhiScore::has_zero_tokens() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SparsityPhiScore::set_has_zero_tokens() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SparsityPhiScore::clear_has_zero_tokens() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SparsityPhiScore::clear_zero_tokens() {
  zero_tokens_ = GOOGLE_LONGLONG(0);
  clear_has_zero_tokens();
}
inline ::google::protobuf::int64 SparsityPhiScore::zero_tokens() const {
  return zero_tokens_;
}
inline void SparsityPhiScore::set_zero_tokens(::google::protobuf::int64 value) {
  set_has_zero_tokens();
  zero_tokens_ = value;
}

// optional int64 total_tokens = 3;
inline bool SparsityPhiScore::has_total_tokens() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SparsityPhiScore::set_has_total_tokens() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SparsityPhiScore::clear_has_total_tokens() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SparsityPhiScore::clear_total_tokens() {
  total_tokens_ = GOOGLE_LONGLONG(0);
  clear_has_total_tokens();
}
inline ::google::protobuf::int64 SparsityPhiScore::total_tokens() const {
  return total_tokens_;
}
inline void SparsityPhiScore::set_total_tokens(::google::protobuf::int64 value) {
  set_has_total_tokens();
  total_tokens_ = value;
}

// -------------------------------------------------------------------

// ItemsProcessedScoreConfig

// -------------------------------------------------------------------

// ItemsProcessedScore

// optional int32 value = 1 [default = 0];
inline bool ItemsProcessedScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemsProcessedScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemsProcessedScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemsProcessedScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ItemsProcessedScore::value() const {
  return value_;
}
inline void ItemsProcessedScore::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 num_batches = 2 [default = 0];
inline bool ItemsProcessedScore::has_num_batches() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemsProcessedScore::set_has_num_batches() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemsProcessedScore::clear_has_num_batches() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemsProcessedScore::clear_num_batches() {
  num_batches_ = 0;
  clear_has_num_batches();
}
inline ::google::protobuf::int32 ItemsProcessedScore::num_batches() const {
  return num_batches_;
}
inline void ItemsProcessedScore::set_num_batches(::google::protobuf::int32 value) {
  set_has_num_batches();
  num_batches_ = value;
}

// -------------------------------------------------------------------

// TopTokensScoreConfig

// optional int32 num_tokens = 1 [default = 10];
inline bool TopTokensScoreConfig::has_num_tokens() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopTokensScoreConfig::set_has_num_tokens() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopTokensScoreConfig::clear_has_num_tokens() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopTokensScoreConfig::clear_num_tokens() {
  num_tokens_ = 10;
  clear_has_num_tokens();
}
inline ::google::protobuf::int32 TopTokensScoreConfig::num_tokens() const {
  return num_tokens_;
}
inline void TopTokensScoreConfig::set_num_tokens(::google::protobuf::int32 value) {
  set_has_num_tokens();
  num_tokens_ = value;
}

// optional string class_id = 2 [default = "@default_class"];
inline bool TopTokensScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopTokensScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopTokensScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopTokensScoreConfig::clear_class_id() {
  if (class_id_ != _default_class_id_) {
    class_id_->assign(*_default_class_id_);
  }
  clear_has_class_id();
}
inline const ::std::string& TopTokensScoreConfig::class_id() const {
  return *class_id_;
}
inline void TopTokensScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void TopTokensScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void TopTokensScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopTokensScoreConfig::mutable_class_id() {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string(*_default_class_id_);
  }
  return class_id_;
}
inline ::std::string* TopTokensScoreConfig::release_class_id() {
  clear_has_class_id();
  if (class_id_ == _default_class_id_) {
    return NULL;
  } else {
    ::std::string* temp = class_id_;
    class_id_ = const_cast< ::std::string*>(_default_class_id_);
    return temp;
  }
}
inline void TopTokensScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id_ != _default_class_id_) {
    delete class_id_;
  }
  if (class_id) {
    set_has_class_id();
    class_id_ = class_id;
  } else {
    clear_has_class_id();
    class_id_ = const_cast< ::std::string*>(_default_class_id_);
  }
}

// repeated string topic_name = 3;
inline int TopTokensScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void TopTokensScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopTokensScoreConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* TopTokensScoreConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void TopTokensScoreConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopTokensScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopTokensScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopTokensScoreConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void TopTokensScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void TopTokensScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void TopTokensScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopTokensScoreConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopTokensScoreConfig::mutable_topic_name() {
  return &topic_name_;
}

// optional string cooccurrence_dictionary_name = 4;
inline bool TopTokensScoreConfig::has_cooccurrence_dictionary_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopTokensScoreConfig::set_has_cooccurrence_dictionary_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopTokensScoreConfig::clear_has_cooccurrence_dictionary_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopTokensScoreConfig::clear_cooccurrence_dictionary_name() {
  if (cooccurrence_dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    cooccurrence_dictionary_name_->clear();
  }
  clear_has_cooccurrence_dictionary_name();
}
inline const ::std::string& TopTokensScoreConfig::cooccurrence_dictionary_name() const {
  return *cooccurrence_dictionary_name_;
}
inline void TopTokensScoreConfig::set_cooccurrence_dictionary_name(const ::std::string& value) {
  set_has_cooccurrence_dictionary_name();
  if (cooccurrence_dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    cooccurrence_dictionary_name_ = new ::std::string;
  }
  cooccurrence_dictionary_name_->assign(value);
}
inline void TopTokensScoreConfig::set_cooccurrence_dictionary_name(const char* value) {
  set_has_cooccurrence_dictionary_name();
  if (cooccurrence_dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    cooccurrence_dictionary_name_ = new ::std::string;
  }
  cooccurrence_dictionary_name_->assign(value);
}
inline void TopTokensScoreConfig::set_cooccurrence_dictionary_name(const char* value, size_t size) {
  set_has_cooccurrence_dictionary_name();
  if (cooccurrence_dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    cooccurrence_dictionary_name_ = new ::std::string;
  }
  cooccurrence_dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopTokensScoreConfig::mutable_cooccurrence_dictionary_name() {
  set_has_cooccurrence_dictionary_name();
  if (cooccurrence_dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    cooccurrence_dictionary_name_ = new ::std::string;
  }
  return cooccurrence_dictionary_name_;
}
inline ::std::string* TopTokensScoreConfig::release_cooccurrence_dictionary_name() {
  clear_has_cooccurrence_dictionary_name();
  if (cooccurrence_dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = cooccurrence_dictionary_name_;
    cooccurrence_dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void TopTokensScoreConfig::set_allocated_cooccurrence_dictionary_name(::std::string* cooccurrence_dictionary_name) {
  if (cooccurrence_dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete cooccurrence_dictionary_name_;
  }
  if (cooccurrence_dictionary_name) {
    set_has_cooccurrence_dictionary_name();
    cooccurrence_dictionary_name_ = cooccurrence_dictionary_name;
  } else {
    clear_has_cooccurrence_dictionary_name();
    cooccurrence_dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// TopTokensScore

// optional int32 num_entries = 1;
inline bool TopTokensScore::has_num_entries() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopTokensScore::set_has_num_entries() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopTokensScore::clear_has_num_entries() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopTokensScore::clear_num_entries() {
  num_entries_ = 0;
  clear_has_num_entries();
}
inline ::google::protobuf::int32 TopTokensScore::num_entries() const {
  return num_entries_;
}
inline void TopTokensScore::set_num_entries(::google::protobuf::int32 value) {
  set_has_num_entries();
  num_entries_ = value;
}

// repeated string topic_name = 2;
inline int TopTokensScore::topic_name_size() const {
  return topic_name_.size();
}
inline void TopTokensScore::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopTokensScore::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* TopTokensScore::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void TopTokensScore::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopTokensScore::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopTokensScore::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopTokensScore::add_topic_name() {
  return topic_name_.Add();
}
inline void TopTokensScore::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void TopTokensScore::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void TopTokensScore::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopTokensScore::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopTokensScore::mutable_topic_name() {
  return &topic_name_;
}

// repeated int32 topic_index = 3;
inline int TopTokensScore::topic_index_size() const {
  return topic_index_.size();
}
inline void TopTokensScore::clear_topic_index() {
  topic_index_.Clear();
}
inline ::google::protobuf::int32 TopTokensScore::topic_index(int index) const {
  return topic_index_.Get(index);
}
inline void TopTokensScore::set_topic_index(int index, ::google::protobuf::int32 value) {
  topic_index_.Set(index, value);
}
inline void TopTokensScore::add_topic_index(::google::protobuf::int32 value) {
  topic_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TopTokensScore::topic_index() const {
  return topic_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TopTokensScore::mutable_topic_index() {
  return &topic_index_;
}

// repeated string token = 4;
inline int TopTokensScore::token_size() const {
  return token_.size();
}
inline void TopTokensScore::clear_token() {
  token_.Clear();
}
inline const ::std::string& TopTokensScore::token(int index) const {
  return token_.Get(index);
}
inline ::std::string* TopTokensScore::mutable_token(int index) {
  return token_.Mutable(index);
}
inline void TopTokensScore::set_token(int index, const ::std::string& value) {
  token_.Mutable(index)->assign(value);
}
inline void TopTokensScore::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
}
inline void TopTokensScore::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopTokensScore::add_token() {
  return token_.Add();
}
inline void TopTokensScore::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
}
inline void TopTokensScore::add_token(const char* value) {
  token_.Add()->assign(value);
}
inline void TopTokensScore::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopTokensScore::token() const {
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopTokensScore::mutable_token() {
  return &token_;
}

// repeated float weight = 5;
inline int TopTokensScore::weight_size() const {
  return weight_.size();
}
inline void TopTokensScore::clear_weight() {
  weight_.Clear();
}
inline float TopTokensScore::weight(int index) const {
  return weight_.Get(index);
}
inline void TopTokensScore::set_weight(int index, float value) {
  weight_.Set(index, value);
}
inline void TopTokensScore::add_weight(float value) {
  weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
TopTokensScore::weight() const {
  return weight_;
}
inline ::google::protobuf::RepeatedField< float >*
TopTokensScore::mutable_weight() {
  return &weight_;
}

// optional .artm.FloatArray coherence = 6;
inline bool TopTokensScore::has_coherence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TopTokensScore::set_has_coherence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TopTokensScore::clear_has_coherence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TopTokensScore::clear_coherence() {
  if (coherence_ != NULL) coherence_->::artm::FloatArray::Clear();
  clear_has_coherence();
}
inline const ::artm::FloatArray& TopTokensScore::coherence() const {
  return coherence_ != NULL ? *coherence_ : *default_instance_->coherence_;
}
inline ::artm::FloatArray* TopTokensScore::mutable_coherence() {
  set_has_coherence();
  if (coherence_ == NULL) coherence_ = new ::artm::FloatArray;
  return coherence_;
}
inline ::artm::FloatArray* TopTokensScore::release_coherence() {
  clear_has_coherence();
  ::artm::FloatArray* temp = coherence_;
  coherence_ = NULL;
  return temp;
}
inline void TopTokensScore::set_allocated_coherence(::artm::FloatArray* coherence) {
  delete coherence_;
  coherence_ = coherence;
  if (coherence) {
    set_has_coherence();
  } else {
    clear_has_coherence();
  }
}

// optional float average_coherence = 7;
inline bool TopTokensScore::has_average_coherence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TopTokensScore::set_has_average_coherence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TopTokensScore::clear_has_average_coherence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TopTokensScore::clear_average_coherence() {
  average_coherence_ = 0;
  clear_has_average_coherence();
}
inline float TopTokensScore::average_coherence() const {
  return average_coherence_;
}
inline void TopTokensScore::set_average_coherence(float value) {
  set_has_average_coherence();
  average_coherence_ = value;
}

// -------------------------------------------------------------------

// ThetaSnippetScoreConfig

// repeated int32 item_id = 3 [packed = true];
inline int ThetaSnippetScoreConfig::item_id_size() const {
  return item_id_.size();
}
inline void ThetaSnippetScoreConfig::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 ThetaSnippetScoreConfig::item_id(int index) const {
  return item_id_.Get(index);
}
inline void ThetaSnippetScoreConfig::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void ThetaSnippetScoreConfig::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ThetaSnippetScoreConfig::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ThetaSnippetScoreConfig::mutable_item_id() {
  return &item_id_;
}

// optional int32 item_count = 4 [default = 10];
inline bool ThetaSnippetScoreConfig::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThetaSnippetScoreConfig::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThetaSnippetScoreConfig::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThetaSnippetScoreConfig::clear_item_count() {
  item_count_ = 10;
  clear_has_item_count();
}
inline ::google::protobuf::int32 ThetaSnippetScoreConfig::item_count() const {
  return item_count_;
}
inline void ThetaSnippetScoreConfig::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
}

// -------------------------------------------------------------------

// ThetaSnippetScore

// repeated int32 item_id = 1;
inline int ThetaSnippetScore::item_id_size() const {
  return item_id_.size();
}
inline void ThetaSnippetScore::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 ThetaSnippetScore::item_id(int index) const {
  return item_id_.Get(index);
}
inline void ThetaSnippetScore::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void ThetaSnippetScore::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ThetaSnippetScore::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ThetaSnippetScore::mutable_item_id() {
  return &item_id_;
}

// repeated .artm.FloatArray values = 2;
inline int ThetaSnippetScore::values_size() const {
  return values_.size();
}
inline void ThetaSnippetScore::clear_values() {
  values_.Clear();
}
inline const ::artm::FloatArray& ThetaSnippetScore::values(int index) const {
  return values_.Get(index);
}
inline ::artm::FloatArray* ThetaSnippetScore::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::artm::FloatArray* ThetaSnippetScore::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
ThetaSnippetScore::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
ThetaSnippetScore::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// TopicKernelScoreConfig

// optional float eps = 1 [default = 1e-037];
inline bool TopicKernelScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicKernelScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicKernelScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicKernelScoreConfig::clear_eps() {
  eps_ = 1e-037f;
  clear_has_eps();
}
inline float TopicKernelScoreConfig::eps() const {
  return eps_;
}
inline void TopicKernelScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
}

// optional string class_id = 2 [default = "@default_class"];
inline bool TopicKernelScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicKernelScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicKernelScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicKernelScoreConfig::clear_class_id() {
  if (class_id_ != _default_class_id_) {
    class_id_->assign(*_default_class_id_);
  }
  clear_has_class_id();
}
inline const ::std::string& TopicKernelScoreConfig::class_id() const {
  return *class_id_;
}
inline void TopicKernelScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void TopicKernelScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void TopicKernelScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicKernelScoreConfig::mutable_class_id() {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string(*_default_class_id_);
  }
  return class_id_;
}
inline ::std::string* TopicKernelScoreConfig::release_class_id() {
  clear_has_class_id();
  if (class_id_ == _default_class_id_) {
    return NULL;
  } else {
    ::std::string* temp = class_id_;
    class_id_ = const_cast< ::std::string*>(_default_class_id_);
    return temp;
  }
}
inline void TopicKernelScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id_ != _default_class_id_) {
    delete class_id_;
  }
  if (class_id) {
    set_has_class_id();
    class_id_ = class_id;
  } else {
    clear_has_class_id();
    class_id_ = const_cast< ::std::string*>(_default_class_id_);
  }
}

// repeated string topic_name = 3;
inline int TopicKernelScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void TopicKernelScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopicKernelScoreConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* TopicKernelScoreConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void TopicKernelScoreConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicKernelScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicKernelScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicKernelScoreConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void TopicKernelScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void TopicKernelScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void TopicKernelScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicKernelScoreConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicKernelScoreConfig::mutable_topic_name() {
  return &topic_name_;
}

// optional double probability_mass_threshold = 4 [default = 0.1];
inline bool TopicKernelScoreConfig::has_probability_mass_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopicKernelScoreConfig::set_has_probability_mass_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopicKernelScoreConfig::clear_has_probability_mass_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopicKernelScoreConfig::clear_probability_mass_threshold() {
  probability_mass_threshold_ = 0.1;
  clear_has_probability_mass_threshold();
}
inline double TopicKernelScoreConfig::probability_mass_threshold() const {
  return probability_mass_threshold_;
}
inline void TopicKernelScoreConfig::set_probability_mass_threshold(double value) {
  set_has_probability_mass_threshold();
  probability_mass_threshold_ = value;
}

// optional string cooccurrence_dictionary_name = 5;
inline bool TopicKernelScoreConfig::has_cooccurrence_dictionary_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopicKernelScoreConfig::set_has_cooccurrence_dictionary_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopicKernelScoreConfig::clear_has_cooccurrence_dictionary_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopicKernelScoreConfig::clear_cooccurrence_dictionary_name() {
  if (cooccurrence_dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    cooccurrence_dictionary_name_->clear();
  }
  clear_has_cooccurrence_dictionary_name();
}
inline const ::std::string& TopicKernelScoreConfig::cooccurrence_dictionary_name() const {
  return *cooccurrence_dictionary_name_;
}
inline void TopicKernelScoreConfig::set_cooccurrence_dictionary_name(const ::std::string& value) {
  set_has_cooccurrence_dictionary_name();
  if (cooccurrence_dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    cooccurrence_dictionary_name_ = new ::std::string;
  }
  cooccurrence_dictionary_name_->assign(value);
}
inline void TopicKernelScoreConfig::set_cooccurrence_dictionary_name(const char* value) {
  set_has_cooccurrence_dictionary_name();
  if (cooccurrence_dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    cooccurrence_dictionary_name_ = new ::std::string;
  }
  cooccurrence_dictionary_name_->assign(value);
}
inline void TopicKernelScoreConfig::set_cooccurrence_dictionary_name(const char* value, size_t size) {
  set_has_cooccurrence_dictionary_name();
  if (cooccurrence_dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    cooccurrence_dictionary_name_ = new ::std::string;
  }
  cooccurrence_dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicKernelScoreConfig::mutable_cooccurrence_dictionary_name() {
  set_has_cooccurrence_dictionary_name();
  if (cooccurrence_dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    cooccurrence_dictionary_name_ = new ::std::string;
  }
  return cooccurrence_dictionary_name_;
}
inline ::std::string* TopicKernelScoreConfig::release_cooccurrence_dictionary_name() {
  clear_has_cooccurrence_dictionary_name();
  if (cooccurrence_dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = cooccurrence_dictionary_name_;
    cooccurrence_dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void TopicKernelScoreConfig::set_allocated_cooccurrence_dictionary_name(::std::string* cooccurrence_dictionary_name) {
  if (cooccurrence_dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete cooccurrence_dictionary_name_;
  }
  if (cooccurrence_dictionary_name) {
    set_has_cooccurrence_dictionary_name();
    cooccurrence_dictionary_name_ = cooccurrence_dictionary_name;
  } else {
    clear_has_cooccurrence_dictionary_name();
    cooccurrence_dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// TopicKernelScore

// optional .artm.DoubleArray kernel_size = 1;
inline bool TopicKernelScore::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicKernelScore::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicKernelScore::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicKernelScore::clear_kernel_size() {
  if (kernel_size_ != NULL) kernel_size_->::artm::DoubleArray::Clear();
  clear_has_kernel_size();
}
inline const ::artm::DoubleArray& TopicKernelScore::kernel_size() const {
  return kernel_size_ != NULL ? *kernel_size_ : *default_instance_->kernel_size_;
}
inline ::artm::DoubleArray* TopicKernelScore::mutable_kernel_size() {
  set_has_kernel_size();
  if (kernel_size_ == NULL) kernel_size_ = new ::artm::DoubleArray;
  return kernel_size_;
}
inline ::artm::DoubleArray* TopicKernelScore::release_kernel_size() {
  clear_has_kernel_size();
  ::artm::DoubleArray* temp = kernel_size_;
  kernel_size_ = NULL;
  return temp;
}
inline void TopicKernelScore::set_allocated_kernel_size(::artm::DoubleArray* kernel_size) {
  delete kernel_size_;
  kernel_size_ = kernel_size;
  if (kernel_size) {
    set_has_kernel_size();
  } else {
    clear_has_kernel_size();
  }
}

// optional .artm.DoubleArray kernel_purity = 2;
inline bool TopicKernelScore::has_kernel_purity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicKernelScore::set_has_kernel_purity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicKernelScore::clear_has_kernel_purity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicKernelScore::clear_kernel_purity() {
  if (kernel_purity_ != NULL) kernel_purity_->::artm::DoubleArray::Clear();
  clear_has_kernel_purity();
}
inline const ::artm::DoubleArray& TopicKernelScore::kernel_purity() const {
  return kernel_purity_ != NULL ? *kernel_purity_ : *default_instance_->kernel_purity_;
}
inline ::artm::DoubleArray* TopicKernelScore::mutable_kernel_purity() {
  set_has_kernel_purity();
  if (kernel_purity_ == NULL) kernel_purity_ = new ::artm::DoubleArray;
  return kernel_purity_;
}
inline ::artm::DoubleArray* TopicKernelScore::release_kernel_purity() {
  clear_has_kernel_purity();
  ::artm::DoubleArray* temp = kernel_purity_;
  kernel_purity_ = NULL;
  return temp;
}
inline void TopicKernelScore::set_allocated_kernel_purity(::artm::DoubleArray* kernel_purity) {
  delete kernel_purity_;
  kernel_purity_ = kernel_purity;
  if (kernel_purity) {
    set_has_kernel_purity();
  } else {
    clear_has_kernel_purity();
  }
}

// optional .artm.DoubleArray kernel_contrast = 3;
inline bool TopicKernelScore::has_kernel_contrast() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopicKernelScore::set_has_kernel_contrast() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopicKernelScore::clear_has_kernel_contrast() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopicKernelScore::clear_kernel_contrast() {
  if (kernel_contrast_ != NULL) kernel_contrast_->::artm::DoubleArray::Clear();
  clear_has_kernel_contrast();
}
inline const ::artm::DoubleArray& TopicKernelScore::kernel_contrast() const {
  return kernel_contrast_ != NULL ? *kernel_contrast_ : *default_instance_->kernel_contrast_;
}
inline ::artm::DoubleArray* TopicKernelScore::mutable_kernel_contrast() {
  set_has_kernel_contrast();
  if (kernel_contrast_ == NULL) kernel_contrast_ = new ::artm::DoubleArray;
  return kernel_contrast_;
}
inline ::artm::DoubleArray* TopicKernelScore::release_kernel_contrast() {
  clear_has_kernel_contrast();
  ::artm::DoubleArray* temp = kernel_contrast_;
  kernel_contrast_ = NULL;
  return temp;
}
inline void TopicKernelScore::set_allocated_kernel_contrast(::artm::DoubleArray* kernel_contrast) {
  delete kernel_contrast_;
  kernel_contrast_ = kernel_contrast;
  if (kernel_contrast) {
    set_has_kernel_contrast();
  } else {
    clear_has_kernel_contrast();
  }
}

// optional double average_kernel_size = 4;
inline bool TopicKernelScore::has_average_kernel_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopicKernelScore::set_has_average_kernel_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopicKernelScore::clear_has_average_kernel_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopicKernelScore::clear_average_kernel_size() {
  average_kernel_size_ = 0;
  clear_has_average_kernel_size();
}
inline double TopicKernelScore::average_kernel_size() const {
  return average_kernel_size_;
}
inline void TopicKernelScore::set_average_kernel_size(double value) {
  set_has_average_kernel_size();
  average_kernel_size_ = value;
}

// optional double average_kernel_purity = 5;
inline bool TopicKernelScore::has_average_kernel_purity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopicKernelScore::set_has_average_kernel_purity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopicKernelScore::clear_has_average_kernel_purity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopicKernelScore::clear_average_kernel_purity() {
  average_kernel_purity_ = 0;
  clear_has_average_kernel_purity();
}
inline double TopicKernelScore::average_kernel_purity() const {
  return average_kernel_purity_;
}
inline void TopicKernelScore::set_average_kernel_purity(double value) {
  set_has_average_kernel_purity();
  average_kernel_purity_ = value;
}

// optional double average_kernel_contrast = 6;
inline bool TopicKernelScore::has_average_kernel_contrast() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TopicKernelScore::set_has_average_kernel_contrast() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TopicKernelScore::clear_has_average_kernel_contrast() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TopicKernelScore::clear_average_kernel_contrast() {
  average_kernel_contrast_ = 0;
  clear_has_average_kernel_contrast();
}
inline double TopicKernelScore::average_kernel_contrast() const {
  return average_kernel_contrast_;
}
inline void TopicKernelScore::set_average_kernel_contrast(double value) {
  set_has_average_kernel_contrast();
  average_kernel_contrast_ = value;
}

// optional .artm.DoubleArray coherence = 7;
inline bool TopicKernelScore::has_coherence() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TopicKernelScore::set_has_coherence() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TopicKernelScore::clear_has_coherence() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TopicKernelScore::clear_coherence() {
  if (coherence_ != NULL) coherence_->::artm::DoubleArray::Clear();
  clear_has_coherence();
}
inline const ::artm::DoubleArray& TopicKernelScore::coherence() const {
  return coherence_ != NULL ? *coherence_ : *default_instance_->coherence_;
}
inline ::artm::DoubleArray* TopicKernelScore::mutable_coherence() {
  set_has_coherence();
  if (coherence_ == NULL) coherence_ = new ::artm::DoubleArray;
  return coherence_;
}
inline ::artm::DoubleArray* TopicKernelScore::release_coherence() {
  clear_has_coherence();
  ::artm::DoubleArray* temp = coherence_;
  coherence_ = NULL;
  return temp;
}
inline void TopicKernelScore::set_allocated_coherence(::artm::DoubleArray* coherence) {
  delete coherence_;
  coherence_ = coherence;
  if (coherence) {
    set_has_coherence();
  } else {
    clear_has_coherence();
  }
}

// optional float average_coherence = 8;
inline bool TopicKernelScore::has_average_coherence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TopicKernelScore::set_has_average_coherence() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TopicKernelScore::clear_has_average_coherence() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TopicKernelScore::clear_average_coherence() {
  average_coherence_ = 0;
  clear_has_average_coherence();
}
inline float TopicKernelScore::average_coherence() const {
  return average_coherence_;
}
inline void TopicKernelScore::set_average_coherence(float value) {
  set_has_average_coherence();
  average_coherence_ = value;
}

// repeated .artm.StringArray kernel_tokens = 9;
inline int TopicKernelScore::kernel_tokens_size() const {
  return kernel_tokens_.size();
}
inline void TopicKernelScore::clear_kernel_tokens() {
  kernel_tokens_.Clear();
}
inline const ::artm::StringArray& TopicKernelScore::kernel_tokens(int index) const {
  return kernel_tokens_.Get(index);
}
inline ::artm::StringArray* TopicKernelScore::mutable_kernel_tokens(int index) {
  return kernel_tokens_.Mutable(index);
}
inline ::artm::StringArray* TopicKernelScore::add_kernel_tokens() {
  return kernel_tokens_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::StringArray >&
TopicKernelScore::kernel_tokens() const {
  return kernel_tokens_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::StringArray >*
TopicKernelScore::mutable_kernel_tokens() {
  return &kernel_tokens_;
}

// optional .artm.StringArray topic_name = 10;
inline bool TopicKernelScore::has_topic_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TopicKernelScore::set_has_topic_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TopicKernelScore::clear_has_topic_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TopicKernelScore::clear_topic_name() {
  if (topic_name_ != NULL) topic_name_->::artm::StringArray::Clear();
  clear_has_topic_name();
}
inline const ::artm::StringArray& TopicKernelScore::topic_name() const {
  return topic_name_ != NULL ? *topic_name_ : *default_instance_->topic_name_;
}
inline ::artm::StringArray* TopicKernelScore::mutable_topic_name() {
  set_has_topic_name();
  if (topic_name_ == NULL) topic_name_ = new ::artm::StringArray;
  return topic_name_;
}
inline ::artm::StringArray* TopicKernelScore::release_topic_name() {
  clear_has_topic_name();
  ::artm::StringArray* temp = topic_name_;
  topic_name_ = NULL;
  return temp;
}
inline void TopicKernelScore::set_allocated_topic_name(::artm::StringArray* topic_name) {
  delete topic_name_;
  topic_name_ = topic_name;
  if (topic_name) {
    set_has_topic_name();
  } else {
    clear_has_topic_name();
  }
}

// -------------------------------------------------------------------

// TopicMassPhiScoreConfig

// optional float eps = 1 [default = 1e-037];
inline bool TopicMassPhiScoreConfig::has_eps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicMassPhiScoreConfig::set_has_eps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicMassPhiScoreConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicMassPhiScoreConfig::clear_eps() {
  eps_ = 1e-037f;
  clear_has_eps();
}
inline float TopicMassPhiScoreConfig::eps() const {
  return eps_;
}
inline void TopicMassPhiScoreConfig::set_eps(float value) {
  set_has_eps();
  eps_ = value;
}

// optional string class_id = 2 [default = "@default_class"];
inline bool TopicMassPhiScoreConfig::has_class_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicMassPhiScoreConfig::set_has_class_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicMassPhiScoreConfig::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicMassPhiScoreConfig::clear_class_id() {
  if (class_id_ != _default_class_id_) {
    class_id_->assign(*_default_class_id_);
  }
  clear_has_class_id();
}
inline const ::std::string& TopicMassPhiScoreConfig::class_id() const {
  return *class_id_;
}
inline void TopicMassPhiScoreConfig::set_class_id(const ::std::string& value) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void TopicMassPhiScoreConfig::set_class_id(const char* value) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void TopicMassPhiScoreConfig::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicMassPhiScoreConfig::mutable_class_id() {
  set_has_class_id();
  if (class_id_ == _default_class_id_) {
    class_id_ = new ::std::string(*_default_class_id_);
  }
  return class_id_;
}
inline ::std::string* TopicMassPhiScoreConfig::release_class_id() {
  clear_has_class_id();
  if (class_id_ == _default_class_id_) {
    return NULL;
  } else {
    ::std::string* temp = class_id_;
    class_id_ = const_cast< ::std::string*>(_default_class_id_);
    return temp;
  }
}
inline void TopicMassPhiScoreConfig::set_allocated_class_id(::std::string* class_id) {
  if (class_id_ != _default_class_id_) {
    delete class_id_;
  }
  if (class_id) {
    set_has_class_id();
    class_id_ = class_id;
  } else {
    clear_has_class_id();
    class_id_ = const_cast< ::std::string*>(_default_class_id_);
  }
}

// repeated string topic_name = 3;
inline int TopicMassPhiScoreConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void TopicMassPhiScoreConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopicMassPhiScoreConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* TopicMassPhiScoreConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void TopicMassPhiScoreConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicMassPhiScoreConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicMassPhiScoreConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicMassPhiScoreConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void TopicMassPhiScoreConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void TopicMassPhiScoreConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void TopicMassPhiScoreConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicMassPhiScoreConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicMassPhiScoreConfig::mutable_topic_name() {
  return &topic_name_;
}

// -------------------------------------------------------------------

// TopicMassPhiScore

// optional double value = 1;
inline bool TopicMassPhiScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicMassPhiScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicMassPhiScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicMassPhiScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double TopicMassPhiScore::value() const {
  return value_;
}
inline void TopicMassPhiScore::set_value(double value) {
  set_has_value();
  value_ = value;
}

// repeated string topic_name = 2;
inline int TopicMassPhiScore::topic_name_size() const {
  return topic_name_.size();
}
inline void TopicMassPhiScore::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopicMassPhiScore::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* TopicMassPhiScore::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void TopicMassPhiScore::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicMassPhiScore::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicMassPhiScore::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicMassPhiScore::add_topic_name() {
  return topic_name_.Add();
}
inline void TopicMassPhiScore::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void TopicMassPhiScore::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void TopicMassPhiScore::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicMassPhiScore::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicMassPhiScore::mutable_topic_name() {
  return &topic_name_;
}

// repeated double topic_ratio = 3;
inline int TopicMassPhiScore::topic_ratio_size() const {
  return topic_ratio_.size();
}
inline void TopicMassPhiScore::clear_topic_ratio() {
  topic_ratio_.Clear();
}
inline double TopicMassPhiScore::topic_ratio(int index) const {
  return topic_ratio_.Get(index);
}
inline void TopicMassPhiScore::set_topic_ratio(int index, double value) {
  topic_ratio_.Set(index, value);
}
inline void TopicMassPhiScore::add_topic_ratio(double value) {
  topic_ratio_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
TopicMassPhiScore::topic_ratio() const {
  return topic_ratio_;
}
inline ::google::protobuf::RepeatedField< double >*
TopicMassPhiScore::mutable_topic_ratio() {
  return &topic_ratio_;
}

// repeated double topic_mass = 4;
inline int TopicMassPhiScore::topic_mass_size() const {
  return topic_mass_.size();
}
inline void TopicMassPhiScore::clear_topic_mass() {
  topic_mass_.Clear();
}
inline double TopicMassPhiScore::topic_mass(int index) const {
  return topic_mass_.Get(index);
}
inline void TopicMassPhiScore::set_topic_mass(int index, double value) {
  topic_mass_.Set(index, value);
}
inline void TopicMassPhiScore::add_topic_mass(double value) {
  topic_mass_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
TopicMassPhiScore::topic_mass() const {
  return topic_mass_;
}
inline ::google::protobuf::RepeatedField< double >*
TopicMassPhiScore::mutable_topic_mass() {
  return &topic_mass_;
}

// -------------------------------------------------------------------

// ClassPrecisionScoreConfig

// -------------------------------------------------------------------

// ClassPrecisionScore

// optional double value = 1;
inline bool ClassPrecisionScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassPrecisionScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassPrecisionScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassPrecisionScore::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double ClassPrecisionScore::value() const {
  return value_;
}
inline void ClassPrecisionScore::set_value(double value) {
  set_has_value();
  value_ = value;
}

// optional double error = 2;
inline bool ClassPrecisionScore::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClassPrecisionScore::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClassPrecisionScore::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClassPrecisionScore::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline double ClassPrecisionScore::error() const {
  return error_;
}
inline void ClassPrecisionScore::set_error(double value) {
  set_has_error();
  error_ = value;
}

// optional double total = 3;
inline bool ClassPrecisionScore::has_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClassPrecisionScore::set_has_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClassPrecisionScore::clear_has_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClassPrecisionScore::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline double ClassPrecisionScore::total() const {
  return total_;
}
inline void ClassPrecisionScore::set_total(double value) {
  set_has_total();
  total_ = value;
}

// -------------------------------------------------------------------

// PeakMemoryScoreConfig

// -------------------------------------------------------------------

// PeakMemoryScore

// optional int64 value = 1;
inline bool PeakMemoryScore::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeakMemoryScore::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeakMemoryScore::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeakMemoryScore::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 PeakMemoryScore::value() const {
  return value_;
}
inline void PeakMemoryScore::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// TopicModel_TopicModelInternals

// repeated .artm.FloatArray n_wt = 1;
inline int TopicModel_TopicModelInternals::n_wt_size() const {
  return n_wt_.size();
}
inline void TopicModel_TopicModelInternals::clear_n_wt() {
  n_wt_.Clear();
}
inline const ::artm::FloatArray& TopicModel_TopicModelInternals::n_wt(int index) const {
  return n_wt_.Get(index);
}
inline ::artm::FloatArray* TopicModel_TopicModelInternals::mutable_n_wt(int index) {
  return n_wt_.Mutable(index);
}
inline ::artm::FloatArray* TopicModel_TopicModelInternals::add_n_wt() {
  return n_wt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
TopicModel_TopicModelInternals::n_wt() const {
  return n_wt_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
TopicModel_TopicModelInternals::mutable_n_wt() {
  return &n_wt_;
}

// -------------------------------------------------------------------

// TopicModel

// optional string name = 1 [default = "@model"];
inline bool TopicModel::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicModel::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicModel::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicModel::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& TopicModel::name() const {
  return *name_;
}
inline void TopicModel::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TopicModel::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TopicModel::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicModel::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  return name_;
}
inline ::std::string* TopicModel::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void TopicModel::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
}

// optional int32 topics_count = 2;
inline bool TopicModel::has_topics_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicModel::set_has_topics_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicModel::clear_has_topics_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicModel::clear_topics_count() {
  topics_count_ = 0;
  clear_has_topics_count();
}
inline ::google::protobuf::int32 TopicModel::topics_count() const {
  return topics_count_;
}
inline void TopicModel::set_topics_count(::google::protobuf::int32 value) {
  set_has_topics_count();
  topics_count_ = value;
}

// repeated string topic_name = 3;
inline int TopicModel::topic_name_size() const {
  return topic_name_.size();
}
inline void TopicModel::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& TopicModel::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* TopicModel::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void TopicModel::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicModel::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void TopicModel::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicModel::add_topic_name() {
  return topic_name_.Add();
}
inline void TopicModel::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void TopicModel::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void TopicModel::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicModel::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicModel::mutable_topic_name() {
  return &topic_name_;
}

// repeated string token = 4;
inline int TopicModel::token_size() const {
  return token_.size();
}
inline void TopicModel::clear_token() {
  token_.Clear();
}
inline const ::std::string& TopicModel::token(int index) const {
  return token_.Get(index);
}
inline ::std::string* TopicModel::mutable_token(int index) {
  return token_.Mutable(index);
}
inline void TopicModel::set_token(int index, const ::std::string& value) {
  token_.Mutable(index)->assign(value);
}
inline void TopicModel::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
}
inline void TopicModel::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicModel::add_token() {
  return token_.Add();
}
inline void TopicModel::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
}
inline void TopicModel::add_token(const char* value) {
  token_.Add()->assign(value);
}
inline void TopicModel::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicModel::token() const {
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicModel::mutable_token() {
  return &token_;
}

// repeated .artm.FloatArray token_weights = 5;
inline int TopicModel::token_weights_size() const {
  return token_weights_.size();
}
inline void TopicModel::clear_token_weights() {
  token_weights_.Clear();
}
inline const ::artm::FloatArray& TopicModel::token_weights(int index) const {
  return token_weights_.Get(index);
}
inline ::artm::FloatArray* TopicModel::mutable_token_weights(int index) {
  return token_weights_.Mutable(index);
}
inline ::artm::FloatArray* TopicModel::add_token_weights() {
  return token_weights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
TopicModel::token_weights() const {
  return token_weights_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
TopicModel::mutable_token_weights() {
  return &token_weights_;
}

// repeated string class_id = 6;
inline int TopicModel::class_id_size() const {
  return class_id_.size();
}
inline void TopicModel::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& TopicModel::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* TopicModel::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void TopicModel::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void TopicModel::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void TopicModel::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicModel::add_class_id() {
  return class_id_.Add();
}
inline void TopicModel::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void TopicModel::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void TopicModel::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicModel::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicModel::mutable_class_id() {
  return &class_id_;
}

// optional bytes internals = 7;
inline bool TopicModel::has_internals() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TopicModel::set_has_internals() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TopicModel::clear_has_internals() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TopicModel::clear_internals() {
  if (internals_ != &::google::protobuf::internal::GetEmptyString()) {
    internals_->clear();
  }
  clear_has_internals();
}
inline const ::std::string& TopicModel::internals() const {
  return *internals_;
}
inline void TopicModel::set_internals(const ::std::string& value) {
  set_has_internals();
  if (internals_ == &::google::protobuf::internal::GetEmptyString()) {
    internals_ = new ::std::string;
  }
  internals_->assign(value);
}
inline void TopicModel::set_internals(const char* value) {
  set_has_internals();
  if (internals_ == &::google::protobuf::internal::GetEmptyString()) {
    internals_ = new ::std::string;
  }
  internals_->assign(value);
}
inline void TopicModel::set_internals(const void* value, size_t size) {
  set_has_internals();
  if (internals_ == &::google::protobuf::internal::GetEmptyString()) {
    internals_ = new ::std::string;
  }
  internals_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicModel::mutable_internals() {
  set_has_internals();
  if (internals_ == &::google::protobuf::internal::GetEmptyString()) {
    internals_ = new ::std::string;
  }
  return internals_;
}
inline ::std::string* TopicModel::release_internals() {
  clear_has_internals();
  if (internals_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = internals_;
    internals_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void TopicModel::set_allocated_internals(::std::string* internals) {
  if (internals_ != &::google::protobuf::internal::GetEmptyString()) {
    delete internals_;
  }
  if (internals) {
    set_has_internals();
    internals_ = internals;
  } else {
    clear_has_internals();
    internals_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .artm.IntArray topic_index = 8;
inline int TopicModel::topic_index_size() const {
  return topic_index_.size();
}
inline void TopicModel::clear_topic_index() {
  topic_index_.Clear();
}
inline const ::artm::IntArray& TopicModel::topic_index(int index) const {
  return topic_index_.Get(index);
}
inline ::artm::IntArray* TopicModel::mutable_topic_index(int index) {
  return topic_index_.Mutable(index);
}
inline ::artm::IntArray* TopicModel::add_topic_index() {
  return topic_index_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
TopicModel::topic_index() const {
  return topic_index_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
TopicModel::mutable_topic_index() {
  return &topic_index_;
}

// repeated .artm.TopicModel.OperationType operation_type = 9;
inline int TopicModel::operation_type_size() const {
  return operation_type_.size();
}
inline void TopicModel::clear_operation_type() {
  operation_type_.Clear();
}
inline ::artm::TopicModel_OperationType TopicModel::operation_type(int index) const {
  return static_cast< ::artm::TopicModel_OperationType >(operation_type_.Get(index));
}
inline void TopicModel::set_operation_type(int index, ::artm::TopicModel_OperationType value) {
  assert(::artm::TopicModel_OperationType_IsValid(value));
  operation_type_.Set(index, value);
}
inline void TopicModel::add_operation_type(::artm::TopicModel_OperationType value) {
  assert(::artm::TopicModel_OperationType_IsValid(value));
  operation_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
TopicModel::operation_type() const {
  return operation_type_;
}
inline ::google::protobuf::RepeatedField<int>*
TopicModel::mutable_operation_type() {
  return &operation_type_;
}

// optional int32 seed = 10;
inline bool TopicModel::has_seed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TopicModel::set_has_seed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TopicModel::clear_has_seed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TopicModel::clear_seed() {
  seed_ = 0;
  clear_has_seed();
}
inline ::google::protobuf::int32 TopicModel::seed() const {
  return seed_;
}
inline void TopicModel::set_seed(::google::protobuf::int32 value) {
  set_has_seed();
  seed_ = value;
}

// -------------------------------------------------------------------

// ThetaMatrix

// repeated int32 item_id = 2;
inline int ThetaMatrix::item_id_size() const {
  return item_id_.size();
}
inline void ThetaMatrix::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 ThetaMatrix::item_id(int index) const {
  return item_id_.Get(index);
}
inline void ThetaMatrix::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void ThetaMatrix::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ThetaMatrix::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ThetaMatrix::mutable_item_id() {
  return &item_id_;
}

// repeated .artm.FloatArray item_weights = 3;
inline int ThetaMatrix::item_weights_size() const {
  return item_weights_.size();
}
inline void ThetaMatrix::clear_item_weights() {
  item_weights_.Clear();
}
inline const ::artm::FloatArray& ThetaMatrix::item_weights(int index) const {
  return item_weights_.Get(index);
}
inline ::artm::FloatArray* ThetaMatrix::mutable_item_weights(int index) {
  return item_weights_.Mutable(index);
}
inline ::artm::FloatArray* ThetaMatrix::add_item_weights() {
  return item_weights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >&
ThetaMatrix::item_weights() const {
  return item_weights_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::FloatArray >*
ThetaMatrix::mutable_item_weights() {
  return &item_weights_;
}

// repeated string topic_name = 4;
inline int ThetaMatrix::topic_name_size() const {
  return topic_name_.size();
}
inline void ThetaMatrix::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& ThetaMatrix::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* ThetaMatrix::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void ThetaMatrix::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void ThetaMatrix::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void ThetaMatrix::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThetaMatrix::add_topic_name() {
  return topic_name_.Add();
}
inline void ThetaMatrix::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void ThetaMatrix::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void ThetaMatrix::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ThetaMatrix::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ThetaMatrix::mutable_topic_name() {
  return &topic_name_;
}

// optional int32 topics_count = 5;
inline bool ThetaMatrix::has_topics_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThetaMatrix::set_has_topics_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThetaMatrix::clear_has_topics_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThetaMatrix::clear_topics_count() {
  topics_count_ = 0;
  clear_has_topics_count();
}
inline ::google::protobuf::int32 ThetaMatrix::topics_count() const {
  return topics_count_;
}
inline void ThetaMatrix::set_topics_count(::google::protobuf::int32 value) {
  set_has_topics_count();
  topics_count_ = value;
}

// repeated string item_title = 6;
inline int ThetaMatrix::item_title_size() const {
  return item_title_.size();
}
inline void ThetaMatrix::clear_item_title() {
  item_title_.Clear();
}
inline const ::std::string& ThetaMatrix::item_title(int index) const {
  return item_title_.Get(index);
}
inline ::std::string* ThetaMatrix::mutable_item_title(int index) {
  return item_title_.Mutable(index);
}
inline void ThetaMatrix::set_item_title(int index, const ::std::string& value) {
  item_title_.Mutable(index)->assign(value);
}
inline void ThetaMatrix::set_item_title(int index, const char* value) {
  item_title_.Mutable(index)->assign(value);
}
inline void ThetaMatrix::set_item_title(int index, const char* value, size_t size) {
  item_title_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThetaMatrix::add_item_title() {
  return item_title_.Add();
}
inline void ThetaMatrix::add_item_title(const ::std::string& value) {
  item_title_.Add()->assign(value);
}
inline void ThetaMatrix::add_item_title(const char* value) {
  item_title_.Add()->assign(value);
}
inline void ThetaMatrix::add_item_title(const char* value, size_t size) {
  item_title_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ThetaMatrix::item_title() const {
  return item_title_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ThetaMatrix::mutable_item_title() {
  return &item_title_;
}

// repeated .artm.IntArray topic_index = 7;
inline int ThetaMatrix::topic_index_size() const {
  return topic_index_.size();
}
inline void ThetaMatrix::clear_topic_index() {
  topic_index_.Clear();
}
inline const ::artm::IntArray& ThetaMatrix::topic_index(int index) const {
  return topic_index_.Get(index);
}
inline ::artm::IntArray* ThetaMatrix::mutable_topic_index(int index) {
  return topic_index_.Mutable(index);
}
inline ::artm::IntArray* ThetaMatrix::add_topic_index() {
  return topic_index_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::IntArray >&
ThetaMatrix::topic_index() const {
  return topic_index_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::IntArray >*
ThetaMatrix::mutable_topic_index() {
  return &topic_index_;
}

// -------------------------------------------------------------------

// CollectionParserConfig

// optional .artm.CollectionParserConfig.Format format = 1 [default = BagOfWordsUci];
inline bool CollectionParserConfig::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectionParserConfig::set_has_format() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollectionParserConfig::clear_has_format() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollectionParserConfig::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::artm::CollectionParserConfig_Format CollectionParserConfig::format() const {
  return static_cast< ::artm::CollectionParserConfig_Format >(format_);
}
inline void CollectionParserConfig::set_format(::artm::CollectionParserConfig_Format value) {
  assert(::artm::CollectionParserConfig_Format_IsValid(value));
  set_has_format();
  format_ = value;
}

// optional string docword_file_path = 2;
inline bool CollectionParserConfig::has_docword_file_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollectionParserConfig::set_has_docword_file_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollectionParserConfig::clear_has_docword_file_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CollectionParserConfig::clear_docword_file_path() {
  if (docword_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    docword_file_path_->clear();
  }
  clear_has_docword_file_path();
}
inline const ::std::string& CollectionParserConfig::docword_file_path() const {
  return *docword_file_path_;
}
inline void CollectionParserConfig::set_docword_file_path(const ::std::string& value) {
  set_has_docword_file_path();
  if (docword_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    docword_file_path_ = new ::std::string;
  }
  docword_file_path_->assign(value);
}
inline void CollectionParserConfig::set_docword_file_path(const char* value) {
  set_has_docword_file_path();
  if (docword_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    docword_file_path_ = new ::std::string;
  }
  docword_file_path_->assign(value);
}
inline void CollectionParserConfig::set_docword_file_path(const char* value, size_t size) {
  set_has_docword_file_path();
  if (docword_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    docword_file_path_ = new ::std::string;
  }
  docword_file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollectionParserConfig::mutable_docword_file_path() {
  set_has_docword_file_path();
  if (docword_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    docword_file_path_ = new ::std::string;
  }
  return docword_file_path_;
}
inline ::std::string* CollectionParserConfig::release_docword_file_path() {
  clear_has_docword_file_path();
  if (docword_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = docword_file_path_;
    docword_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void CollectionParserConfig::set_allocated_docword_file_path(::std::string* docword_file_path) {
  if (docword_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete docword_file_path_;
  }
  if (docword_file_path) {
    set_has_docword_file_path();
    docword_file_path_ = docword_file_path;
  } else {
    clear_has_docword_file_path();
    docword_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string vocab_file_path = 3;
inline bool CollectionParserConfig::has_vocab_file_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CollectionParserConfig::set_has_vocab_file_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CollectionParserConfig::clear_has_vocab_file_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CollectionParserConfig::clear_vocab_file_path() {
  if (vocab_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    vocab_file_path_->clear();
  }
  clear_has_vocab_file_path();
}
inline const ::std::string& CollectionParserConfig::vocab_file_path() const {
  return *vocab_file_path_;
}
inline void CollectionParserConfig::set_vocab_file_path(const ::std::string& value) {
  set_has_vocab_file_path();
  if (vocab_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    vocab_file_path_ = new ::std::string;
  }
  vocab_file_path_->assign(value);
}
inline void CollectionParserConfig::set_vocab_file_path(const char* value) {
  set_has_vocab_file_path();
  if (vocab_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    vocab_file_path_ = new ::std::string;
  }
  vocab_file_path_->assign(value);
}
inline void CollectionParserConfig::set_vocab_file_path(const char* value, size_t size) {
  set_has_vocab_file_path();
  if (vocab_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    vocab_file_path_ = new ::std::string;
  }
  vocab_file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollectionParserConfig::mutable_vocab_file_path() {
  set_has_vocab_file_path();
  if (vocab_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    vocab_file_path_ = new ::std::string;
  }
  return vocab_file_path_;
}
inline ::std::string* CollectionParserConfig::release_vocab_file_path() {
  clear_has_vocab_file_path();
  if (vocab_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = vocab_file_path_;
    vocab_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void CollectionParserConfig::set_allocated_vocab_file_path(::std::string* vocab_file_path) {
  if (vocab_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete vocab_file_path_;
  }
  if (vocab_file_path) {
    set_has_vocab_file_path();
    vocab_file_path_ = vocab_file_path;
  } else {
    clear_has_vocab_file_path();
    vocab_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string target_folder = 4;
inline bool CollectionParserConfig::has_target_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CollectionParserConfig::set_has_target_folder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CollectionParserConfig::clear_has_target_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CollectionParserConfig::clear_target_folder() {
  if (target_folder_ != &::google::protobuf::internal::GetEmptyString()) {
    target_folder_->clear();
  }
  clear_has_target_folder();
}
inline const ::std::string& CollectionParserConfig::target_folder() const {
  return *target_folder_;
}
inline void CollectionParserConfig::set_target_folder(const ::std::string& value) {
  set_has_target_folder();
  if (target_folder_ == &::google::protobuf::internal::GetEmptyString()) {
    target_folder_ = new ::std::string;
  }
  target_folder_->assign(value);
}
inline void CollectionParserConfig::set_target_folder(const char* value) {
  set_has_target_folder();
  if (target_folder_ == &::google::protobuf::internal::GetEmptyString()) {
    target_folder_ = new ::std::string;
  }
  target_folder_->assign(value);
}
inline void CollectionParserConfig::set_target_folder(const char* value, size_t size) {
  set_has_target_folder();
  if (target_folder_ == &::google::protobuf::internal::GetEmptyString()) {
    target_folder_ = new ::std::string;
  }
  target_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollectionParserConfig::mutable_target_folder() {
  set_has_target_folder();
  if (target_folder_ == &::google::protobuf::internal::GetEmptyString()) {
    target_folder_ = new ::std::string;
  }
  return target_folder_;
}
inline ::std::string* CollectionParserConfig::release_target_folder() {
  clear_has_target_folder();
  if (target_folder_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = target_folder_;
    target_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void CollectionParserConfig::set_allocated_target_folder(::std::string* target_folder) {
  if (target_folder_ != &::google::protobuf::internal::GetEmptyString()) {
    delete target_folder_;
  }
  if (target_folder) {
    set_has_target_folder();
    target_folder_ = target_folder;
  } else {
    clear_has_target_folder();
    target_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 num_items_per_batch = 5 [default = 1000];
inline bool CollectionParserConfig::has_num_items_per_batch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CollectionParserConfig::set_has_num_items_per_batch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CollectionParserConfig::clear_has_num_items_per_batch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CollectionParserConfig::clear_num_items_per_batch() {
  num_items_per_batch_ = 1000;
  clear_has_num_items_per_batch();
}
inline ::google::protobuf::int32 CollectionParserConfig::num_items_per_batch() const {
  return num_items_per_batch_;
}
inline void CollectionParserConfig::set_num_items_per_batch(::google::protobuf::int32 value) {
  set_has_num_items_per_batch();
  num_items_per_batch_ = value;
}

// optional bool use_unity_based_indices = 6 [default = true];
inline bool CollectionParserConfig::has_use_unity_based_indices() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CollectionParserConfig::set_has_use_unity_based_indices() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CollectionParserConfig::clear_has_use_unity_based_indices() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CollectionParserConfig::clear_use_unity_based_indices() {
  use_unity_based_indices_ = true;
  clear_has_use_unity_based_indices();
}
inline bool CollectionParserConfig::use_unity_based_indices() const {
  return use_unity_based_indices_;
}
inline void CollectionParserConfig::set_use_unity_based_indices(bool value) {
  set_has_use_unity_based_indices();
  use_unity_based_indices_ = value;
}

// optional .artm.CollectionParserConfig.NameType name_type = 7 [default = Guid];
inline bool CollectionParserConfig::has_name_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CollectionParserConfig::set_has_name_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CollectionParserConfig::clear_has_name_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CollectionParserConfig::clear_name_type() {
  name_type_ = 0;
  clear_has_name_type();
}
inline ::artm::CollectionParserConfig_NameType CollectionParserConfig::name_type() const {
  return static_cast< ::artm::CollectionParserConfig_NameType >(name_type_);
}
inline void CollectionParserConfig::set_name_type(::artm::CollectionParserConfig_NameType value) {
  assert(::artm::CollectionParserConfig_NameType_IsValid(value));
  set_has_name_type();
  name_type_ = value;
}

// repeated string cooccurrence_token = 8;
inline int CollectionParserConfig::cooccurrence_token_size() const {
  return cooccurrence_token_.size();
}
inline void CollectionParserConfig::clear_cooccurrence_token() {
  cooccurrence_token_.Clear();
}
inline const ::std::string& CollectionParserConfig::cooccurrence_token(int index) const {
  return cooccurrence_token_.Get(index);
}
inline ::std::string* CollectionParserConfig::mutable_cooccurrence_token(int index) {
  return cooccurrence_token_.Mutable(index);
}
inline void CollectionParserConfig::set_cooccurrence_token(int index, const ::std::string& value) {
  cooccurrence_token_.Mutable(index)->assign(value);
}
inline void CollectionParserConfig::set_cooccurrence_token(int index, const char* value) {
  cooccurrence_token_.Mutable(index)->assign(value);
}
inline void CollectionParserConfig::set_cooccurrence_token(int index, const char* value, size_t size) {
  cooccurrence_token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollectionParserConfig::add_cooccurrence_token() {
  return cooccurrence_token_.Add();
}
inline void CollectionParserConfig::add_cooccurrence_token(const ::std::string& value) {
  cooccurrence_token_.Add()->assign(value);
}
inline void CollectionParserConfig::add_cooccurrence_token(const char* value) {
  cooccurrence_token_.Add()->assign(value);
}
inline void CollectionParserConfig::add_cooccurrence_token(const char* value, size_t size) {
  cooccurrence_token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CollectionParserConfig::cooccurrence_token() const {
  return cooccurrence_token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CollectionParserConfig::mutable_cooccurrence_token() {
  return &cooccurrence_token_;
}

// optional bool gather_cooc = 9;
inline bool CollectionParserConfig::has_gather_cooc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CollectionParserConfig::set_has_gather_cooc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CollectionParserConfig::clear_has_gather_cooc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CollectionParserConfig::clear_gather_cooc() {
  gather_cooc_ = false;
  clear_has_gather_cooc();
}
inline bool CollectionParserConfig::gather_cooc() const {
  return gather_cooc_;
}
inline void CollectionParserConfig::set_gather_cooc(bool value) {
  set_has_gather_cooc();
  gather_cooc_ = value;
}

// repeated string cooccurrence_class_id = 10;
inline int CollectionParserConfig::cooccurrence_class_id_size() const {
  return cooccurrence_class_id_.size();
}
inline void CollectionParserConfig::clear_cooccurrence_class_id() {
  cooccurrence_class_id_.Clear();
}
inline const ::std::string& CollectionParserConfig::cooccurrence_class_id(int index) const {
  return cooccurrence_class_id_.Get(index);
}
inline ::std::string* CollectionParserConfig::mutable_cooccurrence_class_id(int index) {
  return cooccurrence_class_id_.Mutable(index);
}
inline void CollectionParserConfig::set_cooccurrence_class_id(int index, const ::std::string& value) {
  cooccurrence_class_id_.Mutable(index)->assign(value);
}
inline void CollectionParserConfig::set_cooccurrence_class_id(int index, const char* value) {
  cooccurrence_class_id_.Mutable(index)->assign(value);
}
inline void CollectionParserConfig::set_cooccurrence_class_id(int index, const char* value, size_t size) {
  cooccurrence_class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CollectionParserConfig::add_cooccurrence_class_id() {
  return cooccurrence_class_id_.Add();
}
inline void CollectionParserConfig::add_cooccurrence_class_id(const ::std::string& value) {
  cooccurrence_class_id_.Add()->assign(value);
}
inline void CollectionParserConfig::add_cooccurrence_class_id(const char* value) {
  cooccurrence_class_id_.Add()->assign(value);
}
inline void CollectionParserConfig::add_cooccurrence_class_id(const char* value, size_t size) {
  cooccurrence_class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CollectionParserConfig::cooccurrence_class_id() const {
  return cooccurrence_class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CollectionParserConfig::mutable_cooccurrence_class_id() {
  return &cooccurrence_class_id_;
}

// optional bool use_symmetric_cooc_values = 11 [default = false];
inline bool CollectionParserConfig::has_use_symmetric_cooc_values() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CollectionParserConfig::set_has_use_symmetric_cooc_values() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CollectionParserConfig::clear_has_use_symmetric_cooc_values() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CollectionParserConfig::clear_use_symmetric_cooc_values() {
  use_symmetric_cooc_values_ = false;
  clear_has_use_symmetric_cooc_values();
}
inline bool CollectionParserConfig::use_symmetric_cooc_values() const {
  return use_symmetric_cooc_values_;
}
inline void CollectionParserConfig::set_use_symmetric_cooc_values(bool value) {
  set_has_use_symmetric_cooc_values();
  use_symmetric_cooc_values_ = value;
}

// -------------------------------------------------------------------

// InitializeModelArgs_Filter

// optional string class_id = 1;
inline bool InitializeModelArgs_Filter::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitializeModelArgs_Filter::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitializeModelArgs_Filter::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitializeModelArgs_Filter::clear_class_id() {
  if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    class_id_->clear();
  }
  clear_has_class_id();
}
inline const ::std::string& InitializeModelArgs_Filter::class_id() const {
  return *class_id_;
}
inline void InitializeModelArgs_Filter::set_class_id(const ::std::string& value) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void InitializeModelArgs_Filter::set_class_id(const char* value) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void InitializeModelArgs_Filter::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitializeModelArgs_Filter::mutable_class_id() {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  return class_id_;
}
inline ::std::string* InitializeModelArgs_Filter::release_class_id() {
  clear_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = class_id_;
    class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void InitializeModelArgs_Filter::set_allocated_class_id(::std::string* class_id) {
  if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete class_id_;
  }
  if (class_id) {
    set_has_class_id();
    class_id_ = class_id;
  } else {
    clear_has_class_id();
    class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional float min_percentage = 2;
inline bool InitializeModelArgs_Filter::has_min_percentage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitializeModelArgs_Filter::set_has_min_percentage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitializeModelArgs_Filter::clear_has_min_percentage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitializeModelArgs_Filter::clear_min_percentage() {
  min_percentage_ = 0;
  clear_has_min_percentage();
}
inline float InitializeModelArgs_Filter::min_percentage() const {
  return min_percentage_;
}
inline void InitializeModelArgs_Filter::set_min_percentage(float value) {
  set_has_min_percentage();
  min_percentage_ = value;
}

// optional float max_percentage = 3;
inline bool InitializeModelArgs_Filter::has_max_percentage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitializeModelArgs_Filter::set_has_max_percentage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InitializeModelArgs_Filter::clear_has_max_percentage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InitializeModelArgs_Filter::clear_max_percentage() {
  max_percentage_ = 0;
  clear_has_max_percentage();
}
inline float InitializeModelArgs_Filter::max_percentage() const {
  return max_percentage_;
}
inline void InitializeModelArgs_Filter::set_max_percentage(float value) {
  set_has_max_percentage();
  max_percentage_ = value;
}

// optional int32 min_items = 4;
inline bool InitializeModelArgs_Filter::has_min_items() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InitializeModelArgs_Filter::set_has_min_items() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InitializeModelArgs_Filter::clear_has_min_items() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InitializeModelArgs_Filter::clear_min_items() {
  min_items_ = 0;
  clear_has_min_items();
}
inline ::google::protobuf::int32 InitializeModelArgs_Filter::min_items() const {
  return min_items_;
}
inline void InitializeModelArgs_Filter::set_min_items(::google::protobuf::int32 value) {
  set_has_min_items();
  min_items_ = value;
}

// optional int32 max_items = 5;
inline bool InitializeModelArgs_Filter::has_max_items() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InitializeModelArgs_Filter::set_has_max_items() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InitializeModelArgs_Filter::clear_has_max_items() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InitializeModelArgs_Filter::clear_max_items() {
  max_items_ = 0;
  clear_has_max_items();
}
inline ::google::protobuf::int32 InitializeModelArgs_Filter::max_items() const {
  return max_items_;
}
inline void InitializeModelArgs_Filter::set_max_items(::google::protobuf::int32 value) {
  set_has_max_items();
  max_items_ = value;
}

// optional int32 min_total_count = 6;
inline bool InitializeModelArgs_Filter::has_min_total_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InitializeModelArgs_Filter::set_has_min_total_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InitializeModelArgs_Filter::clear_has_min_total_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InitializeModelArgs_Filter::clear_min_total_count() {
  min_total_count_ = 0;
  clear_has_min_total_count();
}
inline ::google::protobuf::int32 InitializeModelArgs_Filter::min_total_count() const {
  return min_total_count_;
}
inline void InitializeModelArgs_Filter::set_min_total_count(::google::protobuf::int32 value) {
  set_has_min_total_count();
  min_total_count_ = value;
}

// optional int32 min_one_item_count = 7;
inline bool InitializeModelArgs_Filter::has_min_one_item_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InitializeModelArgs_Filter::set_has_min_one_item_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InitializeModelArgs_Filter::clear_has_min_one_item_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InitializeModelArgs_Filter::clear_min_one_item_count() {
  min_one_item_count_ = 0;
  clear_has_min_one_item_count();
}
inline ::google::protobuf::int32 InitializeModelArgs_Filter::min_one_item_count() const {
  return min_one_item_count_;
}
inline void InitializeModelArgs_Filter::set_min_one_item_count(::google::protobuf::int32 value) {
  set_has_min_one_item_count();
  min_one_item_count_ = value;
}

// -------------------------------------------------------------------

// InitializeModelArgs

// optional string model_name = 1;
inline bool InitializeModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitializeModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitializeModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitializeModelArgs::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& InitializeModelArgs::model_name() const {
  return *model_name_;
}
inline void InitializeModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void InitializeModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void InitializeModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitializeModelArgs::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* InitializeModelArgs::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void InitializeModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string dictionary_name = 2;
inline bool InitializeModelArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitializeModelArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitializeModelArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitializeModelArgs::clear_dictionary_name() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_->clear();
  }
  clear_has_dictionary_name();
}
inline const ::std::string& InitializeModelArgs::dictionary_name() const {
  return *dictionary_name_;
}
inline void InitializeModelArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void InitializeModelArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void InitializeModelArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitializeModelArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  return dictionary_name_;
}
inline ::std::string* InitializeModelArgs::release_dictionary_name() {
  clear_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_name_;
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void InitializeModelArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (dictionary_name) {
    set_has_dictionary_name();
    dictionary_name_ = dictionary_name;
  } else {
    clear_has_dictionary_name();
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 topics_count = 3;
inline bool InitializeModelArgs::has_topics_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitializeModelArgs::set_has_topics_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InitializeModelArgs::clear_has_topics_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InitializeModelArgs::clear_topics_count() {
  topics_count_ = 0;
  clear_has_topics_count();
}
inline ::google::protobuf::int32 InitializeModelArgs::topics_count() const {
  return topics_count_;
}
inline void InitializeModelArgs::set_topics_count(::google::protobuf::int32 value) {
  set_has_topics_count();
  topics_count_ = value;
}

// repeated string topic_name = 4;
inline int InitializeModelArgs::topic_name_size() const {
  return topic_name_.size();
}
inline void InitializeModelArgs::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& InitializeModelArgs::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* InitializeModelArgs::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void InitializeModelArgs::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void InitializeModelArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void InitializeModelArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitializeModelArgs::add_topic_name() {
  return topic_name_.Add();
}
inline void InitializeModelArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void InitializeModelArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void InitializeModelArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InitializeModelArgs::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InitializeModelArgs::mutable_topic_name() {
  return &topic_name_;
}

// optional int32 seed = 5 [default = -1];
inline bool InitializeModelArgs::has_seed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InitializeModelArgs::set_has_seed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InitializeModelArgs::clear_has_seed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InitializeModelArgs::clear_seed() {
  seed_ = -1;
  clear_has_seed();
}
inline ::google::protobuf::int32 InitializeModelArgs::seed() const {
  return seed_;
}
inline void InitializeModelArgs::set_seed(::google::protobuf::int32 value) {
  set_has_seed();
  seed_ = value;
}

// optional .artm.InitializeModelArgs.SourceType source_type = 6;
inline bool InitializeModelArgs::has_source_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InitializeModelArgs::set_has_source_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InitializeModelArgs::clear_has_source_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InitializeModelArgs::clear_source_type() {
  source_type_ = 0;
  clear_has_source_type();
}
inline ::artm::InitializeModelArgs_SourceType InitializeModelArgs::source_type() const {
  return static_cast< ::artm::InitializeModelArgs_SourceType >(source_type_);
}
inline void InitializeModelArgs::set_source_type(::artm::InitializeModelArgs_SourceType value) {
  assert(::artm::InitializeModelArgs_SourceType_IsValid(value));
  set_has_source_type();
  source_type_ = value;
}

// optional string disk_path = 7;
inline bool InitializeModelArgs::has_disk_path() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InitializeModelArgs::set_has_disk_path() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InitializeModelArgs::clear_has_disk_path() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InitializeModelArgs::clear_disk_path() {
  if (disk_path_ != &::google::protobuf::internal::GetEmptyString()) {
    disk_path_->clear();
  }
  clear_has_disk_path();
}
inline const ::std::string& InitializeModelArgs::disk_path() const {
  return *disk_path_;
}
inline void InitializeModelArgs::set_disk_path(const ::std::string& value) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::GetEmptyString()) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(value);
}
inline void InitializeModelArgs::set_disk_path(const char* value) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::GetEmptyString()) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(value);
}
inline void InitializeModelArgs::set_disk_path(const char* value, size_t size) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::GetEmptyString()) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitializeModelArgs::mutable_disk_path() {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::GetEmptyString()) {
    disk_path_ = new ::std::string;
  }
  return disk_path_;
}
inline ::std::string* InitializeModelArgs::release_disk_path() {
  clear_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = disk_path_;
    disk_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void InitializeModelArgs::set_allocated_disk_path(::std::string* disk_path) {
  if (disk_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete disk_path_;
  }
  if (disk_path) {
    set_has_disk_path();
    disk_path_ = disk_path;
  } else {
    clear_has_disk_path();
    disk_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .artm.InitializeModelArgs.Filter filter = 8;
inline int InitializeModelArgs::filter_size() const {
  return filter_.size();
}
inline void InitializeModelArgs::clear_filter() {
  filter_.Clear();
}
inline const ::artm::InitializeModelArgs_Filter& InitializeModelArgs::filter(int index) const {
  return filter_.Get(index);
}
inline ::artm::InitializeModelArgs_Filter* InitializeModelArgs::mutable_filter(int index) {
  return filter_.Mutable(index);
}
inline ::artm::InitializeModelArgs_Filter* InitializeModelArgs::add_filter() {
  return filter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::InitializeModelArgs_Filter >&
InitializeModelArgs::filter() const {
  return filter_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::InitializeModelArgs_Filter >*
InitializeModelArgs::mutable_filter() {
  return &filter_;
}

// repeated string batch_filename = 9;
inline int InitializeModelArgs::batch_filename_size() const {
  return batch_filename_.size();
}
inline void InitializeModelArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
inline const ::std::string& InitializeModelArgs::batch_filename(int index) const {
  return batch_filename_.Get(index);
}
inline ::std::string* InitializeModelArgs::mutable_batch_filename(int index) {
  return batch_filename_.Mutable(index);
}
inline void InitializeModelArgs::set_batch_filename(int index, const ::std::string& value) {
  batch_filename_.Mutable(index)->assign(value);
}
inline void InitializeModelArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
}
inline void InitializeModelArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InitializeModelArgs::add_batch_filename() {
  return batch_filename_.Add();
}
inline void InitializeModelArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
}
inline void InitializeModelArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
}
inline void InitializeModelArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InitializeModelArgs::batch_filename() const {
  return batch_filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InitializeModelArgs::mutable_batch_filename() {
  return &batch_filename_;
}

// -------------------------------------------------------------------

// DictionaryData

// optional string name = 1;
inline bool DictionaryData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DictionaryData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DictionaryData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DictionaryData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DictionaryData::name() const {
  return *name_;
}
inline void DictionaryData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DictionaryData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DictionaryData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DictionaryData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DictionaryData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void DictionaryData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated string token = 2;
inline int DictionaryData::token_size() const {
  return token_.size();
}
inline void DictionaryData::clear_token() {
  token_.Clear();
}
inline const ::std::string& DictionaryData::token(int index) const {
  return token_.Get(index);
}
inline ::std::string* DictionaryData::mutable_token(int index) {
  return token_.Mutable(index);
}
inline void DictionaryData::set_token(int index, const ::std::string& value) {
  token_.Mutable(index)->assign(value);
}
inline void DictionaryData::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
}
inline void DictionaryData::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DictionaryData::add_token() {
  return token_.Add();
}
inline void DictionaryData::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
}
inline void DictionaryData::add_token(const char* value) {
  token_.Add()->assign(value);
}
inline void DictionaryData::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DictionaryData::token() const {
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DictionaryData::mutable_token() {
  return &token_;
}

// repeated string class_id = 3;
inline int DictionaryData::class_id_size() const {
  return class_id_.size();
}
inline void DictionaryData::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& DictionaryData::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* DictionaryData::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void DictionaryData::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void DictionaryData::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void DictionaryData::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DictionaryData::add_class_id() {
  return class_id_.Add();
}
inline void DictionaryData::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void DictionaryData::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void DictionaryData::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DictionaryData::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DictionaryData::mutable_class_id() {
  return &class_id_;
}

// repeated float token_value = 4;
inline int DictionaryData::token_value_size() const {
  return token_value_.size();
}
inline void DictionaryData::clear_token_value() {
  token_value_.Clear();
}
inline float DictionaryData::token_value(int index) const {
  return token_value_.Get(index);
}
inline void DictionaryData::set_token_value(int index, float value) {
  token_value_.Set(index, value);
}
inline void DictionaryData::add_token_value(float value) {
  token_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DictionaryData::token_value() const {
  return token_value_;
}
inline ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_token_value() {
  return &token_value_;
}

// repeated float token_tf = 5;
inline int DictionaryData::token_tf_size() const {
  return token_tf_.size();
}
inline void DictionaryData::clear_token_tf() {
  token_tf_.Clear();
}
inline float DictionaryData::token_tf(int index) const {
  return token_tf_.Get(index);
}
inline void DictionaryData::set_token_tf(int index, float value) {
  token_tf_.Set(index, value);
}
inline void DictionaryData::add_token_tf(float value) {
  token_tf_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DictionaryData::token_tf() const {
  return token_tf_;
}
inline ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_token_tf() {
  return &token_tf_;
}

// repeated float token_df = 6;
inline int DictionaryData::token_df_size() const {
  return token_df_.size();
}
inline void DictionaryData::clear_token_df() {
  token_df_.Clear();
}
inline float DictionaryData::token_df(int index) const {
  return token_df_.Get(index);
}
inline void DictionaryData::set_token_df(int index, float value) {
  token_df_.Set(index, value);
}
inline void DictionaryData::add_token_df(float value) {
  token_df_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DictionaryData::token_df() const {
  return token_df_;
}
inline ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_token_df() {
  return &token_df_;
}

// repeated int32 cooc_first_index = 7;
inline int DictionaryData::cooc_first_index_size() const {
  return cooc_first_index_.size();
}
inline void DictionaryData::clear_cooc_first_index() {
  cooc_first_index_.Clear();
}
inline ::google::protobuf::int32 DictionaryData::cooc_first_index(int index) const {
  return cooc_first_index_.Get(index);
}
inline void DictionaryData::set_cooc_first_index(int index, ::google::protobuf::int32 value) {
  cooc_first_index_.Set(index, value);
}
inline void DictionaryData::add_cooc_first_index(::google::protobuf::int32 value) {
  cooc_first_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DictionaryData::cooc_first_index() const {
  return cooc_first_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DictionaryData::mutable_cooc_first_index() {
  return &cooc_first_index_;
}

// repeated int32 cooc_second_index = 8;
inline int DictionaryData::cooc_second_index_size() const {
  return cooc_second_index_.size();
}
inline void DictionaryData::clear_cooc_second_index() {
  cooc_second_index_.Clear();
}
inline ::google::protobuf::int32 DictionaryData::cooc_second_index(int index) const {
  return cooc_second_index_.Get(index);
}
inline void DictionaryData::set_cooc_second_index(int index, ::google::protobuf::int32 value) {
  cooc_second_index_.Set(index, value);
}
inline void DictionaryData::add_cooc_second_index(::google::protobuf::int32 value) {
  cooc_second_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DictionaryData::cooc_second_index() const {
  return cooc_second_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DictionaryData::mutable_cooc_second_index() {
  return &cooc_second_index_;
}

// repeated float cooc_value = 9;
inline int DictionaryData::cooc_value_size() const {
  return cooc_value_.size();
}
inline void DictionaryData::clear_cooc_value() {
  cooc_value_.Clear();
}
inline float DictionaryData::cooc_value(int index) const {
  return cooc_value_.Get(index);
}
inline void DictionaryData::set_cooc_value(int index, float value) {
  cooc_value_.Set(index, value);
}
inline void DictionaryData::add_cooc_value(float value) {
  cooc_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
DictionaryData::cooc_value() const {
  return cooc_value_;
}
inline ::google::protobuf::RepeatedField< float >*
DictionaryData::mutable_cooc_value() {
  return &cooc_value_;
}

// -------------------------------------------------------------------

// FilterDictionaryArgs

// optional string dictionary_name = 1;
inline bool FilterDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilterDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilterDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilterDictionaryArgs::clear_dictionary_name() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_->clear();
  }
  clear_has_dictionary_name();
}
inline const ::std::string& FilterDictionaryArgs::dictionary_name() const {
  return *dictionary_name_;
}
inline void FilterDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void FilterDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void FilterDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilterDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  return dictionary_name_;
}
inline ::std::string* FilterDictionaryArgs::release_dictionary_name() {
  clear_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_name_;
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void FilterDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (dictionary_name) {
    set_has_dictionary_name();
    dictionary_name_ = dictionary_name;
  } else {
    clear_has_dictionary_name();
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string dictionary_target_name = 2;
inline bool FilterDictionaryArgs::has_dictionary_target_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilterDictionaryArgs::set_has_dictionary_target_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilterDictionaryArgs::clear_has_dictionary_target_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilterDictionaryArgs::clear_dictionary_target_name() {
  if (dictionary_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_target_name_->clear();
  }
  clear_has_dictionary_target_name();
}
inline const ::std::string& FilterDictionaryArgs::dictionary_target_name() const {
  return *dictionary_target_name_;
}
inline void FilterDictionaryArgs::set_dictionary_target_name(const ::std::string& value) {
  set_has_dictionary_target_name();
  if (dictionary_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_target_name_ = new ::std::string;
  }
  dictionary_target_name_->assign(value);
}
inline void FilterDictionaryArgs::set_dictionary_target_name(const char* value) {
  set_has_dictionary_target_name();
  if (dictionary_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_target_name_ = new ::std::string;
  }
  dictionary_target_name_->assign(value);
}
inline void FilterDictionaryArgs::set_dictionary_target_name(const char* value, size_t size) {
  set_has_dictionary_target_name();
  if (dictionary_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_target_name_ = new ::std::string;
  }
  dictionary_target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilterDictionaryArgs::mutable_dictionary_target_name() {
  set_has_dictionary_target_name();
  if (dictionary_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_target_name_ = new ::std::string;
  }
  return dictionary_target_name_;
}
inline ::std::string* FilterDictionaryArgs::release_dictionary_target_name() {
  clear_has_dictionary_target_name();
  if (dictionary_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_target_name_;
    dictionary_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void FilterDictionaryArgs::set_allocated_dictionary_target_name(::std::string* dictionary_target_name) {
  if (dictionary_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_target_name_;
  }
  if (dictionary_target_name) {
    set_has_dictionary_target_name();
    dictionary_target_name_ = dictionary_target_name;
  } else {
    clear_has_dictionary_target_name();
    dictionary_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string class_id = 3;
inline bool FilterDictionaryArgs::has_class_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FilterDictionaryArgs::set_has_class_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FilterDictionaryArgs::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FilterDictionaryArgs::clear_class_id() {
  if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    class_id_->clear();
  }
  clear_has_class_id();
}
inline const ::std::string& FilterDictionaryArgs::class_id() const {
  return *class_id_;
}
inline void FilterDictionaryArgs::set_class_id(const ::std::string& value) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void FilterDictionaryArgs::set_class_id(const char* value) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(value);
}
inline void FilterDictionaryArgs::set_class_id(const char* value, size_t size) {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  class_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilterDictionaryArgs::mutable_class_id() {
  set_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    class_id_ = new ::std::string;
  }
  return class_id_;
}
inline ::std::string* FilterDictionaryArgs::release_class_id() {
  clear_has_class_id();
  if (class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = class_id_;
    class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void FilterDictionaryArgs::set_allocated_class_id(::std::string* class_id) {
  if (class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete class_id_;
  }
  if (class_id) {
    set_has_class_id();
    class_id_ = class_id;
  } else {
    clear_has_class_id();
    class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional float min_df = 4;
inline bool FilterDictionaryArgs::has_min_df() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FilterDictionaryArgs::set_has_min_df() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FilterDictionaryArgs::clear_has_min_df() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FilterDictionaryArgs::clear_min_df() {
  min_df_ = 0;
  clear_has_min_df();
}
inline float FilterDictionaryArgs::min_df() const {
  return min_df_;
}
inline void FilterDictionaryArgs::set_min_df(float value) {
  set_has_min_df();
  min_df_ = value;
}

// optional float max_df = 5;
inline bool FilterDictionaryArgs::has_max_df() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FilterDictionaryArgs::set_has_max_df() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FilterDictionaryArgs::clear_has_max_df() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FilterDictionaryArgs::clear_max_df() {
  max_df_ = 0;
  clear_has_max_df();
}
inline float FilterDictionaryArgs::max_df() const {
  return max_df_;
}
inline void FilterDictionaryArgs::set_max_df(float value) {
  set_has_max_df();
  max_df_ = value;
}

// optional float min_df_rate = 6;
inline bool FilterDictionaryArgs::has_min_df_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FilterDictionaryArgs::set_has_min_df_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FilterDictionaryArgs::clear_has_min_df_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FilterDictionaryArgs::clear_min_df_rate() {
  min_df_rate_ = 0;
  clear_has_min_df_rate();
}
inline float FilterDictionaryArgs::min_df_rate() const {
  return min_df_rate_;
}
inline void FilterDictionaryArgs::set_min_df_rate(float value) {
  set_has_min_df_rate();
  min_df_rate_ = value;
}

// optional float max_df_rate = 7;
inline bool FilterDictionaryArgs::has_max_df_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FilterDictionaryArgs::set_has_max_df_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FilterDictionaryArgs::clear_has_max_df_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FilterDictionaryArgs::clear_max_df_rate() {
  max_df_rate_ = 0;
  clear_has_max_df_rate();
}
inline float FilterDictionaryArgs::max_df_rate() const {
  return max_df_rate_;
}
inline void FilterDictionaryArgs::set_max_df_rate(float value) {
  set_has_max_df_rate();
  max_df_rate_ = value;
}

// optional float min_tf = 8;
inline bool FilterDictionaryArgs::has_min_tf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FilterDictionaryArgs::set_has_min_tf() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FilterDictionaryArgs::clear_has_min_tf() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FilterDictionaryArgs::clear_min_tf() {
  min_tf_ = 0;
  clear_has_min_tf();
}
inline float FilterDictionaryArgs::min_tf() const {
  return min_tf_;
}
inline void FilterDictionaryArgs::set_min_tf(float value) {
  set_has_min_tf();
  min_tf_ = value;
}

// optional float max_tf = 9;
inline bool FilterDictionaryArgs::has_max_tf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FilterDictionaryArgs::set_has_max_tf() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FilterDictionaryArgs::clear_has_max_tf() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FilterDictionaryArgs::clear_max_tf() {
  max_tf_ = 0;
  clear_has_max_tf();
}
inline float FilterDictionaryArgs::max_tf() const {
  return max_tf_;
}
inline void FilterDictionaryArgs::set_max_tf(float value) {
  set_has_max_tf();
  max_tf_ = value;
}

// -------------------------------------------------------------------

// GatherDictionaryArgs

// optional string dictionary_target_name = 1;
inline bool GatherDictionaryArgs::has_dictionary_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatherDictionaryArgs::set_has_dictionary_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GatherDictionaryArgs::clear_has_dictionary_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GatherDictionaryArgs::clear_dictionary_target_name() {
  if (dictionary_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_target_name_->clear();
  }
  clear_has_dictionary_target_name();
}
inline const ::std::string& GatherDictionaryArgs::dictionary_target_name() const {
  return *dictionary_target_name_;
}
inline void GatherDictionaryArgs::set_dictionary_target_name(const ::std::string& value) {
  set_has_dictionary_target_name();
  if (dictionary_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_target_name_ = new ::std::string;
  }
  dictionary_target_name_->assign(value);
}
inline void GatherDictionaryArgs::set_dictionary_target_name(const char* value) {
  set_has_dictionary_target_name();
  if (dictionary_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_target_name_ = new ::std::string;
  }
  dictionary_target_name_->assign(value);
}
inline void GatherDictionaryArgs::set_dictionary_target_name(const char* value, size_t size) {
  set_has_dictionary_target_name();
  if (dictionary_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_target_name_ = new ::std::string;
  }
  dictionary_target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GatherDictionaryArgs::mutable_dictionary_target_name() {
  set_has_dictionary_target_name();
  if (dictionary_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_target_name_ = new ::std::string;
  }
  return dictionary_target_name_;
}
inline ::std::string* GatherDictionaryArgs::release_dictionary_target_name() {
  clear_has_dictionary_target_name();
  if (dictionary_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_target_name_;
    dictionary_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void GatherDictionaryArgs::set_allocated_dictionary_target_name(::std::string* dictionary_target_name) {
  if (dictionary_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_target_name_;
  }
  if (dictionary_target_name) {
    set_has_dictionary_target_name();
    dictionary_target_name_ = dictionary_target_name;
  } else {
    clear_has_dictionary_target_name();
    dictionary_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string data_path = 2;
inline bool GatherDictionaryArgs::has_data_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatherDictionaryArgs::set_has_data_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GatherDictionaryArgs::clear_has_data_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GatherDictionaryArgs::clear_data_path() {
  if (data_path_ != &::google::protobuf::internal::GetEmptyString()) {
    data_path_->clear();
  }
  clear_has_data_path();
}
inline const ::std::string& GatherDictionaryArgs::data_path() const {
  return *data_path_;
}
inline void GatherDictionaryArgs::set_data_path(const ::std::string& value) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::GetEmptyString()) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(value);
}
inline void GatherDictionaryArgs::set_data_path(const char* value) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::GetEmptyString()) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(value);
}
inline void GatherDictionaryArgs::set_data_path(const char* value, size_t size) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::GetEmptyString()) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GatherDictionaryArgs::mutable_data_path() {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::GetEmptyString()) {
    data_path_ = new ::std::string;
  }
  return data_path_;
}
inline ::std::string* GatherDictionaryArgs::release_data_path() {
  clear_has_data_path();
  if (data_path_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = data_path_;
    data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void GatherDictionaryArgs::set_allocated_data_path(::std::string* data_path) {
  if (data_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete data_path_;
  }
  if (data_path) {
    set_has_data_path();
    data_path_ = data_path;
  } else {
    clear_has_data_path();
    data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string cooc_file_path = 3;
inline bool GatherDictionaryArgs::has_cooc_file_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GatherDictionaryArgs::set_has_cooc_file_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GatherDictionaryArgs::clear_has_cooc_file_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GatherDictionaryArgs::clear_cooc_file_path() {
  if (cooc_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    cooc_file_path_->clear();
  }
  clear_has_cooc_file_path();
}
inline const ::std::string& GatherDictionaryArgs::cooc_file_path() const {
  return *cooc_file_path_;
}
inline void GatherDictionaryArgs::set_cooc_file_path(const ::std::string& value) {
  set_has_cooc_file_path();
  if (cooc_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    cooc_file_path_ = new ::std::string;
  }
  cooc_file_path_->assign(value);
}
inline void GatherDictionaryArgs::set_cooc_file_path(const char* value) {
  set_has_cooc_file_path();
  if (cooc_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    cooc_file_path_ = new ::std::string;
  }
  cooc_file_path_->assign(value);
}
inline void GatherDictionaryArgs::set_cooc_file_path(const char* value, size_t size) {
  set_has_cooc_file_path();
  if (cooc_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    cooc_file_path_ = new ::std::string;
  }
  cooc_file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GatherDictionaryArgs::mutable_cooc_file_path() {
  set_has_cooc_file_path();
  if (cooc_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    cooc_file_path_ = new ::std::string;
  }
  return cooc_file_path_;
}
inline ::std::string* GatherDictionaryArgs::release_cooc_file_path() {
  clear_has_cooc_file_path();
  if (cooc_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = cooc_file_path_;
    cooc_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void GatherDictionaryArgs::set_allocated_cooc_file_path(::std::string* cooc_file_path) {
  if (cooc_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete cooc_file_path_;
  }
  if (cooc_file_path) {
    set_has_cooc_file_path();
    cooc_file_path_ = cooc_file_path;
  } else {
    clear_has_cooc_file_path();
    cooc_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string vocab_file_path = 4;
inline bool GatherDictionaryArgs::has_vocab_file_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GatherDictionaryArgs::set_has_vocab_file_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GatherDictionaryArgs::clear_has_vocab_file_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GatherDictionaryArgs::clear_vocab_file_path() {
  if (vocab_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    vocab_file_path_->clear();
  }
  clear_has_vocab_file_path();
}
inline const ::std::string& GatherDictionaryArgs::vocab_file_path() const {
  return *vocab_file_path_;
}
inline void GatherDictionaryArgs::set_vocab_file_path(const ::std::string& value) {
  set_has_vocab_file_path();
  if (vocab_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    vocab_file_path_ = new ::std::string;
  }
  vocab_file_path_->assign(value);
}
inline void GatherDictionaryArgs::set_vocab_file_path(const char* value) {
  set_has_vocab_file_path();
  if (vocab_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    vocab_file_path_ = new ::std::string;
  }
  vocab_file_path_->assign(value);
}
inline void GatherDictionaryArgs::set_vocab_file_path(const char* value, size_t size) {
  set_has_vocab_file_path();
  if (vocab_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    vocab_file_path_ = new ::std::string;
  }
  vocab_file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GatherDictionaryArgs::mutable_vocab_file_path() {
  set_has_vocab_file_path();
  if (vocab_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    vocab_file_path_ = new ::std::string;
  }
  return vocab_file_path_;
}
inline ::std::string* GatherDictionaryArgs::release_vocab_file_path() {
  clear_has_vocab_file_path();
  if (vocab_file_path_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = vocab_file_path_;
    vocab_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void GatherDictionaryArgs::set_allocated_vocab_file_path(::std::string* vocab_file_path) {
  if (vocab_file_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete vocab_file_path_;
  }
  if (vocab_file_path) {
    set_has_vocab_file_path();
    vocab_file_path_ = vocab_file_path;
  } else {
    clear_has_vocab_file_path();
    vocab_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bool symmetric_cooc_values = 5 [default = false];
inline bool GatherDictionaryArgs::has_symmetric_cooc_values() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GatherDictionaryArgs::set_has_symmetric_cooc_values() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GatherDictionaryArgs::clear_has_symmetric_cooc_values() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GatherDictionaryArgs::clear_symmetric_cooc_values() {
  symmetric_cooc_values_ = false;
  clear_has_symmetric_cooc_values();
}
inline bool GatherDictionaryArgs::symmetric_cooc_values() const {
  return symmetric_cooc_values_;
}
inline void GatherDictionaryArgs::set_symmetric_cooc_values(bool value) {
  set_has_symmetric_cooc_values();
  symmetric_cooc_values_ = value;
}

// repeated string batch_path = 6;
inline int GatherDictionaryArgs::batch_path_size() const {
  return batch_path_.size();
}
inline void GatherDictionaryArgs::clear_batch_path() {
  batch_path_.Clear();
}
inline const ::std::string& GatherDictionaryArgs::batch_path(int index) const {
  return batch_path_.Get(index);
}
inline ::std::string* GatherDictionaryArgs::mutable_batch_path(int index) {
  return batch_path_.Mutable(index);
}
inline void GatherDictionaryArgs::set_batch_path(int index, const ::std::string& value) {
  batch_path_.Mutable(index)->assign(value);
}
inline void GatherDictionaryArgs::set_batch_path(int index, const char* value) {
  batch_path_.Mutable(index)->assign(value);
}
inline void GatherDictionaryArgs::set_batch_path(int index, const char* value, size_t size) {
  batch_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GatherDictionaryArgs::add_batch_path() {
  return batch_path_.Add();
}
inline void GatherDictionaryArgs::add_batch_path(const ::std::string& value) {
  batch_path_.Add()->assign(value);
}
inline void GatherDictionaryArgs::add_batch_path(const char* value) {
  batch_path_.Add()->assign(value);
}
inline void GatherDictionaryArgs::add_batch_path(const char* value, size_t size) {
  batch_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GatherDictionaryArgs::batch_path() const {
  return batch_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GatherDictionaryArgs::mutable_batch_path() {
  return &batch_path_;
}

// -------------------------------------------------------------------

// GetDictionaryArgs

// optional string dictionary_name = 1;
inline bool GetDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDictionaryArgs::clear_dictionary_name() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_->clear();
  }
  clear_has_dictionary_name();
}
inline const ::std::string& GetDictionaryArgs::dictionary_name() const {
  return *dictionary_name_;
}
inline void GetDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void GetDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void GetDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  return dictionary_name_;
}
inline ::std::string* GetDictionaryArgs::release_dictionary_name() {
  clear_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_name_;
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void GetDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (dictionary_name) {
    set_has_dictionary_name();
    dictionary_name_ = dictionary_name;
  } else {
    clear_has_dictionary_name();
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// GetTopicModelArgs

// optional string model_name = 1;
inline bool GetTopicModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTopicModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTopicModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTopicModelArgs::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& GetTopicModelArgs::model_name() const {
  return *model_name_;
}
inline void GetTopicModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void GetTopicModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void GetTopicModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTopicModelArgs::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* GetTopicModelArgs::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void GetTopicModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated string topic_name = 2;
inline int GetTopicModelArgs::topic_name_size() const {
  return topic_name_.size();
}
inline void GetTopicModelArgs::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& GetTopicModelArgs::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* GetTopicModelArgs::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void GetTopicModelArgs::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void GetTopicModelArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void GetTopicModelArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTopicModelArgs::add_topic_name() {
  return topic_name_.Add();
}
inline void GetTopicModelArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void GetTopicModelArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void GetTopicModelArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTopicModelArgs::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTopicModelArgs::mutable_topic_name() {
  return &topic_name_;
}

// repeated string token = 3;
inline int GetTopicModelArgs::token_size() const {
  return token_.size();
}
inline void GetTopicModelArgs::clear_token() {
  token_.Clear();
}
inline const ::std::string& GetTopicModelArgs::token(int index) const {
  return token_.Get(index);
}
inline ::std::string* GetTopicModelArgs::mutable_token(int index) {
  return token_.Mutable(index);
}
inline void GetTopicModelArgs::set_token(int index, const ::std::string& value) {
  token_.Mutable(index)->assign(value);
}
inline void GetTopicModelArgs::set_token(int index, const char* value) {
  token_.Mutable(index)->assign(value);
}
inline void GetTopicModelArgs::set_token(int index, const char* value, size_t size) {
  token_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTopicModelArgs::add_token() {
  return token_.Add();
}
inline void GetTopicModelArgs::add_token(const ::std::string& value) {
  token_.Add()->assign(value);
}
inline void GetTopicModelArgs::add_token(const char* value) {
  token_.Add()->assign(value);
}
inline void GetTopicModelArgs::add_token(const char* value, size_t size) {
  token_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTopicModelArgs::token() const {
  return token_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTopicModelArgs::mutable_token() {
  return &token_;
}

// repeated string class_id = 4;
inline int GetTopicModelArgs::class_id_size() const {
  return class_id_.size();
}
inline void GetTopicModelArgs::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& GetTopicModelArgs::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* GetTopicModelArgs::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void GetTopicModelArgs::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void GetTopicModelArgs::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void GetTopicModelArgs::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetTopicModelArgs::add_class_id() {
  return class_id_.Add();
}
inline void GetTopicModelArgs::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void GetTopicModelArgs::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void GetTopicModelArgs::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTopicModelArgs::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTopicModelArgs::mutable_class_id() {
  return &class_id_;
}

// optional bool use_sparse_format = 5;
inline bool GetTopicModelArgs::has_use_sparse_format() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetTopicModelArgs::set_has_use_sparse_format() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetTopicModelArgs::clear_has_use_sparse_format() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetTopicModelArgs::clear_use_sparse_format() {
  use_sparse_format_ = false;
  clear_has_use_sparse_format();
}
inline bool GetTopicModelArgs::use_sparse_format() const {
  return use_sparse_format_;
}
inline void GetTopicModelArgs::set_use_sparse_format(bool value) {
  set_has_use_sparse_format();
  use_sparse_format_ = value;
}

// optional float eps = 6 [default = 1e-037];
inline bool GetTopicModelArgs::has_eps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetTopicModelArgs::set_has_eps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetTopicModelArgs::clear_has_eps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetTopicModelArgs::clear_eps() {
  eps_ = 1e-037f;
  clear_has_eps();
}
inline float GetTopicModelArgs::eps() const {
  return eps_;
}
inline void GetTopicModelArgs::set_eps(float value) {
  set_has_eps();
  eps_ = value;
}

// optional .artm.GetTopicModelArgs.RequestType request_type = 7 [default = Pwt];
inline bool GetTopicModelArgs::has_request_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetTopicModelArgs::set_has_request_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetTopicModelArgs::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetTopicModelArgs::clear_request_type() {
  request_type_ = 0;
  clear_has_request_type();
}
inline ::artm::GetTopicModelArgs_RequestType GetTopicModelArgs::request_type() const {
  return static_cast< ::artm::GetTopicModelArgs_RequestType >(request_type_);
}
inline void GetTopicModelArgs::set_request_type(::artm::GetTopicModelArgs_RequestType value) {
  assert(::artm::GetTopicModelArgs_RequestType_IsValid(value));
  set_has_request_type();
  request_type_ = value;
}

// optional .artm.GetTopicModelArgs.MatrixLayout matrix_layout = 8 [default = Dense];
inline bool GetTopicModelArgs::has_matrix_layout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetTopicModelArgs::set_has_matrix_layout() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetTopicModelArgs::clear_has_matrix_layout() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetTopicModelArgs::clear_matrix_layout() {
  matrix_layout_ = 0;
  clear_has_matrix_layout();
}
inline ::artm::GetTopicModelArgs_MatrixLayout GetTopicModelArgs::matrix_layout() const {
  return static_cast< ::artm::GetTopicModelArgs_MatrixLayout >(matrix_layout_);
}
inline void GetTopicModelArgs::set_matrix_layout(::artm::GetTopicModelArgs_MatrixLayout value) {
  assert(::artm::GetTopicModelArgs_MatrixLayout_IsValid(value));
  set_has_matrix_layout();
  matrix_layout_ = value;
}

// -------------------------------------------------------------------

// GetThetaMatrixArgs

// repeated string topic_name = 3;
inline int GetThetaMatrixArgs::topic_name_size() const {
  return topic_name_.size();
}
inline void GetThetaMatrixArgs::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& GetThetaMatrixArgs::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* GetThetaMatrixArgs::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void GetThetaMatrixArgs::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void GetThetaMatrixArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void GetThetaMatrixArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetThetaMatrixArgs::add_topic_name() {
  return topic_name_.Add();
}
inline void GetThetaMatrixArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void GetThetaMatrixArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void GetThetaMatrixArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetThetaMatrixArgs::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetThetaMatrixArgs::mutable_topic_name() {
  return &topic_name_;
}

// repeated int32 topic_index = 4;
inline int GetThetaMatrixArgs::topic_index_size() const {
  return topic_index_.size();
}
inline void GetThetaMatrixArgs::clear_topic_index() {
  topic_index_.Clear();
}
inline ::google::protobuf::int32 GetThetaMatrixArgs::topic_index(int index) const {
  return topic_index_.Get(index);
}
inline void GetThetaMatrixArgs::set_topic_index(int index, ::google::protobuf::int32 value) {
  topic_index_.Set(index, value);
}
inline void GetThetaMatrixArgs::add_topic_index(::google::protobuf::int32 value) {
  topic_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GetThetaMatrixArgs::topic_index() const {
  return topic_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GetThetaMatrixArgs::mutable_topic_index() {
  return &topic_index_;
}

// optional bool use_sparse_format = 6;
inline bool GetThetaMatrixArgs::has_use_sparse_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetThetaMatrixArgs::set_has_use_sparse_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetThetaMatrixArgs::clear_has_use_sparse_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetThetaMatrixArgs::clear_use_sparse_format() {
  use_sparse_format_ = false;
  clear_has_use_sparse_format();
}
inline bool GetThetaMatrixArgs::use_sparse_format() const {
  return use_sparse_format_;
}
inline void GetThetaMatrixArgs::set_use_sparse_format(bool value) {
  set_has_use_sparse_format();
  use_sparse_format_ = value;
}

// optional float eps = 7 [default = 1e-037];
inline bool GetThetaMatrixArgs::has_eps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetThetaMatrixArgs::set_has_eps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetThetaMatrixArgs::clear_has_eps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetThetaMatrixArgs::clear_eps() {
  eps_ = 1e-037f;
  clear_has_eps();
}
inline float GetThetaMatrixArgs::eps() const {
  return eps_;
}
inline void GetThetaMatrixArgs::set_eps(float value) {
  set_has_eps();
  eps_ = value;
}

// optional .artm.GetThetaMatrixArgs.MatrixLayout matrix_layout = 8 [default = Dense];
inline bool GetThetaMatrixArgs::has_matrix_layout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetThetaMatrixArgs::set_has_matrix_layout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetThetaMatrixArgs::clear_has_matrix_layout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetThetaMatrixArgs::clear_matrix_layout() {
  matrix_layout_ = 0;
  clear_has_matrix_layout();
}
inline ::artm::GetThetaMatrixArgs_MatrixLayout GetThetaMatrixArgs::matrix_layout() const {
  return static_cast< ::artm::GetThetaMatrixArgs_MatrixLayout >(matrix_layout_);
}
inline void GetThetaMatrixArgs::set_matrix_layout(::artm::GetThetaMatrixArgs_MatrixLayout value) {
  assert(::artm::GetThetaMatrixArgs_MatrixLayout_IsValid(value));
  set_has_matrix_layout();
  matrix_layout_ = value;
}

// -------------------------------------------------------------------

// GetScoreValueArgs

// optional string model_name = 1;
inline bool GetScoreValueArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetScoreValueArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetScoreValueArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetScoreValueArgs::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& GetScoreValueArgs::model_name() const {
  return *model_name_;
}
inline void GetScoreValueArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void GetScoreValueArgs::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void GetScoreValueArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetScoreValueArgs::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* GetScoreValueArgs::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void GetScoreValueArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string score_name = 2;
inline bool GetScoreValueArgs::has_score_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetScoreValueArgs::set_has_score_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetScoreValueArgs::clear_has_score_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetScoreValueArgs::clear_score_name() {
  if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
    score_name_->clear();
  }
  clear_has_score_name();
}
inline const ::std::string& GetScoreValueArgs::score_name() const {
  return *score_name_;
}
inline void GetScoreValueArgs::set_score_name(const ::std::string& value) {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  score_name_->assign(value);
}
inline void GetScoreValueArgs::set_score_name(const char* value) {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  score_name_->assign(value);
}
inline void GetScoreValueArgs::set_score_name(const char* value, size_t size) {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  score_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetScoreValueArgs::mutable_score_name() {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  return score_name_;
}
inline ::std::string* GetScoreValueArgs::release_score_name() {
  clear_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = score_name_;
    score_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void GetScoreValueArgs::set_allocated_score_name(::std::string* score_name) {
  if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete score_name_;
  }
  if (score_name) {
    set_has_score_name();
    score_name_ = score_name;
  } else {
    clear_has_score_name();
    score_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// GetScoreArrayArgs

// optional string score_name = 2;
inline bool GetScoreArrayArgs::has_score_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetScoreArrayArgs::set_has_score_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetScoreArrayArgs::clear_has_score_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetScoreArrayArgs::clear_score_name() {
  if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
    score_name_->clear();
  }
  clear_has_score_name();
}
inline const ::std::string& GetScoreArrayArgs::score_name() const {
  return *score_name_;
}
inline void GetScoreArrayArgs::set_score_name(const ::std::string& value) {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  score_name_->assign(value);
}
inline void GetScoreArrayArgs::set_score_name(const char* value) {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  score_name_->assign(value);
}
inline void GetScoreArrayArgs::set_score_name(const char* value, size_t size) {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  score_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetScoreArrayArgs::mutable_score_name() {
  set_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    score_name_ = new ::std::string;
  }
  return score_name_;
}
inline ::std::string* GetScoreArrayArgs::release_score_name() {
  clear_has_score_name();
  if (score_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = score_name_;
    score_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void GetScoreArrayArgs::set_allocated_score_name(::std::string* score_name) {
  if (score_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete score_name_;
  }
  if (score_name) {
    set_has_score_name();
    score_name_ = score_name;
  } else {
    clear_has_score_name();
    score_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// ExportModelArgs

// optional string file_name = 1;
inline bool ExportModelArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExportModelArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExportModelArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExportModelArgs::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& ExportModelArgs::file_name() const {
  return *file_name_;
}
inline void ExportModelArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ExportModelArgs::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ExportModelArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExportModelArgs::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* ExportModelArgs::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ExportModelArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string model_name = 2;
inline bool ExportModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExportModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExportModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExportModelArgs::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& ExportModelArgs::model_name() const {
  return *model_name_;
}
inline void ExportModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void ExportModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void ExportModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExportModelArgs::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* ExportModelArgs::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ExportModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// ImportModelArgs

// optional string file_name = 1;
inline bool ImportModelArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportModelArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportModelArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportModelArgs::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& ImportModelArgs::file_name() const {
  return *file_name_;
}
inline void ImportModelArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ImportModelArgs::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ImportModelArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportModelArgs::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* ImportModelArgs::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ImportModelArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string model_name = 2;
inline bool ImportModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImportModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImportModelArgs::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& ImportModelArgs::model_name() const {
  return *model_name_;
}
inline void ImportModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void ImportModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void ImportModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportModelArgs::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* ImportModelArgs::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ImportModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// AttachModelArgs

// optional string model_name = 1;
inline bool AttachModelArgs::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttachModelArgs::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttachModelArgs::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttachModelArgs::clear_model_name() {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    model_name_->clear();
  }
  clear_has_model_name();
}
inline const ::std::string& AttachModelArgs::model_name() const {
  return *model_name_;
}
inline void AttachModelArgs::set_model_name(const ::std::string& value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void AttachModelArgs::set_model_name(const char* value) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(value);
}
inline void AttachModelArgs::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  model_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AttachModelArgs::mutable_model_name() {
  set_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    model_name_ = new ::std::string;
  }
  return model_name_;
}
inline ::std::string* AttachModelArgs::release_model_name() {
  clear_has_model_name();
  if (model_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = model_name_;
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void AttachModelArgs::set_allocated_model_name(::std::string* model_name) {
  if (model_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete model_name_;
  }
  if (model_name) {
    set_has_model_name();
    model_name_ = model_name;
  } else {
    clear_has_model_name();
    model_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// ProcessBatchesArgs

// optional string nwt_target_name = 1;
inline bool ProcessBatchesArgs::has_nwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessBatchesArgs::set_has_nwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessBatchesArgs::clear_has_nwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessBatchesArgs::clear_nwt_target_name() {
  if (nwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    nwt_target_name_->clear();
  }
  clear_has_nwt_target_name();
}
inline const ::std::string& ProcessBatchesArgs::nwt_target_name() const {
  return *nwt_target_name_;
}
inline void ProcessBatchesArgs::set_nwt_target_name(const ::std::string& value) {
  set_has_nwt_target_name();
  if (nwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_target_name_ = new ::std::string;
  }
  nwt_target_name_->assign(value);
}
inline void ProcessBatchesArgs::set_nwt_target_name(const char* value) {
  set_has_nwt_target_name();
  if (nwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_target_name_ = new ::std::string;
  }
  nwt_target_name_->assign(value);
}
inline void ProcessBatchesArgs::set_nwt_target_name(const char* value, size_t size) {
  set_has_nwt_target_name();
  if (nwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_target_name_ = new ::std::string;
  }
  nwt_target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessBatchesArgs::mutable_nwt_target_name() {
  set_has_nwt_target_name();
  if (nwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_target_name_ = new ::std::string;
  }
  return nwt_target_name_;
}
inline ::std::string* ProcessBatchesArgs::release_nwt_target_name() {
  clear_has_nwt_target_name();
  if (nwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = nwt_target_name_;
    nwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ProcessBatchesArgs::set_allocated_nwt_target_name(::std::string* nwt_target_name) {
  if (nwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete nwt_target_name_;
  }
  if (nwt_target_name) {
    set_has_nwt_target_name();
    nwt_target_name_ = nwt_target_name;
  } else {
    clear_has_nwt_target_name();
    nwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated string batch_filename = 2;
inline int ProcessBatchesArgs::batch_filename_size() const {
  return batch_filename_.size();
}
inline void ProcessBatchesArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
inline const ::std::string& ProcessBatchesArgs::batch_filename(int index) const {
  return batch_filename_.Get(index);
}
inline ::std::string* ProcessBatchesArgs::mutable_batch_filename(int index) {
  return batch_filename_.Mutable(index);
}
inline void ProcessBatchesArgs::set_batch_filename(int index, const ::std::string& value) {
  batch_filename_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessBatchesArgs::add_batch_filename() {
  return batch_filename_.Add();
}
inline void ProcessBatchesArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
}
inline void ProcessBatchesArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
}
inline void ProcessBatchesArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::batch_filename() const {
  return batch_filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_batch_filename() {
  return &batch_filename_;
}

// optional string pwt_source_name = 3;
inline bool ProcessBatchesArgs::has_pwt_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessBatchesArgs::set_has_pwt_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcessBatchesArgs::clear_has_pwt_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcessBatchesArgs::clear_pwt_source_name() {
  if (pwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    pwt_source_name_->clear();
  }
  clear_has_pwt_source_name();
}
inline const ::std::string& ProcessBatchesArgs::pwt_source_name() const {
  return *pwt_source_name_;
}
inline void ProcessBatchesArgs::set_pwt_source_name(const ::std::string& value) {
  set_has_pwt_source_name();
  if (pwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_source_name_ = new ::std::string;
  }
  pwt_source_name_->assign(value);
}
inline void ProcessBatchesArgs::set_pwt_source_name(const char* value) {
  set_has_pwt_source_name();
  if (pwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_source_name_ = new ::std::string;
  }
  pwt_source_name_->assign(value);
}
inline void ProcessBatchesArgs::set_pwt_source_name(const char* value, size_t size) {
  set_has_pwt_source_name();
  if (pwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_source_name_ = new ::std::string;
  }
  pwt_source_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessBatchesArgs::mutable_pwt_source_name() {
  set_has_pwt_source_name();
  if (pwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_source_name_ = new ::std::string;
  }
  return pwt_source_name_;
}
inline ::std::string* ProcessBatchesArgs::release_pwt_source_name() {
  clear_has_pwt_source_name();
  if (pwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = pwt_source_name_;
    pwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ProcessBatchesArgs::set_allocated_pwt_source_name(::std::string* pwt_source_name) {
  if (pwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pwt_source_name_;
  }
  if (pwt_source_name) {
    set_has_pwt_source_name();
    pwt_source_name_ = pwt_source_name;
  } else {
    clear_has_pwt_source_name();
    pwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 inner_iterations_count = 4 [default = 10];
inline bool ProcessBatchesArgs::has_inner_iterations_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessBatchesArgs::set_has_inner_iterations_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProcessBatchesArgs::clear_has_inner_iterations_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProcessBatchesArgs::clear_inner_iterations_count() {
  inner_iterations_count_ = 10;
  clear_has_inner_iterations_count();
}
inline ::google::protobuf::int32 ProcessBatchesArgs::inner_iterations_count() const {
  return inner_iterations_count_;
}
inline void ProcessBatchesArgs::set_inner_iterations_count(::google::protobuf::int32 value) {
  set_has_inner_iterations_count();
  inner_iterations_count_ = value;
}

// repeated string regularizer_name = 6;
inline int ProcessBatchesArgs::regularizer_name_size() const {
  return regularizer_name_.size();
}
inline void ProcessBatchesArgs::clear_regularizer_name() {
  regularizer_name_.Clear();
}
inline const ::std::string& ProcessBatchesArgs::regularizer_name(int index) const {
  return regularizer_name_.Get(index);
}
inline ::std::string* ProcessBatchesArgs::mutable_regularizer_name(int index) {
  return regularizer_name_.Mutable(index);
}
inline void ProcessBatchesArgs::set_regularizer_name(int index, const ::std::string& value) {
  regularizer_name_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_regularizer_name(int index, const char* value) {
  regularizer_name_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_regularizer_name(int index, const char* value, size_t size) {
  regularizer_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessBatchesArgs::add_regularizer_name() {
  return regularizer_name_.Add();
}
inline void ProcessBatchesArgs::add_regularizer_name(const ::std::string& value) {
  regularizer_name_.Add()->assign(value);
}
inline void ProcessBatchesArgs::add_regularizer_name(const char* value) {
  regularizer_name_.Add()->assign(value);
}
inline void ProcessBatchesArgs::add_regularizer_name(const char* value, size_t size) {
  regularizer_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::regularizer_name() const {
  return regularizer_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_regularizer_name() {
  return &regularizer_name_;
}

// repeated double regularizer_tau = 7;
inline int ProcessBatchesArgs::regularizer_tau_size() const {
  return regularizer_tau_.size();
}
inline void ProcessBatchesArgs::clear_regularizer_tau() {
  regularizer_tau_.Clear();
}
inline double ProcessBatchesArgs::regularizer_tau(int index) const {
  return regularizer_tau_.Get(index);
}
inline void ProcessBatchesArgs::set_regularizer_tau(int index, double value) {
  regularizer_tau_.Set(index, value);
}
inline void ProcessBatchesArgs::add_regularizer_tau(double value) {
  regularizer_tau_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
ProcessBatchesArgs::regularizer_tau() const {
  return regularizer_tau_;
}
inline ::google::protobuf::RepeatedField< double >*
ProcessBatchesArgs::mutable_regularizer_tau() {
  return &regularizer_tau_;
}

// repeated string class_id = 8;
inline int ProcessBatchesArgs::class_id_size() const {
  return class_id_.size();
}
inline void ProcessBatchesArgs::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& ProcessBatchesArgs::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* ProcessBatchesArgs::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void ProcessBatchesArgs::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessBatchesArgs::add_class_id() {
  return class_id_.Add();
}
inline void ProcessBatchesArgs::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void ProcessBatchesArgs::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void ProcessBatchesArgs::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_class_id() {
  return &class_id_;
}

// repeated float class_weight = 9;
inline int ProcessBatchesArgs::class_weight_size() const {
  return class_weight_.size();
}
inline void ProcessBatchesArgs::clear_class_weight() {
  class_weight_.Clear();
}
inline float ProcessBatchesArgs::class_weight(int index) const {
  return class_weight_.Get(index);
}
inline void ProcessBatchesArgs::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
}
inline void ProcessBatchesArgs::add_class_weight(float value) {
  class_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ProcessBatchesArgs::class_weight() const {
  return class_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
ProcessBatchesArgs::mutable_class_weight() {
  return &class_weight_;
}

// optional bool reuse_theta = 10 [default = false];
inline bool ProcessBatchesArgs::has_reuse_theta() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProcessBatchesArgs::set_has_reuse_theta() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProcessBatchesArgs::clear_has_reuse_theta() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProcessBatchesArgs::clear_reuse_theta() {
  reuse_theta_ = false;
  clear_has_reuse_theta();
}
inline bool ProcessBatchesArgs::reuse_theta() const {
  return reuse_theta_;
}
inline void ProcessBatchesArgs::set_reuse_theta(bool value) {
  set_has_reuse_theta();
  reuse_theta_ = value;
}

// optional bool opt_for_avx = 11 [default = true];
inline bool ProcessBatchesArgs::has_opt_for_avx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProcessBatchesArgs::set_has_opt_for_avx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProcessBatchesArgs::clear_has_opt_for_avx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProcessBatchesArgs::clear_opt_for_avx() {
  opt_for_avx_ = true;
  clear_has_opt_for_avx();
}
inline bool ProcessBatchesArgs::opt_for_avx() const {
  return opt_for_avx_;
}
inline void ProcessBatchesArgs::set_opt_for_avx(bool value) {
  set_has_opt_for_avx();
  opt_for_avx_ = value;
}

// optional .artm.ProcessBatchesArgs.ThetaMatrixType theta_matrix_type = 14 [default = Cache];
inline bool ProcessBatchesArgs::has_theta_matrix_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProcessBatchesArgs::set_has_theta_matrix_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProcessBatchesArgs::clear_has_theta_matrix_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProcessBatchesArgs::clear_theta_matrix_type() {
  theta_matrix_type_ = 3;
  clear_has_theta_matrix_type();
}
inline ::artm::ProcessBatchesArgs_ThetaMatrixType ProcessBatchesArgs::theta_matrix_type() const {
  return static_cast< ::artm::ProcessBatchesArgs_ThetaMatrixType >(theta_matrix_type_);
}
inline void ProcessBatchesArgs::set_theta_matrix_type(::artm::ProcessBatchesArgs_ThetaMatrixType value) {
  assert(::artm::ProcessBatchesArgs_ThetaMatrixType_IsValid(value));
  set_has_theta_matrix_type();
  theta_matrix_type_ = value;
}

// repeated float batch_weight = 15;
inline int ProcessBatchesArgs::batch_weight_size() const {
  return batch_weight_.size();
}
inline void ProcessBatchesArgs::clear_batch_weight() {
  batch_weight_.Clear();
}
inline float ProcessBatchesArgs::batch_weight(int index) const {
  return batch_weight_.Get(index);
}
inline void ProcessBatchesArgs::set_batch_weight(int index, float value) {
  batch_weight_.Set(index, value);
}
inline void ProcessBatchesArgs::add_batch_weight(float value) {
  batch_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ProcessBatchesArgs::batch_weight() const {
  return batch_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
ProcessBatchesArgs::mutable_batch_weight() {
  return &batch_weight_;
}

// optional string predict_class_id = 17;
inline bool ProcessBatchesArgs::has_predict_class_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProcessBatchesArgs::set_has_predict_class_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProcessBatchesArgs::clear_has_predict_class_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProcessBatchesArgs::clear_predict_class_id() {
  if (predict_class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    predict_class_id_->clear();
  }
  clear_has_predict_class_id();
}
inline const ::std::string& ProcessBatchesArgs::predict_class_id() const {
  return *predict_class_id_;
}
inline void ProcessBatchesArgs::set_predict_class_id(const ::std::string& value) {
  set_has_predict_class_id();
  if (predict_class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    predict_class_id_ = new ::std::string;
  }
  predict_class_id_->assign(value);
}
inline void ProcessBatchesArgs::set_predict_class_id(const char* value) {
  set_has_predict_class_id();
  if (predict_class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    predict_class_id_ = new ::std::string;
  }
  predict_class_id_->assign(value);
}
inline void ProcessBatchesArgs::set_predict_class_id(const char* value, size_t size) {
  set_has_predict_class_id();
  if (predict_class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    predict_class_id_ = new ::std::string;
  }
  predict_class_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessBatchesArgs::mutable_predict_class_id() {
  set_has_predict_class_id();
  if (predict_class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    predict_class_id_ = new ::std::string;
  }
  return predict_class_id_;
}
inline ::std::string* ProcessBatchesArgs::release_predict_class_id() {
  clear_has_predict_class_id();
  if (predict_class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = predict_class_id_;
    predict_class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ProcessBatchesArgs::set_allocated_predict_class_id(::std::string* predict_class_id) {
  if (predict_class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete predict_class_id_;
  }
  if (predict_class_id) {
    set_has_predict_class_id();
    predict_class_id_ = predict_class_id;
  } else {
    clear_has_predict_class_id();
    predict_class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .artm.Batch batch = 18;
inline int ProcessBatchesArgs::batch_size() const {
  return batch_.size();
}
inline void ProcessBatchesArgs::clear_batch() {
  batch_.Clear();
}
inline const ::artm::Batch& ProcessBatchesArgs::batch(int index) const {
  return batch_.Get(index);
}
inline ::artm::Batch* ProcessBatchesArgs::mutable_batch(int index) {
  return batch_.Mutable(index);
}
inline ::artm::Batch* ProcessBatchesArgs::add_batch() {
  return batch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
ProcessBatchesArgs::batch() const {
  return batch_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
ProcessBatchesArgs::mutable_batch() {
  return &batch_;
}

// optional bool use_random_theta = 19 [default = false];
inline bool ProcessBatchesArgs::has_use_random_theta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProcessBatchesArgs::set_has_use_random_theta() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProcessBatchesArgs::clear_has_use_random_theta() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProcessBatchesArgs::clear_use_random_theta() {
  use_random_theta_ = false;
  clear_has_use_random_theta();
}
inline bool ProcessBatchesArgs::use_random_theta() const {
  return use_random_theta_;
}
inline void ProcessBatchesArgs::set_use_random_theta(bool value) {
  set_has_use_random_theta();
  use_random_theta_ = value;
}

// repeated string topic_name = 20;
inline int ProcessBatchesArgs::topic_name_size() const {
  return topic_name_.size();
}
inline void ProcessBatchesArgs::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& ProcessBatchesArgs::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* ProcessBatchesArgs::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void ProcessBatchesArgs::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void ProcessBatchesArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessBatchesArgs::add_topic_name() {
  return topic_name_.Add();
}
inline void ProcessBatchesArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void ProcessBatchesArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void ProcessBatchesArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessBatchesArgs::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessBatchesArgs::mutable_topic_name() {
  return &topic_name_;
}

// -------------------------------------------------------------------

// ProcessBatchesResult

// repeated .artm.ScoreData score_data = 1;
inline int ProcessBatchesResult::score_data_size() const {
  return score_data_.size();
}
inline void ProcessBatchesResult::clear_score_data() {
  score_data_.Clear();
}
inline const ::artm::ScoreData& ProcessBatchesResult::score_data(int index) const {
  return score_data_.Get(index);
}
inline ::artm::ScoreData* ProcessBatchesResult::mutable_score_data(int index) {
  return score_data_.Mutable(index);
}
inline ::artm::ScoreData* ProcessBatchesResult::add_score_data() {
  return score_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >&
ProcessBatchesResult::score_data() const {
  return score_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::ScoreData >*
ProcessBatchesResult::mutable_score_data() {
  return &score_data_;
}

// optional .artm.ThetaMatrix theta_matrix = 2;
inline bool ProcessBatchesResult::has_theta_matrix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessBatchesResult::set_has_theta_matrix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessBatchesResult::clear_has_theta_matrix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessBatchesResult::clear_theta_matrix() {
  if (theta_matrix_ != NULL) theta_matrix_->::artm::ThetaMatrix::Clear();
  clear_has_theta_matrix();
}
inline const ::artm::ThetaMatrix& ProcessBatchesResult::theta_matrix() const {
  return theta_matrix_ != NULL ? *theta_matrix_ : *default_instance_->theta_matrix_;
}
inline ::artm::ThetaMatrix* ProcessBatchesResult::mutable_theta_matrix() {
  set_has_theta_matrix();
  if (theta_matrix_ == NULL) theta_matrix_ = new ::artm::ThetaMatrix;
  return theta_matrix_;
}
inline ::artm::ThetaMatrix* ProcessBatchesResult::release_theta_matrix() {
  clear_has_theta_matrix();
  ::artm::ThetaMatrix* temp = theta_matrix_;
  theta_matrix_ = NULL;
  return temp;
}
inline void ProcessBatchesResult::set_allocated_theta_matrix(::artm::ThetaMatrix* theta_matrix) {
  delete theta_matrix_;
  theta_matrix_ = theta_matrix;
  if (theta_matrix) {
    set_has_theta_matrix();
  } else {
    clear_has_theta_matrix();
  }
}

// -------------------------------------------------------------------

// MergeModelArgs

// optional string nwt_target_name = 1;
inline bool MergeModelArgs::has_nwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MergeModelArgs::set_has_nwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MergeModelArgs::clear_has_nwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MergeModelArgs::clear_nwt_target_name() {
  if (nwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    nwt_target_name_->clear();
  }
  clear_has_nwt_target_name();
}
inline const ::std::string& MergeModelArgs::nwt_target_name() const {
  return *nwt_target_name_;
}
inline void MergeModelArgs::set_nwt_target_name(const ::std::string& value) {
  set_has_nwt_target_name();
  if (nwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_target_name_ = new ::std::string;
  }
  nwt_target_name_->assign(value);
}
inline void MergeModelArgs::set_nwt_target_name(const char* value) {
  set_has_nwt_target_name();
  if (nwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_target_name_ = new ::std::string;
  }
  nwt_target_name_->assign(value);
}
inline void MergeModelArgs::set_nwt_target_name(const char* value, size_t size) {
  set_has_nwt_target_name();
  if (nwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_target_name_ = new ::std::string;
  }
  nwt_target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MergeModelArgs::mutable_nwt_target_name() {
  set_has_nwt_target_name();
  if (nwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_target_name_ = new ::std::string;
  }
  return nwt_target_name_;
}
inline ::std::string* MergeModelArgs::release_nwt_target_name() {
  clear_has_nwt_target_name();
  if (nwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = nwt_target_name_;
    nwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MergeModelArgs::set_allocated_nwt_target_name(::std::string* nwt_target_name) {
  if (nwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete nwt_target_name_;
  }
  if (nwt_target_name) {
    set_has_nwt_target_name();
    nwt_target_name_ = nwt_target_name;
  } else {
    clear_has_nwt_target_name();
    nwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated string nwt_source_name = 2;
inline int MergeModelArgs::nwt_source_name_size() const {
  return nwt_source_name_.size();
}
inline void MergeModelArgs::clear_nwt_source_name() {
  nwt_source_name_.Clear();
}
inline const ::std::string& MergeModelArgs::nwt_source_name(int index) const {
  return nwt_source_name_.Get(index);
}
inline ::std::string* MergeModelArgs::mutable_nwt_source_name(int index) {
  return nwt_source_name_.Mutable(index);
}
inline void MergeModelArgs::set_nwt_source_name(int index, const ::std::string& value) {
  nwt_source_name_.Mutable(index)->assign(value);
}
inline void MergeModelArgs::set_nwt_source_name(int index, const char* value) {
  nwt_source_name_.Mutable(index)->assign(value);
}
inline void MergeModelArgs::set_nwt_source_name(int index, const char* value, size_t size) {
  nwt_source_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MergeModelArgs::add_nwt_source_name() {
  return nwt_source_name_.Add();
}
inline void MergeModelArgs::add_nwt_source_name(const ::std::string& value) {
  nwt_source_name_.Add()->assign(value);
}
inline void MergeModelArgs::add_nwt_source_name(const char* value) {
  nwt_source_name_.Add()->assign(value);
}
inline void MergeModelArgs::add_nwt_source_name(const char* value, size_t size) {
  nwt_source_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MergeModelArgs::nwt_source_name() const {
  return nwt_source_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MergeModelArgs::mutable_nwt_source_name() {
  return &nwt_source_name_;
}

// repeated float source_weight = 3;
inline int MergeModelArgs::source_weight_size() const {
  return source_weight_.size();
}
inline void MergeModelArgs::clear_source_weight() {
  source_weight_.Clear();
}
inline float MergeModelArgs::source_weight(int index) const {
  return source_weight_.Get(index);
}
inline void MergeModelArgs::set_source_weight(int index, float value) {
  source_weight_.Set(index, value);
}
inline void MergeModelArgs::add_source_weight(float value) {
  source_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MergeModelArgs::source_weight() const {
  return source_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
MergeModelArgs::mutable_source_weight() {
  return &source_weight_;
}

// repeated string topic_name = 4;
inline int MergeModelArgs::topic_name_size() const {
  return topic_name_.size();
}
inline void MergeModelArgs::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& MergeModelArgs::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* MergeModelArgs::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void MergeModelArgs::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void MergeModelArgs::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void MergeModelArgs::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MergeModelArgs::add_topic_name() {
  return topic_name_.Add();
}
inline void MergeModelArgs::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void MergeModelArgs::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void MergeModelArgs::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MergeModelArgs::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MergeModelArgs::mutable_topic_name() {
  return &topic_name_;
}

// -------------------------------------------------------------------

// RegularizeModelArgs

// optional string rwt_target_name = 1;
inline bool RegularizeModelArgs::has_rwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegularizeModelArgs::set_has_rwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegularizeModelArgs::clear_has_rwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegularizeModelArgs::clear_rwt_target_name() {
  if (rwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    rwt_target_name_->clear();
  }
  clear_has_rwt_target_name();
}
inline const ::std::string& RegularizeModelArgs::rwt_target_name() const {
  return *rwt_target_name_;
}
inline void RegularizeModelArgs::set_rwt_target_name(const ::std::string& value) {
  set_has_rwt_target_name();
  if (rwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    rwt_target_name_ = new ::std::string;
  }
  rwt_target_name_->assign(value);
}
inline void RegularizeModelArgs::set_rwt_target_name(const char* value) {
  set_has_rwt_target_name();
  if (rwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    rwt_target_name_ = new ::std::string;
  }
  rwt_target_name_->assign(value);
}
inline void RegularizeModelArgs::set_rwt_target_name(const char* value, size_t size) {
  set_has_rwt_target_name();
  if (rwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    rwt_target_name_ = new ::std::string;
  }
  rwt_target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegularizeModelArgs::mutable_rwt_target_name() {
  set_has_rwt_target_name();
  if (rwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    rwt_target_name_ = new ::std::string;
  }
  return rwt_target_name_;
}
inline ::std::string* RegularizeModelArgs::release_rwt_target_name() {
  clear_has_rwt_target_name();
  if (rwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = rwt_target_name_;
    rwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void RegularizeModelArgs::set_allocated_rwt_target_name(::std::string* rwt_target_name) {
  if (rwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete rwt_target_name_;
  }
  if (rwt_target_name) {
    set_has_rwt_target_name();
    rwt_target_name_ = rwt_target_name;
  } else {
    clear_has_rwt_target_name();
    rwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string pwt_source_name = 2;
inline bool RegularizeModelArgs::has_pwt_source_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegularizeModelArgs::set_has_pwt_source_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegularizeModelArgs::clear_has_pwt_source_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegularizeModelArgs::clear_pwt_source_name() {
  if (pwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    pwt_source_name_->clear();
  }
  clear_has_pwt_source_name();
}
inline const ::std::string& RegularizeModelArgs::pwt_source_name() const {
  return *pwt_source_name_;
}
inline void RegularizeModelArgs::set_pwt_source_name(const ::std::string& value) {
  set_has_pwt_source_name();
  if (pwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_source_name_ = new ::std::string;
  }
  pwt_source_name_->assign(value);
}
inline void RegularizeModelArgs::set_pwt_source_name(const char* value) {
  set_has_pwt_source_name();
  if (pwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_source_name_ = new ::std::string;
  }
  pwt_source_name_->assign(value);
}
inline void RegularizeModelArgs::set_pwt_source_name(const char* value, size_t size) {
  set_has_pwt_source_name();
  if (pwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_source_name_ = new ::std::string;
  }
  pwt_source_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegularizeModelArgs::mutable_pwt_source_name() {
  set_has_pwt_source_name();
  if (pwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_source_name_ = new ::std::string;
  }
  return pwt_source_name_;
}
inline ::std::string* RegularizeModelArgs::release_pwt_source_name() {
  clear_has_pwt_source_name();
  if (pwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = pwt_source_name_;
    pwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void RegularizeModelArgs::set_allocated_pwt_source_name(::std::string* pwt_source_name) {
  if (pwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pwt_source_name_;
  }
  if (pwt_source_name) {
    set_has_pwt_source_name();
    pwt_source_name_ = pwt_source_name;
  } else {
    clear_has_pwt_source_name();
    pwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string nwt_source_name = 3;
inline bool RegularizeModelArgs::has_nwt_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegularizeModelArgs::set_has_nwt_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegularizeModelArgs::clear_has_nwt_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegularizeModelArgs::clear_nwt_source_name() {
  if (nwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    nwt_source_name_->clear();
  }
  clear_has_nwt_source_name();
}
inline const ::std::string& RegularizeModelArgs::nwt_source_name() const {
  return *nwt_source_name_;
}
inline void RegularizeModelArgs::set_nwt_source_name(const ::std::string& value) {
  set_has_nwt_source_name();
  if (nwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_source_name_ = new ::std::string;
  }
  nwt_source_name_->assign(value);
}
inline void RegularizeModelArgs::set_nwt_source_name(const char* value) {
  set_has_nwt_source_name();
  if (nwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_source_name_ = new ::std::string;
  }
  nwt_source_name_->assign(value);
}
inline void RegularizeModelArgs::set_nwt_source_name(const char* value, size_t size) {
  set_has_nwt_source_name();
  if (nwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_source_name_ = new ::std::string;
  }
  nwt_source_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegularizeModelArgs::mutable_nwt_source_name() {
  set_has_nwt_source_name();
  if (nwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_source_name_ = new ::std::string;
  }
  return nwt_source_name_;
}
inline ::std::string* RegularizeModelArgs::release_nwt_source_name() {
  clear_has_nwt_source_name();
  if (nwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = nwt_source_name_;
    nwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void RegularizeModelArgs::set_allocated_nwt_source_name(::std::string* nwt_source_name) {
  if (nwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete nwt_source_name_;
  }
  if (nwt_source_name) {
    set_has_nwt_source_name();
    nwt_source_name_ = nwt_source_name;
  } else {
    clear_has_nwt_source_name();
    nwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// repeated .artm.RegularizerSettings regularizer_settings = 4;
inline int RegularizeModelArgs::regularizer_settings_size() const {
  return regularizer_settings_.size();
}
inline void RegularizeModelArgs::clear_regularizer_settings() {
  regularizer_settings_.Clear();
}
inline const ::artm::RegularizerSettings& RegularizeModelArgs::regularizer_settings(int index) const {
  return regularizer_settings_.Get(index);
}
inline ::artm::RegularizerSettings* RegularizeModelArgs::mutable_regularizer_settings(int index) {
  return regularizer_settings_.Mutable(index);
}
inline ::artm::RegularizerSettings* RegularizeModelArgs::add_regularizer_settings() {
  return regularizer_settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings >&
RegularizeModelArgs::regularizer_settings() const {
  return regularizer_settings_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::RegularizerSettings >*
RegularizeModelArgs::mutable_regularizer_settings() {
  return &regularizer_settings_;
}

// -------------------------------------------------------------------

// NormalizeModelArgs

// optional string pwt_target_name = 1;
inline bool NormalizeModelArgs::has_pwt_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizeModelArgs::set_has_pwt_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalizeModelArgs::clear_has_pwt_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalizeModelArgs::clear_pwt_target_name() {
  if (pwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    pwt_target_name_->clear();
  }
  clear_has_pwt_target_name();
}
inline const ::std::string& NormalizeModelArgs::pwt_target_name() const {
  return *pwt_target_name_;
}
inline void NormalizeModelArgs::set_pwt_target_name(const ::std::string& value) {
  set_has_pwt_target_name();
  if (pwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_target_name_ = new ::std::string;
  }
  pwt_target_name_->assign(value);
}
inline void NormalizeModelArgs::set_pwt_target_name(const char* value) {
  set_has_pwt_target_name();
  if (pwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_target_name_ = new ::std::string;
  }
  pwt_target_name_->assign(value);
}
inline void NormalizeModelArgs::set_pwt_target_name(const char* value, size_t size) {
  set_has_pwt_target_name();
  if (pwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_target_name_ = new ::std::string;
  }
  pwt_target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalizeModelArgs::mutable_pwt_target_name() {
  set_has_pwt_target_name();
  if (pwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    pwt_target_name_ = new ::std::string;
  }
  return pwt_target_name_;
}
inline ::std::string* NormalizeModelArgs::release_pwt_target_name() {
  clear_has_pwt_target_name();
  if (pwt_target_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = pwt_target_name_;
    pwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NormalizeModelArgs::set_allocated_pwt_target_name(::std::string* pwt_target_name) {
  if (pwt_target_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete pwt_target_name_;
  }
  if (pwt_target_name) {
    set_has_pwt_target_name();
    pwt_target_name_ = pwt_target_name;
  } else {
    clear_has_pwt_target_name();
    pwt_target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string nwt_source_name = 2;
inline bool NormalizeModelArgs::has_nwt_source_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalizeModelArgs::set_has_nwt_source_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalizeModelArgs::clear_has_nwt_source_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalizeModelArgs::clear_nwt_source_name() {
  if (nwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    nwt_source_name_->clear();
  }
  clear_has_nwt_source_name();
}
inline const ::std::string& NormalizeModelArgs::nwt_source_name() const {
  return *nwt_source_name_;
}
inline void NormalizeModelArgs::set_nwt_source_name(const ::std::string& value) {
  set_has_nwt_source_name();
  if (nwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_source_name_ = new ::std::string;
  }
  nwt_source_name_->assign(value);
}
inline void NormalizeModelArgs::set_nwt_source_name(const char* value) {
  set_has_nwt_source_name();
  if (nwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_source_name_ = new ::std::string;
  }
  nwt_source_name_->assign(value);
}
inline void NormalizeModelArgs::set_nwt_source_name(const char* value, size_t size) {
  set_has_nwt_source_name();
  if (nwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_source_name_ = new ::std::string;
  }
  nwt_source_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalizeModelArgs::mutable_nwt_source_name() {
  set_has_nwt_source_name();
  if (nwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    nwt_source_name_ = new ::std::string;
  }
  return nwt_source_name_;
}
inline ::std::string* NormalizeModelArgs::release_nwt_source_name() {
  clear_has_nwt_source_name();
  if (nwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = nwt_source_name_;
    nwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NormalizeModelArgs::set_allocated_nwt_source_name(::std::string* nwt_source_name) {
  if (nwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete nwt_source_name_;
  }
  if (nwt_source_name) {
    set_has_nwt_source_name();
    nwt_source_name_ = nwt_source_name;
  } else {
    clear_has_nwt_source_name();
    nwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string rwt_source_name = 3;
inline bool NormalizeModelArgs::has_rwt_source_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalizeModelArgs::set_has_rwt_source_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalizeModelArgs::clear_has_rwt_source_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalizeModelArgs::clear_rwt_source_name() {
  if (rwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    rwt_source_name_->clear();
  }
  clear_has_rwt_source_name();
}
inline const ::std::string& NormalizeModelArgs::rwt_source_name() const {
  return *rwt_source_name_;
}
inline void NormalizeModelArgs::set_rwt_source_name(const ::std::string& value) {
  set_has_rwt_source_name();
  if (rwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    rwt_source_name_ = new ::std::string;
  }
  rwt_source_name_->assign(value);
}
inline void NormalizeModelArgs::set_rwt_source_name(const char* value) {
  set_has_rwt_source_name();
  if (rwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    rwt_source_name_ = new ::std::string;
  }
  rwt_source_name_->assign(value);
}
inline void NormalizeModelArgs::set_rwt_source_name(const char* value, size_t size) {
  set_has_rwt_source_name();
  if (rwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    rwt_source_name_ = new ::std::string;
  }
  rwt_source_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalizeModelArgs::mutable_rwt_source_name() {
  set_has_rwt_source_name();
  if (rwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    rwt_source_name_ = new ::std::string;
  }
  return rwt_source_name_;
}
inline ::std::string* NormalizeModelArgs::release_rwt_source_name() {
  clear_has_rwt_source_name();
  if (rwt_source_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = rwt_source_name_;
    rwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void NormalizeModelArgs::set_allocated_rwt_source_name(::std::string* rwt_source_name) {
  if (rwt_source_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete rwt_source_name_;
  }
  if (rwt_source_name) {
    set_has_rwt_source_name();
    rwt_source_name_ = rwt_source_name;
  } else {
    clear_has_rwt_source_name();
    rwt_source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// ImportDictionaryArgs

// optional string file_name = 1;
inline bool ImportDictionaryArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportDictionaryArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportDictionaryArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportDictionaryArgs::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& ImportDictionaryArgs::file_name() const {
  return *file_name_;
}
inline void ImportDictionaryArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ImportDictionaryArgs::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ImportDictionaryArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportDictionaryArgs::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* ImportDictionaryArgs::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ImportDictionaryArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string dictionary_name = 2;
inline bool ImportDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImportDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImportDictionaryArgs::clear_dictionary_name() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_->clear();
  }
  clear_has_dictionary_name();
}
inline const ::std::string& ImportDictionaryArgs::dictionary_name() const {
  return *dictionary_name_;
}
inline void ImportDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void ImportDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void ImportDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  return dictionary_name_;
}
inline ::std::string* ImportDictionaryArgs::release_dictionary_name() {
  clear_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_name_;
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ImportDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (dictionary_name) {
    set_has_dictionary_name();
    dictionary_name_ = dictionary_name;
  } else {
    clear_has_dictionary_name();
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// ExportDictionaryArgs

// optional string file_name = 1;
inline bool ExportDictionaryArgs::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExportDictionaryArgs::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExportDictionaryArgs::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExportDictionaryArgs::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& ExportDictionaryArgs::file_name() const {
  return *file_name_;
}
inline void ExportDictionaryArgs::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ExportDictionaryArgs::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void ExportDictionaryArgs::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExportDictionaryArgs::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}
inline ::std::string* ExportDictionaryArgs::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ExportDictionaryArgs::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string dictionary_name = 2;
inline bool ExportDictionaryArgs::has_dictionary_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExportDictionaryArgs::set_has_dictionary_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExportDictionaryArgs::clear_has_dictionary_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExportDictionaryArgs::clear_dictionary_name() {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_->clear();
  }
  clear_has_dictionary_name();
}
inline const ::std::string& ExportDictionaryArgs::dictionary_name() const {
  return *dictionary_name_;
}
inline void ExportDictionaryArgs::set_dictionary_name(const ::std::string& value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void ExportDictionaryArgs::set_dictionary_name(const char* value) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(value);
}
inline void ExportDictionaryArgs::set_dictionary_name(const char* value, size_t size) {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  dictionary_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExportDictionaryArgs::mutable_dictionary_name() {
  set_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    dictionary_name_ = new ::std::string;
  }
  return dictionary_name_;
}
inline ::std::string* ExportDictionaryArgs::release_dictionary_name() {
  clear_has_dictionary_name();
  if (dictionary_name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = dictionary_name_;
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ExportDictionaryArgs::set_allocated_dictionary_name(::std::string* dictionary_name) {
  if (dictionary_name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete dictionary_name_;
  }
  if (dictionary_name) {
    set_has_dictionary_name();
    dictionary_name_ = dictionary_name;
  } else {
    clear_has_dictionary_name();
    dictionary_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// CopyRequestResultArgs

// optional .artm.CopyRequestResultArgs.RequestType request_type = 1 [default = DefaultRequestType];
inline bool CopyRequestResultArgs::has_request_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CopyRequestResultArgs::set_has_request_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CopyRequestResultArgs::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CopyRequestResultArgs::clear_request_type() {
  request_type_ = 0;
  clear_has_request_type();
}
inline ::artm::CopyRequestResultArgs_RequestType CopyRequestResultArgs::request_type() const {
  return static_cast< ::artm::CopyRequestResultArgs_RequestType >(request_type_);
}
inline void CopyRequestResultArgs::set_request_type(::artm::CopyRequestResultArgs_RequestType value) {
  assert(::artm::CopyRequestResultArgs_RequestType_IsValid(value));
  set_has_request_type();
  request_type_ = value;
}

// -------------------------------------------------------------------

// DuplicateMasterComponentArgs

// -------------------------------------------------------------------

// GetMasterComponentInfoArgs

// -------------------------------------------------------------------

// MasterComponentInfo_RegularizerInfo

// optional string name = 1;
inline bool MasterComponentInfo_RegularizerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_RegularizerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_RegularizerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_RegularizerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MasterComponentInfo_RegularizerInfo::name() const {
  return *name_;
}
inline void MasterComponentInfo_RegularizerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MasterComponentInfo_RegularizerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MasterComponentInfo_RegularizerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterComponentInfo_RegularizerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MasterComponentInfo_RegularizerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MasterComponentInfo_RegularizerInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string type = 2;
inline bool MasterComponentInfo_RegularizerInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_RegularizerInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_RegularizerInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_RegularizerInfo::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyString()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& MasterComponentInfo_RegularizerInfo::type() const {
  return *type_;
}
inline void MasterComponentInfo_RegularizerInfo::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MasterComponentInfo_RegularizerInfo::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MasterComponentInfo_RegularizerInfo::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterComponentInfo_RegularizerInfo::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* MasterComponentInfo_RegularizerInfo::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MasterComponentInfo_RegularizerInfo::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyString()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// MasterComponentInfo_ScoreInfo

// optional string name = 1;
inline bool MasterComponentInfo_ScoreInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_ScoreInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_ScoreInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_ScoreInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MasterComponentInfo_ScoreInfo::name() const {
  return *name_;
}
inline void MasterComponentInfo_ScoreInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MasterComponentInfo_ScoreInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MasterComponentInfo_ScoreInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterComponentInfo_ScoreInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MasterComponentInfo_ScoreInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MasterComponentInfo_ScoreInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string type = 2;
inline bool MasterComponentInfo_ScoreInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_ScoreInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_ScoreInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_ScoreInfo::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyString()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& MasterComponentInfo_ScoreInfo::type() const {
  return *type_;
}
inline void MasterComponentInfo_ScoreInfo::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MasterComponentInfo_ScoreInfo::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MasterComponentInfo_ScoreInfo::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterComponentInfo_ScoreInfo::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* MasterComponentInfo_ScoreInfo::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MasterComponentInfo_ScoreInfo::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyString()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// MasterComponentInfo_DictionaryInfo

// optional string name = 1;
inline bool MasterComponentInfo_DictionaryInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_DictionaryInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_DictionaryInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_DictionaryInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MasterComponentInfo_DictionaryInfo::name() const {
  return *name_;
}
inline void MasterComponentInfo_DictionaryInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MasterComponentInfo_DictionaryInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MasterComponentInfo_DictionaryInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterComponentInfo_DictionaryInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MasterComponentInfo_DictionaryInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MasterComponentInfo_DictionaryInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int64 entries_count = 2;
inline bool MasterComponentInfo_DictionaryInfo::has_entries_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_DictionaryInfo::set_has_entries_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_DictionaryInfo::clear_has_entries_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_DictionaryInfo::clear_entries_count() {
  entries_count_ = GOOGLE_LONGLONG(0);
  clear_has_entries_count();
}
inline ::google::protobuf::int64 MasterComponentInfo_DictionaryInfo::entries_count() const {
  return entries_count_;
}
inline void MasterComponentInfo_DictionaryInfo::set_entries_count(::google::protobuf::int64 value) {
  set_has_entries_count();
  entries_count_ = value;
}

// -------------------------------------------------------------------

// MasterComponentInfo_BatchInfo

// optional string name = 1;
inline bool MasterComponentInfo_BatchInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_BatchInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_BatchInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_BatchInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MasterComponentInfo_BatchInfo::name() const {
  return *name_;
}
inline void MasterComponentInfo_BatchInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MasterComponentInfo_BatchInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MasterComponentInfo_BatchInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterComponentInfo_BatchInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MasterComponentInfo_BatchInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MasterComponentInfo_BatchInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 items_count = 2;
inline bool MasterComponentInfo_BatchInfo::has_items_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_BatchInfo::set_has_items_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_BatchInfo::clear_has_items_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_BatchInfo::clear_items_count() {
  items_count_ = 0;
  clear_has_items_count();
}
inline ::google::protobuf::int32 MasterComponentInfo_BatchInfo::items_count() const {
  return items_count_;
}
inline void MasterComponentInfo_BatchInfo::set_items_count(::google::protobuf::int32 value) {
  set_has_items_count();
  items_count_ = value;
}

// optional int32 token_count = 3;
inline bool MasterComponentInfo_BatchInfo::has_token_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MasterComponentInfo_BatchInfo::set_has_token_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MasterComponentInfo_BatchInfo::clear_has_token_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MasterComponentInfo_BatchInfo::clear_token_count() {
  token_count_ = 0;
  clear_has_token_count();
}
inline ::google::protobuf::int32 MasterComponentInfo_BatchInfo::token_count() const {
  return token_count_;
}
inline void MasterComponentInfo_BatchInfo::set_token_count(::google::protobuf::int32 value) {
  set_has_token_count();
  token_count_ = value;
}

// -------------------------------------------------------------------

// MasterComponentInfo_ModelInfo

// optional string name = 1;
inline bool MasterComponentInfo_ModelInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_ModelInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_ModelInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_ModelInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MasterComponentInfo_ModelInfo::name() const {
  return *name_;
}
inline void MasterComponentInfo_ModelInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MasterComponentInfo_ModelInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MasterComponentInfo_ModelInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterComponentInfo_ModelInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MasterComponentInfo_ModelInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MasterComponentInfo_ModelInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional string type = 2;
inline bool MasterComponentInfo_ModelInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_ModelInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_ModelInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_ModelInfo::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyString()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& MasterComponentInfo_ModelInfo::type() const {
  return *type_;
}
inline void MasterComponentInfo_ModelInfo::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MasterComponentInfo_ModelInfo::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MasterComponentInfo_ModelInfo::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterComponentInfo_ModelInfo::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* MasterComponentInfo_ModelInfo::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MasterComponentInfo_ModelInfo::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyString()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 topics_count = 3;
inline bool MasterComponentInfo_ModelInfo::has_topics_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MasterComponentInfo_ModelInfo::set_has_topics_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MasterComponentInfo_ModelInfo::clear_has_topics_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MasterComponentInfo_ModelInfo::clear_topics_count() {
  topics_count_ = 0;
  clear_has_topics_count();
}
inline ::google::protobuf::int32 MasterComponentInfo_ModelInfo::topics_count() const {
  return topics_count_;
}
inline void MasterComponentInfo_ModelInfo::set_topics_count(::google::protobuf::int32 value) {
  set_has_topics_count();
  topics_count_ = value;
}

// optional int32 token_count = 4;
inline bool MasterComponentInfo_ModelInfo::has_token_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MasterComponentInfo_ModelInfo::set_has_token_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MasterComponentInfo_ModelInfo::clear_has_token_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MasterComponentInfo_ModelInfo::clear_token_count() {
  token_count_ = 0;
  clear_has_token_count();
}
inline ::google::protobuf::int32 MasterComponentInfo_ModelInfo::token_count() const {
  return token_count_;
}
inline void MasterComponentInfo_ModelInfo::set_token_count(::google::protobuf::int32 value) {
  set_has_token_count();
  token_count_ = value;
}

// -------------------------------------------------------------------

// MasterComponentInfo_CacheEntryInfo

// optional string key = 1;
inline bool MasterComponentInfo_CacheEntryInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo_CacheEntryInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo_CacheEntryInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo_CacheEntryInfo::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& MasterComponentInfo_CacheEntryInfo::key() const {
  return *key_;
}
inline void MasterComponentInfo_CacheEntryInfo::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MasterComponentInfo_CacheEntryInfo::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void MasterComponentInfo_CacheEntryInfo::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterComponentInfo_CacheEntryInfo::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* MasterComponentInfo_CacheEntryInfo::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MasterComponentInfo_CacheEntryInfo::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyString()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 byte_size = 2;
inline bool MasterComponentInfo_CacheEntryInfo::has_byte_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo_CacheEntryInfo::set_has_byte_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo_CacheEntryInfo::clear_has_byte_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo_CacheEntryInfo::clear_byte_size() {
  byte_size_ = 0;
  clear_has_byte_size();
}
inline ::google::protobuf::int32 MasterComponentInfo_CacheEntryInfo::byte_size() const {
  return byte_size_;
}
inline void MasterComponentInfo_CacheEntryInfo::set_byte_size(::google::protobuf::int32 value) {
  set_has_byte_size();
  byte_size_ = value;
}

// -------------------------------------------------------------------

// MasterComponentInfo

// optional int32 master_id = 1;
inline bool MasterComponentInfo::has_master_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MasterComponentInfo::set_has_master_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MasterComponentInfo::clear_has_master_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MasterComponentInfo::clear_master_id() {
  master_id_ = 0;
  clear_has_master_id();
}
inline ::google::protobuf::int32 MasterComponentInfo::master_id() const {
  return master_id_;
}
inline void MasterComponentInfo::set_master_id(::google::protobuf::int32 value) {
  set_has_master_id();
  master_id_ = value;
}

// optional .artm.MasterModelConfig config = 2;
inline bool MasterComponentInfo::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MasterComponentInfo::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MasterComponentInfo::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MasterComponentInfo::clear_config() {
  if (config_ != NULL) config_->::artm::MasterModelConfig::Clear();
  clear_has_config();
}
inline const ::artm::MasterModelConfig& MasterComponentInfo::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::artm::MasterModelConfig* MasterComponentInfo::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::artm::MasterModelConfig;
  return config_;
}
inline ::artm::MasterModelConfig* MasterComponentInfo::release_config() {
  clear_has_config();
  ::artm::MasterModelConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void MasterComponentInfo::set_allocated_config(::artm::MasterModelConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// repeated .artm.MasterComponentInfo.RegularizerInfo regularizer = 3;
inline int MasterComponentInfo::regularizer_size() const {
  return regularizer_.size();
}
inline void MasterComponentInfo::clear_regularizer() {
  regularizer_.Clear();
}
inline const ::artm::MasterComponentInfo_RegularizerInfo& MasterComponentInfo::regularizer(int index) const {
  return regularizer_.Get(index);
}
inline ::artm::MasterComponentInfo_RegularizerInfo* MasterComponentInfo::mutable_regularizer(int index) {
  return regularizer_.Mutable(index);
}
inline ::artm::MasterComponentInfo_RegularizerInfo* MasterComponentInfo::add_regularizer() {
  return regularizer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo >&
MasterComponentInfo::regularizer() const {
  return regularizer_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_RegularizerInfo >*
MasterComponentInfo::mutable_regularizer() {
  return &regularizer_;
}

// repeated .artm.MasterComponentInfo.ScoreInfo score = 4;
inline int MasterComponentInfo::score_size() const {
  return score_.size();
}
inline void MasterComponentInfo::clear_score() {
  score_.Clear();
}
inline const ::artm::MasterComponentInfo_ScoreInfo& MasterComponentInfo::score(int index) const {
  return score_.Get(index);
}
inline ::artm::MasterComponentInfo_ScoreInfo* MasterComponentInfo::mutable_score(int index) {
  return score_.Mutable(index);
}
inline ::artm::MasterComponentInfo_ScoreInfo* MasterComponentInfo::add_score() {
  return score_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo >&
MasterComponentInfo::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ScoreInfo >*
MasterComponentInfo::mutable_score() {
  return &score_;
}

// repeated .artm.MasterComponentInfo.DictionaryInfo dictionary = 5;
inline int MasterComponentInfo::dictionary_size() const {
  return dictionary_.size();
}
inline void MasterComponentInfo::clear_dictionary() {
  dictionary_.Clear();
}
inline const ::artm::MasterComponentInfo_DictionaryInfo& MasterComponentInfo::dictionary(int index) const {
  return dictionary_.Get(index);
}
inline ::artm::MasterComponentInfo_DictionaryInfo* MasterComponentInfo::mutable_dictionary(int index) {
  return dictionary_.Mutable(index);
}
inline ::artm::MasterComponentInfo_DictionaryInfo* MasterComponentInfo::add_dictionary() {
  return dictionary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo >&
MasterComponentInfo::dictionary() const {
  return dictionary_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_DictionaryInfo >*
MasterComponentInfo::mutable_dictionary() {
  return &dictionary_;
}

// repeated .artm.MasterComponentInfo.ModelInfo model = 6;
inline int MasterComponentInfo::model_size() const {
  return model_.size();
}
inline void MasterComponentInfo::clear_model() {
  model_.Clear();
}
inline const ::artm::MasterComponentInfo_ModelInfo& MasterComponentInfo::model(int index) const {
  return model_.Get(index);
}
inline ::artm::MasterComponentInfo_ModelInfo* MasterComponentInfo::mutable_model(int index) {
  return model_.Mutable(index);
}
inline ::artm::MasterComponentInfo_ModelInfo* MasterComponentInfo::add_model() {
  return model_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo >&
MasterComponentInfo::model() const {
  return model_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_ModelInfo >*
MasterComponentInfo::mutable_model() {
  return &model_;
}

// repeated .artm.MasterComponentInfo.CacheEntryInfo cache_entry = 7;
inline int MasterComponentInfo::cache_entry_size() const {
  return cache_entry_.size();
}
inline void MasterComponentInfo::clear_cache_entry() {
  cache_entry_.Clear();
}
inline const ::artm::MasterComponentInfo_CacheEntryInfo& MasterComponentInfo::cache_entry(int index) const {
  return cache_entry_.Get(index);
}
inline ::artm::MasterComponentInfo_CacheEntryInfo* MasterComponentInfo::mutable_cache_entry(int index) {
  return cache_entry_.Mutable(index);
}
inline ::artm::MasterComponentInfo_CacheEntryInfo* MasterComponentInfo::add_cache_entry() {
  return cache_entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo >&
MasterComponentInfo::cache_entry() const {
  return cache_entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_CacheEntryInfo >*
MasterComponentInfo::mutable_cache_entry() {
  return &cache_entry_;
}

// optional int32 processor_queue_size = 9;
inline bool MasterComponentInfo::has_processor_queue_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MasterComponentInfo::set_has_processor_queue_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MasterComponentInfo::clear_has_processor_queue_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MasterComponentInfo::clear_processor_queue_size() {
  processor_queue_size_ = 0;
  clear_has_processor_queue_size();
}
inline ::google::protobuf::int32 MasterComponentInfo::processor_queue_size() const {
  return processor_queue_size_;
}
inline void MasterComponentInfo::set_processor_queue_size(::google::protobuf::int32 value) {
  set_has_processor_queue_size();
  processor_queue_size_ = value;
}

// repeated .artm.MasterComponentInfo.BatchInfo batch = 10;
inline int MasterComponentInfo::batch_size() const {
  return batch_.size();
}
inline void MasterComponentInfo::clear_batch() {
  batch_.Clear();
}
inline const ::artm::MasterComponentInfo_BatchInfo& MasterComponentInfo::batch(int index) const {
  return batch_.Get(index);
}
inline ::artm::MasterComponentInfo_BatchInfo* MasterComponentInfo::mutable_batch(int index) {
  return batch_.Mutable(index);
}
inline ::artm::MasterComponentInfo_BatchInfo* MasterComponentInfo::add_batch() {
  return batch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo >&
MasterComponentInfo::batch() const {
  return batch_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::MasterComponentInfo_BatchInfo >*
MasterComponentInfo::mutable_batch() {
  return &batch_;
}

// -------------------------------------------------------------------

// ImportBatchesArgs

// repeated string batch_name = 1;
inline int ImportBatchesArgs::batch_name_size() const {
  return batch_name_.size();
}
inline void ImportBatchesArgs::clear_batch_name() {
  batch_name_.Clear();
}
inline const ::std::string& ImportBatchesArgs::batch_name(int index) const {
  return batch_name_.Get(index);
}
inline ::std::string* ImportBatchesArgs::mutable_batch_name(int index) {
  return batch_name_.Mutable(index);
}
inline void ImportBatchesArgs::set_batch_name(int index, const ::std::string& value) {
  batch_name_.Mutable(index)->assign(value);
}
inline void ImportBatchesArgs::set_batch_name(int index, const char* value) {
  batch_name_.Mutable(index)->assign(value);
}
inline void ImportBatchesArgs::set_batch_name(int index, const char* value, size_t size) {
  batch_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImportBatchesArgs::add_batch_name() {
  return batch_name_.Add();
}
inline void ImportBatchesArgs::add_batch_name(const ::std::string& value) {
  batch_name_.Add()->assign(value);
}
inline void ImportBatchesArgs::add_batch_name(const char* value) {
  batch_name_.Add()->assign(value);
}
inline void ImportBatchesArgs::add_batch_name(const char* value, size_t size) {
  batch_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImportBatchesArgs::batch_name() const {
  return batch_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImportBatchesArgs::mutable_batch_name() {
  return &batch_name_;
}

// repeated .artm.Batch batch = 3;
inline int ImportBatchesArgs::batch_size() const {
  return batch_.size();
}
inline void ImportBatchesArgs::clear_batch() {
  batch_.Clear();
}
inline const ::artm::Batch& ImportBatchesArgs::batch(int index) const {
  return batch_.Get(index);
}
inline ::artm::Batch* ImportBatchesArgs::mutable_batch(int index) {
  return batch_.Mutable(index);
}
inline ::artm::Batch* ImportBatchesArgs::add_batch() {
  return batch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
ImportBatchesArgs::batch() const {
  return batch_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
ImportBatchesArgs::mutable_batch() {
  return &batch_;
}

// -------------------------------------------------------------------

// AwaitOperationArgs

// optional int32 timeout_milliseconds = 1 [default = -1];
inline bool AwaitOperationArgs::has_timeout_milliseconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AwaitOperationArgs::set_has_timeout_milliseconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AwaitOperationArgs::clear_has_timeout_milliseconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AwaitOperationArgs::clear_timeout_milliseconds() {
  timeout_milliseconds_ = -1;
  clear_has_timeout_milliseconds();
}
inline ::google::protobuf::int32 AwaitOperationArgs::timeout_milliseconds() const {
  return timeout_milliseconds_;
}
inline void AwaitOperationArgs::set_timeout_milliseconds(::google::protobuf::int32 value) {
  set_has_timeout_milliseconds();
  timeout_milliseconds_ = value;
}

// -------------------------------------------------------------------

// MasterModelConfig

// repeated string topic_name = 1;
inline int MasterModelConfig::topic_name_size() const {
  return topic_name_.size();
}
inline void MasterModelConfig::clear_topic_name() {
  topic_name_.Clear();
}
inline const ::std::string& MasterModelConfig::topic_name(int index) const {
  return topic_name_.Get(index);
}
inline ::std::string* MasterModelConfig::mutable_topic_name(int index) {
  return topic_name_.Mutable(index);
}
inline void MasterModelConfig::set_topic_name(int index, const ::std::string& value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void MasterModelConfig::set_topic_name(int index, const char* value) {
  topic_name_.Mutable(index)->assign(value);
}
inline void MasterModelConfig::set_topic_name(int index, const char* value, size_t size) {
  topic_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterModelConfig::add_topic_name() {
  return topic_name_.Add();
}
inline void MasterModelConfig::add_topic_name(const ::std::string& value) {
  topic_name_.Add()->assign(value);
}
inline void MasterModelConfig::add_topic_name(const char* value) {
  topic_name_.Add()->assign(value);
}
inline void MasterModelConfig::add_topic_name(const char* value, size_t size) {
  topic_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MasterModelConfig::topic_name() const {
  return topic_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MasterModelConfig::mutable_topic_name() {
  return &topic_name_;
}

// repeated string class_id = 2;
inline int MasterModelConfig::class_id_size() const {
  return class_id_.size();
}
inline void MasterModelConfig::clear_class_id() {
  class_id_.Clear();
}
inline const ::std::string& MasterModelConfig::class_id(int index) const {
  return class_id_.Get(index);
}
inline ::std::string* MasterModelConfig::mutable_class_id(int index) {
  return class_id_.Mutable(index);
}
inline void MasterModelConfig::set_class_id(int index, const ::std::string& value) {
  class_id_.Mutable(index)->assign(value);
}
inline void MasterModelConfig::set_class_id(int index, const char* value) {
  class_id_.Mutable(index)->assign(value);
}
inline void MasterModelConfig::set_class_id(int index, const char* value, size_t size) {
  class_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterModelConfig::add_class_id() {
  return class_id_.Add();
}
inline void MasterModelConfig::add_class_id(const ::std::string& value) {
  class_id_.Add()->assign(value);
}
inline void MasterModelConfig::add_class_id(const char* value) {
  class_id_.Add()->assign(value);
}
inline void MasterModelConfig::add_class_id(const char* value, size_t size) {
  class_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MasterModelConfig::class_id() const {
  return class_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MasterModelConfig::mutable_class_id() {
  return &class_id_;
}

// repeated float class_weight = 3;
inline int MasterModelConfig::class_weight_size() const {
  return class_weight_.size();
}
inline void MasterModelConfig::clear_class_weight() {
  class_weight_.Clear();
}
inline float MasterModelConfig::class_weight(int index) const {
  return class_weight_.Get(index);
}
inline void MasterModelConfig::set_class_weight(int index, float value) {
  class_weight_.Set(index, value);
}
inline void MasterModelConfig::add_class_weight(float value) {
  class_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
MasterModelConfig::class_weight() const {
  return class_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
MasterModelConfig::mutable_class_weight() {
  return &class_weight_;
}

// repeated .artm.ScoreConfig score_config = 4;
inline int MasterModelConfig::score_config_size() const {
  return score_config_.size();
}
inline void MasterModelConfig::clear_score_config() {
  score_config_.Clear();
}
inline const ::artm::ScoreConfig& MasterModelConfig::score_config(int index) const {
  return score_config_.Get(index);
}
inline ::artm::ScoreConfig* MasterModelConfig::mutable_score_config(int index) {
  return score_config_.Mutable(index);
}
inline ::artm::ScoreConfig* MasterModelConfig::add_score_config() {
  return score_config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig >&
MasterModelConfig::score_config() const {
  return score_config_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::ScoreConfig >*
MasterModelConfig::mutable_score_config() {
  return &score_config_;
}

// repeated .artm.RegularizerConfig regularizer_config = 5;
inline int MasterModelConfig::regularizer_config_size() const {
  return regularizer_config_.size();
}
inline void MasterModelConfig::clear_regularizer_config() {
  regularizer_config_.Clear();
}
inline const ::artm::RegularizerConfig& MasterModelConfig::regularizer_config(int index) const {
  return regularizer_config_.Get(index);
}
inline ::artm::RegularizerConfig* MasterModelConfig::mutable_regularizer_config(int index) {
  return regularizer_config_.Mutable(index);
}
inline ::artm::RegularizerConfig* MasterModelConfig::add_regularizer_config() {
  return regularizer_config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig >&
MasterModelConfig::regularizer_config() const {
  return regularizer_config_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::RegularizerConfig >*
MasterModelConfig::mutable_regularizer_config() {
  return &regularizer_config_;
}

// optional int32 threads = 6;
inline bool MasterModelConfig::has_threads() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MasterModelConfig::set_has_threads() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MasterModelConfig::clear_has_threads() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MasterModelConfig::clear_threads() {
  threads_ = 0;
  clear_has_threads();
}
inline ::google::protobuf::int32 MasterModelConfig::threads() const {
  return threads_;
}
inline void MasterModelConfig::set_threads(::google::protobuf::int32 value) {
  set_has_threads();
  threads_ = value;
}

// optional string pwt_name = 7 [default = "pwt"];
inline bool MasterModelConfig::has_pwt_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MasterModelConfig::set_has_pwt_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MasterModelConfig::clear_has_pwt_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MasterModelConfig::clear_pwt_name() {
  if (pwt_name_ != _default_pwt_name_) {
    pwt_name_->assign(*_default_pwt_name_);
  }
  clear_has_pwt_name();
}
inline const ::std::string& MasterModelConfig::pwt_name() const {
  return *pwt_name_;
}
inline void MasterModelConfig::set_pwt_name(const ::std::string& value) {
  set_has_pwt_name();
  if (pwt_name_ == _default_pwt_name_) {
    pwt_name_ = new ::std::string;
  }
  pwt_name_->assign(value);
}
inline void MasterModelConfig::set_pwt_name(const char* value) {
  set_has_pwt_name();
  if (pwt_name_ == _default_pwt_name_) {
    pwt_name_ = new ::std::string;
  }
  pwt_name_->assign(value);
}
inline void MasterModelConfig::set_pwt_name(const char* value, size_t size) {
  set_has_pwt_name();
  if (pwt_name_ == _default_pwt_name_) {
    pwt_name_ = new ::std::string;
  }
  pwt_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterModelConfig::mutable_pwt_name() {
  set_has_pwt_name();
  if (pwt_name_ == _default_pwt_name_) {
    pwt_name_ = new ::std::string(*_default_pwt_name_);
  }
  return pwt_name_;
}
inline ::std::string* MasterModelConfig::release_pwt_name() {
  clear_has_pwt_name();
  if (pwt_name_ == _default_pwt_name_) {
    return NULL;
  } else {
    ::std::string* temp = pwt_name_;
    pwt_name_ = const_cast< ::std::string*>(_default_pwt_name_);
    return temp;
  }
}
inline void MasterModelConfig::set_allocated_pwt_name(::std::string* pwt_name) {
  if (pwt_name_ != _default_pwt_name_) {
    delete pwt_name_;
  }
  if (pwt_name) {
    set_has_pwt_name();
    pwt_name_ = pwt_name;
  } else {
    clear_has_pwt_name();
    pwt_name_ = const_cast< ::std::string*>(_default_pwt_name_);
  }
}

// optional string nwt_name = 8 [default = "nwt"];
inline bool MasterModelConfig::has_nwt_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MasterModelConfig::set_has_nwt_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MasterModelConfig::clear_has_nwt_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MasterModelConfig::clear_nwt_name() {
  if (nwt_name_ != _default_nwt_name_) {
    nwt_name_->assign(*_default_nwt_name_);
  }
  clear_has_nwt_name();
}
inline const ::std::string& MasterModelConfig::nwt_name() const {
  return *nwt_name_;
}
inline void MasterModelConfig::set_nwt_name(const ::std::string& value) {
  set_has_nwt_name();
  if (nwt_name_ == _default_nwt_name_) {
    nwt_name_ = new ::std::string;
  }
  nwt_name_->assign(value);
}
inline void MasterModelConfig::set_nwt_name(const char* value) {
  set_has_nwt_name();
  if (nwt_name_ == _default_nwt_name_) {
    nwt_name_ = new ::std::string;
  }
  nwt_name_->assign(value);
}
inline void MasterModelConfig::set_nwt_name(const char* value, size_t size) {
  set_has_nwt_name();
  if (nwt_name_ == _default_nwt_name_) {
    nwt_name_ = new ::std::string;
  }
  nwt_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterModelConfig::mutable_nwt_name() {
  set_has_nwt_name();
  if (nwt_name_ == _default_nwt_name_) {
    nwt_name_ = new ::std::string(*_default_nwt_name_);
  }
  return nwt_name_;
}
inline ::std::string* MasterModelConfig::release_nwt_name() {
  clear_has_nwt_name();
  if (nwt_name_ == _default_nwt_name_) {
    return NULL;
  } else {
    ::std::string* temp = nwt_name_;
    nwt_name_ = const_cast< ::std::string*>(_default_nwt_name_);
    return temp;
  }
}
inline void MasterModelConfig::set_allocated_nwt_name(::std::string* nwt_name) {
  if (nwt_name_ != _default_nwt_name_) {
    delete nwt_name_;
  }
  if (nwt_name) {
    set_has_nwt_name();
    nwt_name_ = nwt_name;
  } else {
    clear_has_nwt_name();
    nwt_name_ = const_cast< ::std::string*>(_default_nwt_name_);
  }
}

// optional int32 inner_iterations_count = 9;
inline bool MasterModelConfig::has_inner_iterations_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MasterModelConfig::set_has_inner_iterations_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MasterModelConfig::clear_has_inner_iterations_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MasterModelConfig::clear_inner_iterations_count() {
  inner_iterations_count_ = 0;
  clear_has_inner_iterations_count();
}
inline ::google::protobuf::int32 MasterModelConfig::inner_iterations_count() const {
  return inner_iterations_count_;
}
inline void MasterModelConfig::set_inner_iterations_count(::google::protobuf::int32 value) {
  set_has_inner_iterations_count();
  inner_iterations_count_ = value;
}

// optional bool reuse_theta = 10 [default = false];
inline bool MasterModelConfig::has_reuse_theta() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MasterModelConfig::set_has_reuse_theta() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MasterModelConfig::clear_has_reuse_theta() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MasterModelConfig::clear_reuse_theta() {
  reuse_theta_ = false;
  clear_has_reuse_theta();
}
inline bool MasterModelConfig::reuse_theta() const {
  return reuse_theta_;
}
inline void MasterModelConfig::set_reuse_theta(bool value) {
  set_has_reuse_theta();
  reuse_theta_ = value;
}

// optional bool opt_for_avx = 11 [default = true];
inline bool MasterModelConfig::has_opt_for_avx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MasterModelConfig::set_has_opt_for_avx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MasterModelConfig::clear_has_opt_for_avx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MasterModelConfig::clear_opt_for_avx() {
  opt_for_avx_ = true;
  clear_has_opt_for_avx();
}
inline bool MasterModelConfig::opt_for_avx() const {
  return opt_for_avx_;
}
inline void MasterModelConfig::set_opt_for_avx(bool value) {
  set_has_opt_for_avx();
  opt_for_avx_ = value;
}

// optional string disk_cache_path = 13;
inline bool MasterModelConfig::has_disk_cache_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MasterModelConfig::set_has_disk_cache_path() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MasterModelConfig::clear_has_disk_cache_path() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MasterModelConfig::clear_disk_cache_path() {
  if (disk_cache_path_ != &::google::protobuf::internal::GetEmptyString()) {
    disk_cache_path_->clear();
  }
  clear_has_disk_cache_path();
}
inline const ::std::string& MasterModelConfig::disk_cache_path() const {
  return *disk_cache_path_;
}
inline void MasterModelConfig::set_disk_cache_path(const ::std::string& value) {
  set_has_disk_cache_path();
  if (disk_cache_path_ == &::google::protobuf::internal::GetEmptyString()) {
    disk_cache_path_ = new ::std::string;
  }
  disk_cache_path_->assign(value);
}
inline void MasterModelConfig::set_disk_cache_path(const char* value) {
  set_has_disk_cache_path();
  if (disk_cache_path_ == &::google::protobuf::internal::GetEmptyString()) {
    disk_cache_path_ = new ::std::string;
  }
  disk_cache_path_->assign(value);
}
inline void MasterModelConfig::set_disk_cache_path(const char* value, size_t size) {
  set_has_disk_cache_path();
  if (disk_cache_path_ == &::google::protobuf::internal::GetEmptyString()) {
    disk_cache_path_ = new ::std::string;
  }
  disk_cache_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MasterModelConfig::mutable_disk_cache_path() {
  set_has_disk_cache_path();
  if (disk_cache_path_ == &::google::protobuf::internal::GetEmptyString()) {
    disk_cache_path_ = new ::std::string;
  }
  return disk_cache_path_;
}
inline ::std::string* MasterModelConfig::release_disk_cache_path() {
  clear_has_disk_cache_path();
  if (disk_cache_path_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = disk_cache_path_;
    disk_cache_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void MasterModelConfig::set_allocated_disk_cache_path(::std::string* disk_cache_path) {
  if (disk_cache_path_ != &::google::protobuf::internal::GetEmptyString()) {
    delete disk_cache_path_;
  }
  if (disk_cache_path) {
    set_has_disk_cache_path();
    disk_cache_path_ = disk_cache_path;
  } else {
    clear_has_disk_cache_path();
    disk_cache_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional bool cache_theta = 15 [default = false];
inline bool MasterModelConfig::has_cache_theta() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MasterModelConfig::set_has_cache_theta() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MasterModelConfig::clear_has_cache_theta() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MasterModelConfig::clear_cache_theta() {
  cache_theta_ = false;
  clear_has_cache_theta();
}
inline bool MasterModelConfig::cache_theta() const {
  return cache_theta_;
}
inline void MasterModelConfig::set_cache_theta(bool value) {
  set_has_cache_theta();
  cache_theta_ = value;
}

// -------------------------------------------------------------------

// FitOfflineMasterModelArgs

// repeated string batch_filename = 1;
inline int FitOfflineMasterModelArgs::batch_filename_size() const {
  return batch_filename_.size();
}
inline void FitOfflineMasterModelArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
inline const ::std::string& FitOfflineMasterModelArgs::batch_filename(int index) const {
  return batch_filename_.Get(index);
}
inline ::std::string* FitOfflineMasterModelArgs::mutable_batch_filename(int index) {
  return batch_filename_.Mutable(index);
}
inline void FitOfflineMasterModelArgs::set_batch_filename(int index, const ::std::string& value) {
  batch_filename_.Mutable(index)->assign(value);
}
inline void FitOfflineMasterModelArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
}
inline void FitOfflineMasterModelArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FitOfflineMasterModelArgs::add_batch_filename() {
  return batch_filename_.Add();
}
inline void FitOfflineMasterModelArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
}
inline void FitOfflineMasterModelArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
}
inline void FitOfflineMasterModelArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FitOfflineMasterModelArgs::batch_filename() const {
  return batch_filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FitOfflineMasterModelArgs::mutable_batch_filename() {
  return &batch_filename_;
}

// repeated float batch_weight = 2;
inline int FitOfflineMasterModelArgs::batch_weight_size() const {
  return batch_weight_.size();
}
inline void FitOfflineMasterModelArgs::clear_batch_weight() {
  batch_weight_.Clear();
}
inline float FitOfflineMasterModelArgs::batch_weight(int index) const {
  return batch_weight_.Get(index);
}
inline void FitOfflineMasterModelArgs::set_batch_weight(int index, float value) {
  batch_weight_.Set(index, value);
}
inline void FitOfflineMasterModelArgs::add_batch_weight(float value) {
  batch_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
FitOfflineMasterModelArgs::batch_weight() const {
  return batch_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
FitOfflineMasterModelArgs::mutable_batch_weight() {
  return &batch_weight_;
}

// optional int32 passes = 3 [default = 1];
inline bool FitOfflineMasterModelArgs::has_passes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FitOfflineMasterModelArgs::set_has_passes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FitOfflineMasterModelArgs::clear_has_passes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FitOfflineMasterModelArgs::clear_passes() {
  passes_ = 1;
  clear_has_passes();
}
inline ::google::protobuf::int32 FitOfflineMasterModelArgs::passes() const {
  return passes_;
}
inline void FitOfflineMasterModelArgs::set_passes(::google::protobuf::int32 value) {
  set_has_passes();
  passes_ = value;
}

// optional string batch_folder = 4;
inline bool FitOfflineMasterModelArgs::has_batch_folder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FitOfflineMasterModelArgs::set_has_batch_folder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FitOfflineMasterModelArgs::clear_has_batch_folder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FitOfflineMasterModelArgs::clear_batch_folder() {
  if (batch_folder_ != &::google::protobuf::internal::GetEmptyString()) {
    batch_folder_->clear();
  }
  clear_has_batch_folder();
}
inline const ::std::string& FitOfflineMasterModelArgs::batch_folder() const {
  return *batch_folder_;
}
inline void FitOfflineMasterModelArgs::set_batch_folder(const ::std::string& value) {
  set_has_batch_folder();
  if (batch_folder_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_folder_ = new ::std::string;
  }
  batch_folder_->assign(value);
}
inline void FitOfflineMasterModelArgs::set_batch_folder(const char* value) {
  set_has_batch_folder();
  if (batch_folder_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_folder_ = new ::std::string;
  }
  batch_folder_->assign(value);
}
inline void FitOfflineMasterModelArgs::set_batch_folder(const char* value, size_t size) {
  set_has_batch_folder();
  if (batch_folder_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_folder_ = new ::std::string;
  }
  batch_folder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FitOfflineMasterModelArgs::mutable_batch_folder() {
  set_has_batch_folder();
  if (batch_folder_ == &::google::protobuf::internal::GetEmptyString()) {
    batch_folder_ = new ::std::string;
  }
  return batch_folder_;
}
inline ::std::string* FitOfflineMasterModelArgs::release_batch_folder() {
  clear_has_batch_folder();
  if (batch_folder_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = batch_folder_;
    batch_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void FitOfflineMasterModelArgs::set_allocated_batch_folder(::std::string* batch_folder) {
  if (batch_folder_ != &::google::protobuf::internal::GetEmptyString()) {
    delete batch_folder_;
  }
  if (batch_folder) {
    set_has_batch_folder();
    batch_folder_ = batch_folder;
  } else {
    clear_has_batch_folder();
    batch_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// FitOnlineMasterModelArgs

// repeated string batch_filename = 1;
inline int FitOnlineMasterModelArgs::batch_filename_size() const {
  return batch_filename_.size();
}
inline void FitOnlineMasterModelArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
inline const ::std::string& FitOnlineMasterModelArgs::batch_filename(int index) const {
  return batch_filename_.Get(index);
}
inline ::std::string* FitOnlineMasterModelArgs::mutable_batch_filename(int index) {
  return batch_filename_.Mutable(index);
}
inline void FitOnlineMasterModelArgs::set_batch_filename(int index, const ::std::string& value) {
  batch_filename_.Mutable(index)->assign(value);
}
inline void FitOnlineMasterModelArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
}
inline void FitOnlineMasterModelArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FitOnlineMasterModelArgs::add_batch_filename() {
  return batch_filename_.Add();
}
inline void FitOnlineMasterModelArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
}
inline void FitOnlineMasterModelArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
}
inline void FitOnlineMasterModelArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FitOnlineMasterModelArgs::batch_filename() const {
  return batch_filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FitOnlineMasterModelArgs::mutable_batch_filename() {
  return &batch_filename_;
}

// repeated float batch_weight = 2;
inline int FitOnlineMasterModelArgs::batch_weight_size() const {
  return batch_weight_.size();
}
inline void FitOnlineMasterModelArgs::clear_batch_weight() {
  batch_weight_.Clear();
}
inline float FitOnlineMasterModelArgs::batch_weight(int index) const {
  return batch_weight_.Get(index);
}
inline void FitOnlineMasterModelArgs::set_batch_weight(int index, float value) {
  batch_weight_.Set(index, value);
}
inline void FitOnlineMasterModelArgs::add_batch_weight(float value) {
  batch_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
FitOnlineMasterModelArgs::batch_weight() const {
  return batch_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
FitOnlineMasterModelArgs::mutable_batch_weight() {
  return &batch_weight_;
}

// repeated int32 update_after = 3;
inline int FitOnlineMasterModelArgs::update_after_size() const {
  return update_after_.size();
}
inline void FitOnlineMasterModelArgs::clear_update_after() {
  update_after_.Clear();
}
inline ::google::protobuf::int32 FitOnlineMasterModelArgs::update_after(int index) const {
  return update_after_.Get(index);
}
inline void FitOnlineMasterModelArgs::set_update_after(int index, ::google::protobuf::int32 value) {
  update_after_.Set(index, value);
}
inline void FitOnlineMasterModelArgs::add_update_after(::google::protobuf::int32 value) {
  update_after_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FitOnlineMasterModelArgs::update_after() const {
  return update_after_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FitOnlineMasterModelArgs::mutable_update_after() {
  return &update_after_;
}

// repeated float apply_weight = 4;
inline int FitOnlineMasterModelArgs::apply_weight_size() const {
  return apply_weight_.size();
}
inline void FitOnlineMasterModelArgs::clear_apply_weight() {
  apply_weight_.Clear();
}
inline float FitOnlineMasterModelArgs::apply_weight(int index) const {
  return apply_weight_.Get(index);
}
inline void FitOnlineMasterModelArgs::set_apply_weight(int index, float value) {
  apply_weight_.Set(index, value);
}
inline void FitOnlineMasterModelArgs::add_apply_weight(float value) {
  apply_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
FitOnlineMasterModelArgs::apply_weight() const {
  return apply_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
FitOnlineMasterModelArgs::mutable_apply_weight() {
  return &apply_weight_;
}

// repeated float decay_weight = 5;
inline int FitOnlineMasterModelArgs::decay_weight_size() const {
  return decay_weight_.size();
}
inline void FitOnlineMasterModelArgs::clear_decay_weight() {
  decay_weight_.Clear();
}
inline float FitOnlineMasterModelArgs::decay_weight(int index) const {
  return decay_weight_.Get(index);
}
inline void FitOnlineMasterModelArgs::set_decay_weight(int index, float value) {
  decay_weight_.Set(index, value);
}
inline void FitOnlineMasterModelArgs::add_decay_weight(float value) {
  decay_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
FitOnlineMasterModelArgs::decay_weight() const {
  return decay_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
FitOnlineMasterModelArgs::mutable_decay_weight() {
  return &decay_weight_;
}

// optional bool async = 6 [default = false];
inline bool FitOnlineMasterModelArgs::has_async() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FitOnlineMasterModelArgs::set_has_async() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FitOnlineMasterModelArgs::clear_has_async() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FitOnlineMasterModelArgs::clear_async() {
  async_ = false;
  clear_has_async();
}
inline bool FitOnlineMasterModelArgs::async() const {
  return async_;
}
inline void FitOnlineMasterModelArgs::set_async(bool value) {
  set_has_async();
  async_ = value;
}

// -------------------------------------------------------------------

// TransformMasterModelArgs

// repeated .artm.Batch batch = 1;
inline int TransformMasterModelArgs::batch_size() const {
  return batch_.size();
}
inline void TransformMasterModelArgs::clear_batch() {
  batch_.Clear();
}
inline const ::artm::Batch& TransformMasterModelArgs::batch(int index) const {
  return batch_.Get(index);
}
inline ::artm::Batch* TransformMasterModelArgs::mutable_batch(int index) {
  return batch_.Mutable(index);
}
inline ::artm::Batch* TransformMasterModelArgs::add_batch() {
  return batch_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::artm::Batch >&
TransformMasterModelArgs::batch() const {
  return batch_;
}
inline ::google::protobuf::RepeatedPtrField< ::artm::Batch >*
TransformMasterModelArgs::mutable_batch() {
  return &batch_;
}

// repeated string batch_filename = 2;
inline int TransformMasterModelArgs::batch_filename_size() const {
  return batch_filename_.size();
}
inline void TransformMasterModelArgs::clear_batch_filename() {
  batch_filename_.Clear();
}
inline const ::std::string& TransformMasterModelArgs::batch_filename(int index) const {
  return batch_filename_.Get(index);
}
inline ::std::string* TransformMasterModelArgs::mutable_batch_filename(int index) {
  return batch_filename_.Mutable(index);
}
inline void TransformMasterModelArgs::set_batch_filename(int index, const ::std::string& value) {
  batch_filename_.Mutable(index)->assign(value);
}
inline void TransformMasterModelArgs::set_batch_filename(int index, const char* value) {
  batch_filename_.Mutable(index)->assign(value);
}
inline void TransformMasterModelArgs::set_batch_filename(int index, const char* value, size_t size) {
  batch_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransformMasterModelArgs::add_batch_filename() {
  return batch_filename_.Add();
}
inline void TransformMasterModelArgs::add_batch_filename(const ::std::string& value) {
  batch_filename_.Add()->assign(value);
}
inline void TransformMasterModelArgs::add_batch_filename(const char* value) {
  batch_filename_.Add()->assign(value);
}
inline void TransformMasterModelArgs::add_batch_filename(const char* value, size_t size) {
  batch_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransformMasterModelArgs::batch_filename() const {
  return batch_filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TransformMasterModelArgs::mutable_batch_filename() {
  return &batch_filename_;
}

// optional .artm.TransformMasterModelArgs.ThetaMatrixType theta_matrix_type = 3 [default = Dense];
inline bool TransformMasterModelArgs::has_theta_matrix_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformMasterModelArgs::set_has_theta_matrix_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformMasterModelArgs::clear_has_theta_matrix_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformMasterModelArgs::clear_theta_matrix_type() {
  theta_matrix_type_ = 1;
  clear_has_theta_matrix_type();
}
inline ::artm::TransformMasterModelArgs_ThetaMatrixType TransformMasterModelArgs::theta_matrix_type() const {
  return static_cast< ::artm::TransformMasterModelArgs_ThetaMatrixType >(theta_matrix_type_);
}
inline void TransformMasterModelArgs::set_theta_matrix_type(::artm::TransformMasterModelArgs_ThetaMatrixType value) {
  assert(::artm::TransformMasterModelArgs_ThetaMatrixType_IsValid(value));
  set_has_theta_matrix_type();
  theta_matrix_type_ = value;
}

// optional string predict_class_id = 4;
inline bool TransformMasterModelArgs::has_predict_class_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformMasterModelArgs::set_has_predict_class_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformMasterModelArgs::clear_has_predict_class_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformMasterModelArgs::clear_predict_class_id() {
  if (predict_class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    predict_class_id_->clear();
  }
  clear_has_predict_class_id();
}
inline const ::std::string& TransformMasterModelArgs::predict_class_id() const {
  return *predict_class_id_;
}
inline void TransformMasterModelArgs::set_predict_class_id(const ::std::string& value) {
  set_has_predict_class_id();
  if (predict_class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    predict_class_id_ = new ::std::string;
  }
  predict_class_id_->assign(value);
}
inline void TransformMasterModelArgs::set_predict_class_id(const char* value) {
  set_has_predict_class_id();
  if (predict_class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    predict_class_id_ = new ::std::string;
  }
  predict_class_id_->assign(value);
}
inline void TransformMasterModelArgs::set_predict_class_id(const char* value, size_t size) {
  set_has_predict_class_id();
  if (predict_class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    predict_class_id_ = new ::std::string;
  }
  predict_class_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransformMasterModelArgs::mutable_predict_class_id() {
  set_has_predict_class_id();
  if (predict_class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    predict_class_id_ = new ::std::string;
  }
  return predict_class_id_;
}
inline ::std::string* TransformMasterModelArgs::release_predict_class_id() {
  clear_has_predict_class_id();
  if (predict_class_id_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = predict_class_id_;
    predict_class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void TransformMasterModelArgs::set_allocated_predict_class_id(::std::string* predict_class_id) {
  if (predict_class_id_ != &::google::protobuf::internal::GetEmptyString()) {
    delete predict_class_id_;
  }
  if (predict_class_id) {
    set_has_predict_class_id();
    predict_class_id_ = predict_class_id;
  } else {
    clear_has_predict_class_id();
    predict_class_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// -------------------------------------------------------------------

// ConfigureLoggingArgs

// optional string log_dir = 1;
inline bool ConfigureLoggingArgs::has_log_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigureLoggingArgs::set_has_log_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigureLoggingArgs::clear_has_log_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigureLoggingArgs::clear_log_dir() {
  if (log_dir_ != &::google::protobuf::internal::GetEmptyString()) {
    log_dir_->clear();
  }
  clear_has_log_dir();
}
inline const ::std::string& ConfigureLoggingArgs::log_dir() const {
  return *log_dir_;
}
inline void ConfigureLoggingArgs::set_log_dir(const ::std::string& value) {
  set_has_log_dir();
  if (log_dir_ == &::google::protobuf::internal::GetEmptyString()) {
    log_dir_ = new ::std::string;
  }
  log_dir_->assign(value);
}
inline void ConfigureLoggingArgs::set_log_dir(const char* value) {
  set_has_log_dir();
  if (log_dir_ == &::google::protobuf::internal::GetEmptyString()) {
    log_dir_ = new ::std::string;
  }
  log_dir_->assign(value);
}
inline void ConfigureLoggingArgs::set_log_dir(const char* value, size_t size) {
  set_has_log_dir();
  if (log_dir_ == &::google::protobuf::internal::GetEmptyString()) {
    log_dir_ = new ::std::string;
  }
  log_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfigureLoggingArgs::mutable_log_dir() {
  set_has_log_dir();
  if (log_dir_ == &::google::protobuf::internal::GetEmptyString()) {
    log_dir_ = new ::std::string;
  }
  return log_dir_;
}
inline ::std::string* ConfigureLoggingArgs::release_log_dir() {
  clear_has_log_dir();
  if (log_dir_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = log_dir_;
    log_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void ConfigureLoggingArgs::set_allocated_log_dir(::std::string* log_dir) {
  if (log_dir_ != &::google::protobuf::internal::GetEmptyString()) {
    delete log_dir_;
  }
  if (log_dir) {
    set_has_log_dir();
    log_dir_ = log_dir;
  } else {
    clear_has_log_dir();
    log_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 minloglevel = 2;
inline bool ConfigureLoggingArgs::has_minloglevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigureLoggingArgs::set_has_minloglevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigureLoggingArgs::clear_has_minloglevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigureLoggingArgs::clear_minloglevel() {
  minloglevel_ = 0;
  clear_has_minloglevel();
}
inline ::google::protobuf::int32 ConfigureLoggingArgs::minloglevel() const {
  return minloglevel_;
}
inline void ConfigureLoggingArgs::set_minloglevel(::google::protobuf::int32 value) {
  set_has_minloglevel();
  minloglevel_ = value;
}

// optional int32 stderrthreshold = 3;
inline bool ConfigureLoggingArgs::has_stderrthreshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigureLoggingArgs::set_has_stderrthreshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigureLoggingArgs::clear_has_stderrthreshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigureLoggingArgs::clear_stderrthreshold() {
  stderrthreshold_ = 0;
  clear_has_stderrthreshold();
}
inline ::google::protobuf::int32 ConfigureLoggingArgs::stderrthreshold() const {
  return stderrthreshold_;
}
inline void ConfigureLoggingArgs::set_stderrthreshold(::google::protobuf::int32 value) {
  set_has_stderrthreshold();
  stderrthreshold_ = value;
}

// optional bool logtostderr = 4;
inline bool ConfigureLoggingArgs::has_logtostderr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigureLoggingArgs::set_has_logtostderr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigureLoggingArgs::clear_has_logtostderr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigureLoggingArgs::clear_logtostderr() {
  logtostderr_ = false;
  clear_has_logtostderr();
}
inline bool ConfigureLoggingArgs::logtostderr() const {
  return logtostderr_;
}
inline void ConfigureLoggingArgs::set_logtostderr(bool value) {
  set_has_logtostderr();
  logtostderr_ = value;
}

// optional bool colorlogtostderr = 5;
inline bool ConfigureLoggingArgs::has_colorlogtostderr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigureLoggingArgs::set_has_colorlogtostderr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigureLoggingArgs::clear_has_colorlogtostderr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigureLoggingArgs::clear_colorlogtostderr() {
  colorlogtostderr_ = false;
  clear_has_colorlogtostderr();
}
inline bool ConfigureLoggingArgs::colorlogtostderr() const {
  return colorlogtostderr_;
}
inline void ConfigureLoggingArgs::set_colorlogtostderr(bool value) {
  set_has_colorlogtostderr();
  colorlogtostderr_ = value;
}

// optional bool alsologtostderr = 6;
inline bool ConfigureLoggingArgs::has_alsologtostderr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigureLoggingArgs::set_has_alsologtostderr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigureLoggingArgs::clear_has_alsologtostderr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigureLoggingArgs::clear_alsologtostderr() {
  alsologtostderr_ = false;
  clear_has_alsologtostderr();
}
inline bool ConfigureLoggingArgs::alsologtostderr() const {
  return alsologtostderr_;
}
inline void ConfigureLoggingArgs::set_alsologtostderr(bool value) {
  set_has_alsologtostderr();
  alsologtostderr_ = value;
}

// optional int32 logbufsecs = 7;
inline bool ConfigureLoggingArgs::has_logbufsecs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigureLoggingArgs::set_has_logbufsecs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigureLoggingArgs::clear_has_logbufsecs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigureLoggingArgs::clear_logbufsecs() {
  logbufsecs_ = 0;
  clear_has_logbufsecs();
}
inline ::google::protobuf::int32 ConfigureLoggingArgs::logbufsecs() const {
  return logbufsecs_;
}
inline void ConfigureLoggingArgs::set_logbufsecs(::google::protobuf::int32 value) {
  set_has_logbufsecs();
  logbufsecs_ = value;
}

// optional int32 logbuflevel = 8;
inline bool ConfigureLoggingArgs::has_logbuflevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigureLoggingArgs::set_has_logbuflevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigureLoggingArgs::clear_has_logbuflevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigureLoggingArgs::clear_logbuflevel() {
  logbuflevel_ = 0;
  clear_has_logbuflevel();
}
inline ::google::protobuf::int32 ConfigureLoggingArgs::logbuflevel() const {
  return logbuflevel_;
}
inline void ConfigureLoggingArgs::set_logbuflevel(::google::protobuf::int32 value) {
  set_has_logbuflevel();
  logbuflevel_ = value;
}

// optional int32 max_log_size = 9;
inline bool ConfigureLoggingArgs::has_max_log_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigureLoggingArgs::set_has_max_log_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigureLoggingArgs::clear_has_max_log_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigureLoggingArgs::clear_max_log_size() {
  max_log_size_ = 0;
  clear_has_max_log_size();
}
inline ::google::protobuf::int32 ConfigureLoggingArgs::max_log_size() const {
  return max_log_size_;
}
inline void ConfigureLoggingArgs::set_max_log_size(::google::protobuf::int32 value) {
  set_has_max_log_size();
  max_log_size_ = value;
}

// optional bool stop_logging_if_full_disk = 10;
inline bool ConfigureLoggingArgs::has_stop_logging_if_full_disk() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigureLoggingArgs::set_has_stop_logging_if_full_disk() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigureLoggingArgs::clear_has_stop_logging_if_full_disk() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigureLoggingArgs::clear_stop_logging_if_full_disk() {
  stop_logging_if_full_disk_ = false;
  clear_has_stop_logging_if_full_disk();
}
inline bool ConfigureLoggingArgs::stop_logging_if_full_disk() const {
  return stop_logging_if_full_disk_;
}
inline void ConfigureLoggingArgs::set_stop_logging_if_full_disk(bool value) {
  set_has_stop_logging_if_full_disk();
  stop_logging_if_full_disk_ = value;
}

// -------------------------------------------------------------------

// ClearThetaCacheArgs

// -------------------------------------------------------------------

// ClearScoreCacheArgs

// -------------------------------------------------------------------

// ClearScoreArrayCacheArgs


// @@protoc_insertion_point(namespace_scope)

}  // namespace artm

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::RegularizerConfig_Type>() {
  return ::artm::RegularizerConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::SpecifiedSparsePhiConfig_Mode>() {
  return ::artm::SpecifiedSparsePhiConfig_Mode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::SmoothPtdwConfig_Type>() {
  return ::artm::SmoothPtdwConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::TransformConfig_TransformType>() {
  return ::artm::TransformConfig_TransformType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::ScoreConfig_Type>() {
  return ::artm::ScoreConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::ScoreData_Type>() {
  return ::artm::ScoreData_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::PerplexityScoreConfig_Type>() {
  return ::artm::PerplexityScoreConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::TopicModel_OperationType>() {
  return ::artm::TopicModel_OperationType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::CollectionParserConfig_Format>() {
  return ::artm::CollectionParserConfig_Format_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::CollectionParserConfig_NameType>() {
  return ::artm::CollectionParserConfig_NameType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::InitializeModelArgs_SourceType>() {
  return ::artm::InitializeModelArgs_SourceType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::GetTopicModelArgs_RequestType>() {
  return ::artm::GetTopicModelArgs_RequestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::GetTopicModelArgs_MatrixLayout>() {
  return ::artm::GetTopicModelArgs_MatrixLayout_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::GetThetaMatrixArgs_MatrixLayout>() {
  return ::artm::GetThetaMatrixArgs_MatrixLayout_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::ProcessBatchesArgs_ThetaMatrixType>() {
  return ::artm::ProcessBatchesArgs_ThetaMatrixType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::CopyRequestResultArgs_RequestType>() {
  return ::artm::CopyRequestResultArgs_RequestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::artm::TransformMasterModelArgs_ThetaMatrixType>() {
  return ::artm::TransformMasterModelArgs_ThetaMatrixType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_artm_2fmessages_2eproto__INCLUDED
