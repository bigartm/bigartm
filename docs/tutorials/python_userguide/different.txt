Different Useful Techniques
=======

* **Dictionary filtering**:

In this section we'll discuss dictionary's self-filtering ability. Let's remember the structure of the dictionary, saved in textual format (see :doc:`m_artm`). There are many lines, one per each unique token, and each line contains 5 values: token (string), its class_id (string), its value (double) and two more integer parameters, called token_tf and token_df. token_tf is an absolute frequency of the token in the whole collection, and token_df is the number of documents in the collection, where the token had appeared at least once. These values are generating during gathering dictionary by the library. They differ from the value in the fact, that you can't use them in the regularizers and scores, so you shouldn't change them.

They need for filtering of the dictionary. You likely needn't to use very seldom or too frequent tokens in your model. Or you simply want to reduce your dictionary to hold your model in the memory. In both cases the solution is to use the ``Dictionary.filter()`` method. See its parameters in :doc:`../../api_references/python_interface`. Now let's filter the modality of usual tokens:

.. code-block:: python

   dictionary.filter(min_tf=10, max_tf=2000, min_df_rate=0.01)

.. note::
   If the parameter has \_rate suffix, it denotes relative value (e.g. from 0 to 1), otherwise - absolute value.

This call has one feature, it rewrites the old dictionary with new one. So if you don't want to lose your full dictionary, you need firstly to save it to disk, and then filter the copy located in the memory.

* **Saving/loading model**:

Now let's study saving the model to disk.

It's important to understand that the model contains two matrices: :math:`\Phi` (or :math:`p_{wt}`) and :math:`n_{wt}`. To make model be loadable without loses you need to save both these matrices. The current library version can save only one matrix per method call, so you will need two calls:

.. code-block:: python

   model.save(filename='saved_p_wt', model_name='p_wt')
   model.save(filename='saved_n_wt', model_name='n_wt')

The model will be saved in binary format. To use it later you need to load it's matrices back:

.. code-block:: python

   model.load(filename='saved_p_wt', model_name='p_wt')
   model.load(filename='saved_n_wt', model_name='n_wt')

.. note::

   The model after loading will only contain :math:`\Phi` and :math:`n_{wt}` matrices and some associated information (like number of topics, their names, the names of the modalities (without weights!) and some other data). So you need to restore all necessary scores, regularizers, modality weights and all important parameters, like ``cache_theta``.

You can use ``save/load`` methods pair in case of long fitting, when restoring parameters is much more easier than model re-fitting.
