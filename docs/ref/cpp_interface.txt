=============
C++ interface
=============

This document explains C++ interface of BigARTM library.

In addition to this page consider to look at :doc:`c_interface`, 
:doc:`python_interface` or :doc:`messages`.
These documentation files are also to certain degree relevant for C++ interface,
because C++ interface is quite similar to Python interface and share the same Protobuf messages.

.. cpp:namespace:: artm

MasterComponent
===============

.. cpp:class:: MasterComponent

  .. cpp:function:: MasterComponent(const MasterComponentConfig& config)

     Creates a master component with configuration defined by :ref:`MasterComponentConfig` message.

  .. cpp:function:: MasterComponent(const MasterProxyConfig& config)

     Creates a proxy to remote master component with configuration defined by :ref:`MasterProxyConfig` message.

  .. cpp:function:: void Reconfigure(const MasterComponentConfig& config)

     Updates the configuration of the master component.

  .. cpp:function:: const MasterComponentConfig& config() const

     Returns current configuration of the master component.

  .. cpp:function:: MasterComponentConfig* mutable_config()

     Returns mutable configuration of the master component.
     Remember to call :cpp:func:`Reconfigure` to propagate your changes to master component.

  .. cpp:function:: void InvokeIteration(int iterations_count)

     Invokes certain number of iterations.

  .. cpp:function:: bool WaitIdle(int timeout = -1)

     Waits for iterations to be completed.
     Returns true if BigARTM completed before the specific timeout, otherwise false.

  .. cpp:function:: std::shared_ptr<TopicModel> GetTopicModel(const std::string& model_name)

     Retrieves Phi matrix of a specific topic model.
     The resulting message :ref:`TopicModel` will contain information about token weights distribution across topics.

  .. cpp:function:: std::shared_ptr<TopicModel> GetTopicModel(const GetTopicModelArgs& args)

     Retrieves Phi matrix based on extended parameters, specified in :ref:`GetTopicModelArgs` message.
     The resulting message :ref:`TopicModel` will contain information about token weights distribution across topics.

  .. cpp:function:: std::shared_ptr<ThetaMatrix> GetThetaMatrix(const std::string& model_name)

     Retrieves Theta matrix of a specific topic model.
     The resulting message :ref:`ThetaMatrix` will contain information about items distribution across topics.
     Remember to set :attr:`MasterComponentConfig.cache_theta` prior to the last iteration in order to gather Theta matrix.

  .. cpp:function:: std::shared_ptr<ThetaMatrix> GetThetaMatrix(const GetThetaMatrixArgs& args)

     Retrieves Theta matrix based on extended parameters, specified in :ref:`GetThetaMatrixArgs` message.
     The resulting message :ref:`ThetaMatrix` will contain information about items distribution across topics.

  .. cpp:function:: std::shared_ptr<T> GetScoreAs<T>(const Model& model, const std::string& score_name)

     Retrieves given score for a specific model. Template argument must match the specific :ref:`ScoreData`
     type of the score (for example, :ref:`PerplexityScore`).


NodeController
==============

.. cpp:class:: NodeController

  .. cpp:function:: NodeController(const NodeControllerConfig& config)

     Creates a node controller with configuration defined by :ref:`NodeControllerConfig` message.

Model
=====

.. cpp:class:: Model
 
  .. cpp:function:: Model(const MasterComponent& master_component, const ModelConfig& config)

     Creates a topic model defined by :ref:`ModelConfig` inside given :cpp:class:`MasterComponent`.

  .. cpp:function:: void Reconfigure(const ModelConfig& config)

     Updates the configuration of the model.

  .. cpp:function:: const std::string& name() const

     Returns the name of the model.

  .. cpp:function:: const ModelConfig& config() const

     Returns current configuration of the model.

  .. cpp:function:: ModelConfig* mutable_config()

     Returns mutable configuration of the model.
     Remember to call :cpp:func:`Reconfigure` to propagate your changes to the model.

  .. cpp:function:: void Overwrite(const TopicModel& topic_model)

     Updates the model with new Phi matrix.
     This can be used to provide an explicit initial approximation, or to adjust
     the model in between iterations.
     Remember to call :cpp:func:`Synchronize` after overwrite to propagate your change.

  .. cpp:function:: void Initialize(const Dictionary& dictionary)

     Initialize topic model based on the :cpp:class:`Dictionary`.
     Each token from the dictionary will be included in the model with randomly generated weight.

  .. cpp:function:: void Synchronize(double decay, bool invoke_regularizers)

     Synchronize the model.

     This operation updates the Phi matrix of the topic model with all model increments, collected since the last call to :cpp:func:`Synchronize` method.
     The weights in the Phi matrix are decreased according to *decay_weight* (refer to :attr:`SynchronizeModelArgs.decay_weight` for more details).
     Depending on *invoke_regularizers* parameter this operation may also invoke all regularizers.

     Remember to call :cpp:func:`Model::Synchronize` operation every time after calling :cpp:func:`MasterComponent::WaitIdle`.

  .. cpp:function:: void Synchronize(const SynchronizeModelArgs& args)

     Synchronize the model based on extended arguments :ref:`SynchronizeModelArgs`.

Regularizer
===========

.. cpp:class:: Regularizer

  .. cpp:function:: Regularizer(const MasterComponent& master_component, const RegularizerConfig& config)

     Creates a regularizer defined by :ref:`RegularizerConfig` inside given :cpp:class:`MasterComponent`.

  .. cpp:function:: void Reconfigure(const RegularizerConfig& config)

     Updates the configuration of the regularizer.

  .. cpp:function:: const RegularizerConfig& config() const

     Returns current configuration of the regularizer.

  .. cpp:function:: RegularizerConfig* mutable_config()

     Returns mutable configuration of the regularizer.
     Remember to call :cpp:func:`Reconfigure` to propagate your changes to the regularizer.

Dictionary
==========

.. cpp:class:: Dictionary

  .. cpp:function:: Dictionary(const MasterComponent& master_component, const DictionaryConfig& config)

     Creates a dictionary defined by :ref:`DictionaryConfig` inside given :cpp:class:`MasterComponent`.

  .. cpp:function:: void Reconfigure(const DictionaryConfig& config)

     Updates the configuration of the dictionary.

  .. cpp:function:: const std::string name() const

     Returns the name of the dictionary.

  .. cpp:function:: const DictionaryConfig& config() const

     Returns current configuration of the dictionary.

Utility methods
===============

.. cpp:function:: void SaveBatch(const Batch& batch, const std::string& disk_path)

   Saves :ref:`Batch` into a specific folder.
   The name of the resulting file will be autogenerated, and the extention set to *.batch*

.. cpp:function:: std::shared_ptr<DictionaryConfig> LoadDictionary(const std::string& filename)

   Loads the :ref:`DictionaryConfig` message from a specific file on disk.
   *filename* must represent full disk path to the dictionary file.

.. cpp:function:: std::shared_ptr<Batch> LoadBatch(const std::string& filename)

   Loads the :ref:`Batch` message from a specific file on disk.
   *filename* must represent full disk path to the batch file, including *.batch* extention.

.. cpp:function:: std::shared_ptr<DictionaryConfig> ParseCollection(const CollectionParserConfig& config)

   Parses a text collection as defined by :ref:`CollectionParserConfig` message.
   Returns an instance of :ref:`DictionaryConfig` which carry all unique words in the collection and their frequencies.

