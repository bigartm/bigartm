================
Python Interface
================

This document explains all classes in python interface of
BigARTM library.

.. py:module:: artm.library

Library
=======

.. py:class:: Library(artm_shared_library = "")

   Creates an ArtmLibrary object, wrapping the BigARTM shared library.
   
   The *artm_shared_library* is an optional argument, which provides full file name of artm shared library
   (a disk path plus ``artm.dll`` on Windows or ``artm.so`` on Linux).
   When *artm_shared_library* is not specified the shared library will be searched in folders listed in
   ``PATH`` system variable. You may also configure ``ARTM_SHARED_LIBRARY`` system variable
   to provide full file name of artm shared library.

   .. py:method:: CreateMasterComponent(config = None)

      Creates and returns an instance of :py:class:`MasterComponent` class.
      *config* defines an optional :ref:`MasterComponentConfig` parameter
      that may carry the configuration of the master component.

   .. py:method:: SaveBatch(batch, disk_path)

      Saves a given :ref:`Batch` into a disk location specified by *disk_path*.

   .. py:method:: ParseCollection(collection_parser_config)

      Parses a text collection as defined by *collection_parser_config* (:ref:`CollectionParserConfig`).
      Returns an instance of :ref:`DictionaryConfig` which carry all unique words in the collection and their frequencies.

      For more information refer to :c:func:`ArtmRequestParseCollection` and :c:func:`ArtmRequestLoadDictionary`.

   .. py:method:: LoadDictionary(full_filename)

      Loads a :ref:`DictionaryConfig` from the file, defined by *full_filename* argument.

      For more information refer to :c:func:`ArtmRequestLoadDictionary`.

   .. py:method:: LoadBatch(full_filename)

      Loads a :ref:`Batch` from the file, defined by *full_filename* argument.

      For more information refer to :c:func:`ArtmRequestLoadBatch`.

   .. py:method:: ParseCollectionOrLoadDictionary(docword_file_path, vocab_file_path, target_folder)

      A simple helper method that runs :py:meth:`ParseCollection` when *target_folder* is empty,
      otherwise tried to use :py:meth:`LoadDictionary` to load the dictionary from *target_folder*.

      The *docword_file_path* and *vocab_file_path* arguments should provide the disk location
      of docword and vocab files of the collection to be parsed.


MasterComponent
===============

.. py:class:: MasterComponent(config = None, lib = None, disk_path = None)

   Creates a master component.
   
   *config* is an optional instance of :ref:`MasterComponentConfig`, providing an initial configuration of the master component.
   
   *lib* is an optional argument pointing to :py:class:`Library`.
   When not specified, a default library will be used.
   Check the constructor of :py:class:`Library` for more details.

   *disk_path* is an optional value providing the disk folder with batches to process by this master component.
   Changing *disk_path* is not supported (you must recreate a new instance MasterComponent to do so).
   Use :py:meth:`InvokeIteration` will process all batches, located under *disk_path*.
   Alternatively use :py:meth:`AddBatch` to add a specific batch into processor queue.

   .. py:method:: Dispose()

      Disposes the master component and releases all unmanaged resources.

   .. py:method:: config()

      Returns current :ref:`MasterComponentConfig` of the master component.

   .. py:method:: CreateModel(config=None, topics_count=None, inner_iterations_count=None, class_ids=None, class_weights=None,
                              topic_names=None, use_sparse_format=None, request_type=None)

      Creates and returns an instance of :py:class:`Model` class based on a given :ref:`ModelConfig`.
      Note that the model has to be further tuned by several iterative scans over the text collection.
      Use :py:meth:`InvokeIteration` to perform such scans.

      All parameters will override values, specifed in *config*.

   .. py:method:: RemoveModel(model)

      Removes an instance of :py:class:`Model` from the master component.
      After this operation the *model* object became invalid and must not be used.

   .. py:method:: CreateRegularizer(name, type, config)

      Creates and returns an instance of :py:class:`Regularizer` component.
      *name* can be any unique identifier, that you can further use to identify regularizer (for example, in :attr:`ModelConfig.regularizer_name`).
      *type* can be any regularizer type (for example, the :py:data:`RegularizerConfig_Type_DirichletTheta`).
      *config* can be any regularizer config (for example, a :ref:`SmoothSparseThetaConfig`).

   .. py:method:: CreateSmoothSparseThetaRegularizer(name = None, config = None)

      Creates an instance of SmoothSparseThetaRegularizer.
      *config* is an optional argument of :ref:`SmoothSparseThetaConfig` type.

   .. py:method:: CreateSmoothSparsePhiRegularizer(name = None, config = None, topic_names=None, class_ids=None)

      Creates an instance of SmoothSparsePhiRegularizer.
      *config* is an optional argument of :ref:`SmoothSparsePhiConfig` type.

   .. py:method:: CreateDecorrelatorPhiRegularizer(name = None, config = None, topic_names=None, class_ids=None)

      Creates an instance of DecorrelatorPhiRegularizer.
      *config* is an optional argument of :ref:`DecorrelatorPhiConfig` type.

   .. py:method:: RemoveRegularizer(regularizer)

      Removes an instance of :py:class:`Regularizer` from the master component.
      After this operation the *regularizer* object became invalid and must not be used.

   .. py:method:: CreateScore(name, type, config)

      Creates a score calculator inside the master component.
      *name* can be any unique identifier, that you can further use to identify the score (for example, in :attr:`ModelConfig.score_name`).
      *type* can be any score type (for example, the :py:data:`ScoreConfig_Type_Perplexity`).
      *config* can be any score config (for example, a :ref:`PerplexityScoreConfig`).

   .. py:method:: CreatePerplexityScore(self, name = None, config = None, stream_name = None, class_ids=None)

      Creates an instance of PerplexityScore.
      *config* is an optional argument of :ref:`PerplexityScoreConfig` type.

   .. py:method:: CreateSparsityThetaScore(self, name = None, config = None, topic_names=None)

      Creates an instance of SparsityThetaScore.
      *config* is an optional argument of :ref:`SparsityThetaScoreConfig` type.

   .. py:method:: CreateSparsityPhiScore(self, name = None, config = None, topic_names=None, class_id=None)

      Creates an instance of SparsityPhiScore.
      *config* is an optional argument of :ref:`SparsityPhiScoreConfig` type.

   .. py:method:: CreateItemsProcessedScore(self, name = None, config = None)

      Creates an instance of ItemsProcessedScore.
      *config* is an optional argument of :ref:`ItemsProcessedScoreConfig` type.

   .. py:method:: CreateTopTokensScore(self, name = None, config = None, num_tokens = None, class_id = None, topic_names=None)

      Creates an instance of TopTokensScore.
      *config* is an optional argument of :ref:`TopTokensScoreConfig` type.

   .. py:method:: CreateThetaSnippetScore(self, name = None, config = None)

      Creates an instance of ThetaSnippetScore.
      *config* is an optional argument of :ref:`ThetaSnippetScoreConfig` type.

   .. py:method:: CreateTopicKernelScore(self, name = None, config = None, topic_names=None, class_id=None)

      Creates an instance of TopicKernelScore.
      *config* is an optional argument of :ref:`TopicKernelScoreConfig` type.

   .. py:method:: RemoveScore(name)

      Removes a score calculator with the specific name from the master component.

   .. py:method:: CreateDictionary(config)

      Creates and returns an instance of :py:class:`Dictionary` class component with a specific :ref:`DictionaryConfig`.

   .. py:method:: RemoveDictionary(dictionary)

      Removes an instance of :py:class:`Dictionary` from the master component.
      After this operation the *dictionary* object became invalid and must not be used.

   .. py:method:: Reconfigure(config = None)

      Updates the configuration of the master component with new :ref:`MasterComponentConfig` value, provided by *config* parameter.
      Remember that some changes of the configuration are not allowed (for example, the :attr:`MasterComponentConfig.disk_path` must not change).
      Such configuration parameters must be provided in the constructor of :py:class:`MasterComponent`.

   .. py:method:: AddBatch(self, batch = None, batch_filename = None, timeout = None, reset_scores = False, args=None)

      Adds an instance of :ref:`Batch` class to the processor queue.
      Master component creates a copy of the *batch*, so any further changes of the *batch* object will not be picked up.
      *batch_filename* is an alternative to file with binary-serialized batch (you must use either *batch* or *batch_filename* option,
      but not both at the same time).

      This operation awaits until there is enough space in processor queue.
      It returns *True* if await succeeded within the timeout, otherwise returns *False*.
      The provided timeout is in milliseconds. By default it allows an infinite time for :py:meth:`AddBatch` operation.

      *args* is an optional argument of :ref:`AddBatchArgs` type.

   .. py:method:: InvokeIteration(iterations_count = 1, disk_path = None, args=None)

      Invokes several iterations over the collection. The recommended value for *iterations_count* is 1.
      *disk_path* defines the disk location with batches to process on this iteration.
      For more iterations use for loop around :py:meth:`InvokeIteration` method.
      This operation is asynchronous. Use :py:meth:`WaitIdle` to await until all iterations succeeded.

      *args* is an optional argument of :ref:`InvokeIterationArgs` type.

   .. py:method:: WaitIdle(timeout = None, args=None)

      Awaits for ongoing iterations. Returns *True* if iterations had been finished within the timeout, otherwise returns *False*.
      The provided timeout is in milliseconds. Use *timeout = -1* to allow infinite time for :py:meth:`WaitIdle` operation.
      Remember to call :py:meth:`Model.Synchronize` operation to synchronize each model that you are currently processing.

      *args* is an optional argument of :ref:`WaitIdleArgs` type.

   .. py:method:: CreateStream(stream)

      Creates a data stream base on the *stream* (:ref:`Stream`).

   .. py:method:: RemoveStream(stream_name)

      Removes a stream with the specific name from the master component.

   .. py:method:: GetTopicModel(model = None, args = None)

      Retrieves and returns an instance of :ref:`TopicModel` class, carrying all the data of the topic model (including the Phi matrix).
      Parameter *model* should be an instance of :py:class:`Model` class.
      For more settings use *args* parameter (see :ref:`GetTopicModelArgs` for all available options).

   .. py:method:: GetRegularizerState(regularizer_name)

      Retrieves and returns the internal state of a regularizer with the specific name.

   .. py:method:: GetThetaMatrix(model = None, batch = None, clean_cache = None, args = None)

      Retrieves an instance of :ref:`ThetaMatrix` class.
      The content depends on *batch* parameter.
      When *batch* is provided, the resulting :ref:`ThetaMatrix` will contain theta values estimated for all documents in the batch.
      When *batch* is not provided, the resulting :ref:`ThetaMatrix` will contain theta values gathered during the last iteration.

      Parameter *model* should be an instance of :py:class:`Model` class.
      For more settings use *args* parameter (see :ref:`GetThetaMatrixArgs` for all available options).

      When used without *batch*, this operation require :attr:`MasterComponentConfig.cache_theta` to be set to *True* before starting the last iteration.
      In this case the entire ThetaMatrix must fit into CPU memory, and for this reason :attr:`MasterComponentConfig.cache_theta` is turned off by default.

Model
=====

.. py:class:: Model

   This constructor must not be used explicitly.
   The only correct way of creating a Model is through :py:meth:`MasterComponent.CreateModel` method.

   .. py:method:: name()

      Returns the string name of the model.

   .. py:method:: Reconfigure(config = None)

      Updates the configuration of the topic model with new :ref:`ModelConfig` value, provided by *config* parameter.
      When *config* is not specified the configuration is updated with :py:meth:`config` value.
      Remember that some changes of the configuration are applied immediately after this call.
      For example, changes to :attr:`ModelConfig.topics_count` or :attr:`ModelConfig.topic_name` 
      will be applied only during the next :attr:`Synchronize` call.

      Note that changes :attr:`ModelConfig.topics_count` or :attr:`ModelConfig.topic_name`
      are only supported on an idle master component (e.g. in between iterations).
      Changing these values during an ongoing iteration may cause unexpected results.

   .. py:method:: topics_count()

      Returns the number of topics in the model.

   .. py:method:: config()

      Returns current :ref:`ModelConfig` of the topic model.

   .. py:method:: Synchronize(decay_weight = 0.0, apply_weight = 1.0, invoke_regularizers = True, args=None)

      This operation updates the Phi matrix of the topic model with all model increments, collected since the last call to :py:meth:`Synchronize` method.
      The Phi matrix is calculated according to *decay_weight* and *apply_weight* (refer to :attr:`SynchronizeModelArgs.decay_weight` for more details).
      Depending on *invoke_regularizers* parameter this operation may also invoke all regularizers.

      Remember to call :py:meth:`Synchronize` operation every time after call :py:meth:`MasterComponent.WaitIdle`.

      For more settings use *args* parameter (see :ref:`SynchronizeModelArgs` for all available options).

   .. py:method:: Initialize(dictionary = None, args=None)

      Generates a random initial approximation for the Phi matrix of the topic model.

      *dictionary* must be an instance of :py:class:`Dictionary` class.
      
      For more settings use *args* parameter (see :ref:`InitializeModelArgs` for all available options).

   .. py:method:: Export(filename)

      Exports topic model into a file.

   .. py:method:: Import(filename)

      Imports topic model from a file.

   .. py:method:: Overwrite(topic_model, commit = True)

      Updates the model with new Phi matrix, defined by *topic_model* (:ref:`TopicModel`).
      This operation can be used to provide an explicit initial approximation of the topic model, or to adjust the model in between iterations.

      Depending on the *commit* flag the change can be applied immediately (*commit = true*) or queued (*commit = false*).
      The default setting is to use *commit = true*.
      You may want to use *commit = false* if your model is too big to be updated in a single protobuf message.
      In this case you should split your model into parts, each part containing subset of all tokens,
      and then submit each part in separate Overwrite operation with *commit = false*.
      After that remember to call :py:meth:`MasterComponent.WaitIdle` and :py:meth:`Model.Synchronize` to propagate your change.

   .. py:method:: Enable()

      Sets :attr:`ModelConfig.enabled` to *True* for the current topic model. This means that the model will be updated on :py:meth:`MasterComponent.InvokeIteration`.

   .. py:method:: EnableScore(score)

      By default model does calculate any scores even if they are created with
      :py:meth:`MasterComponent.CreateScore`.
      Method *EnableScore* tells to the model that *score* should be applied to the model.
      Parameter *tau* defines the regularization coefficient of the regularizer.
      *score* must be an instance of :py:class:`Score` class.

   .. py:method:: EnableRegularizer(regularizer, tau)

      By default model does not use any regularizers even if they are created with
      :py:meth:`MasterComponent.CreateRegularizer`.
      Method *EnableRegularizer* tells to the model that *regularizer* should be applied to the model.
      Parameter *tau* defines the regularization coefficient of the regularizer.
      *regularizer* must be an instance of :py:class:`Regularizer` class.

   .. py:method:: Disable()

      Sets :attr:`ModelConfig.enabled` to *False`* for the current topic model. This means that the model will not be updated on :py:meth:`MasterComponent.InvokeIteration`,
      but the the scores for the model still will be collected.

Regularizer
===========

.. py:class:: Regularizer

   This constructor must not be used explicitly.
   The only correct way of creating a Regularizer is through :py:meth:`MasterComponent.CreateRegularizer` method
   (or similar methods in :py:class:`MasterComponent` class, dedicated to a particular type of the regularizer).
   

   .. py:method:: name()

      Returns the string name of the regularizer.

   .. py:method:: Reconfigure(type, config)

      Updates the configuration of the regularizer with new regularizer configuration, provided by *config* parameter.
      The *config* object can be, for example, of :ref:`SmoothSparseThetaConfig` type (or similar).
      The type must match the current type of the regularizer.

Score
=====

.. py:class:: Score

   This constructor must not be used explicitly.
   The only correct way of creating a Score is through :py:meth:`MasterComponent.CreateScore` method
   (or similar methods in :py:class:`MasterComponent` class, dedicated to a particular type of the score).

   .. py:method:: name()

      Returns the string name of the score.

   .. py:method:: GetValue(model = None, batch = None)

      Retrieves the score for a specific model.
      For cumulative scores such as Perplexity of ThetaSparsity score it is possible to use *batch* argument.

Dictionary
==========

.. py:class:: Dictionary(master_component, config)

   This constructor must not be used explicitly.
   The only correct way of creating a Dictionary is through :py:meth:`MasterComponent.CreateDictionary` method.

   .. py:method:: name()

      Returns the string name of the dictionary.

   .. py:method:: Reconfigure(config)

      Updates the configuration of the dictionary with new :ref:`DictionaryConfig` value, provided by *config* parameter.

Visualizers
===========

.. py:class:: Visualizers

   This class provides a set of static method to visualize some scores.

   .. py:method:: PrintTopTokensScore(top_tokens_score)

   Prints the TopTokensScore.

   .. py:method:: PrintThetaSnippetScore(theta_snippet_score)

   Prints the ThetaSnippetScore.

Exceptions
==========

.. py:exception:: InternalError

   An exception class corresponding to :c:macro:`ARTM_INTERNAL_ERROR` error code.

.. py:exception:: ArgumentOutOfRangeException

   An exception class corresponding to :c:macro:`ARTM_ARGUMENT_OUT_OF_RANGE` error code.

.. py:exception:: InvalidMasterIdException

   An exception class corresponding to :c:macro:`ARTM_INVALID_MASTER_ID` error code.

.. py:exception:: CorruptedMessageException

   An exception class corresponding to :c:macro:`ARTM_CORRUPTED_MESSAGE` error code.

.. py:exception:: InvalidOperationException

   An exception class corresponding to :c:macro:`ARTM_INVALID_OPERATION` error code.

.. py:exception:: DiskReadException

   An exception class corresponding to :c:macro:`ARTM_DISK_READ_ERROR` error code.

.. py:exception:: DiskWriteException

   An exception class corresponding to :c:macro:`ARTM_DISK_WRITE_ERROR` error code.


Constants
=========

.. py:data:: Stream_Type_Global

.. py:data:: Stream_Type_ItemIdModulus

.. py:data:: RegularizerConfig_Type_DirichletTheta

.. py:data:: RegularizerConfig_Type_DirichletPhi

.. py:data:: RegularizerConfig_Type_SmoothSparseTheta

.. py:data:: RegularizerConfig_Type_SmoothSparsePhi

.. py:data:: RegularizerConfig_Type_DecorrelatorPhi

.. py:data:: ScoreConfig_Type_Perplexity

.. py:data:: ScoreData_Type_Perplexity

.. py:data:: ScoreConfig_Type_SparsityTheta

.. py:data:: ScoreData_Type_SparsityTheta

.. py:data:: ScoreConfig_Type_SparsityPhi

.. py:data:: ScoreData_Type_SparsityPhi

.. py:data:: ScoreConfig_Type_ItemsProcessed

.. py:data:: ScoreData_Type_ItemsProcessed

.. py:data:: ScoreConfig_Type_TopTokens

.. py:data:: ScoreData_Type_TopTokens

.. py:data:: ScoreConfig_Type_ThetaSnippet

.. py:data:: ScoreData_Type_ThetaSnippet

.. py:data:: ScoreConfig_Type_TopicKernel

.. py:data:: ScoreData_Type_TopicKernel

.. py:data:: PerplexityScoreConfig_Type_UnigramDocumentModel

.. py:data:: PerplexityScoreConfig_Type_UnigramCollectionModel

.. py:data:: CollectionParserConfig_Format_BagOfWordsUci
